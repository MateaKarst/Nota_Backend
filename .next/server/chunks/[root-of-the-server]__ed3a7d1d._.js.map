{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/lib/supabase.ts"],"sourcesContent":["// src/lib/supabase.ts\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nexport const supabase = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\n);\r\n\r\nexport const supabaseAdmin = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n"],"names":[],"mappings":"AAAA,sBAAsB;;;;;AACtB;;AAEO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD;AAK5B,MAAM,gBAAgB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,gFAEpC,QAAQ,GAAG,CAAC,yBAAyB","debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/utils/cors.ts"],"sourcesContent":["// src/utils/cors.ts\r\nimport { NextResponse } from 'next/server'\r\n\r\nconst allowedOrigins = [\r\n    // localhost browser\r\n    'http://localhost:3000',\r\n    'http://localhost:3001',\r\n    'http://localhost:3002',\r\n\r\n    // vio n mk network?\r\n    'http://192.168.1.38:3000',\r\n    'http://192.168.1.38:3001',\r\n    'http://192.168.1.38:3002',\r\n\r\n    // app sites\r\n    'https://nota-community.netlify.app',\r\n    'https://nota-backend-delta.vercel.app'\r\n]\r\n\r\nexport function handlePreflight(request: Request): NextResponse {\r\n    const origin = request.headers.get('origin') || '';\r\n    const headers: Record<string, string> = {\r\n        'Access-Control-Allow-Methods': 'GET, PATCH, POST, PUT, OPTIONS',\r\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization, x-refresh-token, x-user-id',\r\n        'Access-Control-Allow-Credentials': 'true',\r\n    };\r\n\r\n    if (allowedOrigins.includes(origin)) {\r\n        headers['Access-Control-Allow-Origin'] = origin;\r\n    }\r\n\r\n    return new NextResponse(null, {\r\n        status: 204,\r\n        headers,\r\n    });\r\n}\r\n\r\nexport function addCorsHeaders(\r\n    request: Request,\r\n    response: NextResponse\r\n): NextResponse {\r\n    const origin = request.headers.get('origin') || ''\r\n    if (allowedOrigins.includes(origin)) {\r\n        response.headers.set('Access-Control-Allow-Origin', origin)\r\n        response.headers.set('Access-Control-Allow-Credentials', 'true')\r\n    }\r\n    return response\r\n}"],"names":[],"mappings":"AAAA,oBAAoB;;;;;AACpB;;AAEA,MAAM,iBAAiB;IACnB,oBAAoB;IACpB;IACA;IACA;IAEA,oBAAoB;IACpB;IACA;IACA;IAEA,YAAY;IACZ;IACA;CACH;AAEM,SAAS,gBAAgB,OAAgB;IAC5C,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;IAChD,MAAM,UAAkC;QACpC,gCAAgC;QAChC,gCAAgC;QAChC,oCAAoC;IACxC;IAEA,IAAI,eAAe,QAAQ,CAAC,SAAS;QACjC,OAAO,CAAC,8BAA8B,GAAG;IAC7C;IAEA,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;QAC1B,QAAQ;QACR;IACJ;AACJ;AAEO,SAAS,eACZ,OAAgB,EAChB,QAAsB;IAEtB,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;IAChD,IAAI,eAAe,QAAQ,CAAC,SAAS;QACjC,SAAS,OAAO,CAAC,GAAG,CAAC,+BAA+B;QACpD,SAAS,OAAO,CAAC,GAAG,CAAC,oCAAoC;IAC7D;IACA,OAAO;AACX","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/app/api/songs/route.ts"],"sourcesContent":["// src\\app\\api\\songs\\route.ts\r\nimport { NextResponse, NextRequest } from \"next/server\";\r\nimport { supabaseAdmin } from \"@/lib/supabase\";\r\nimport { addCorsHeaders, handlePreflight } from \"@/utils/cors\";\r\n\r\nexport async function OPTIONS(request: NextRequest) {\r\n    return handlePreflight(request);\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n    const body = await request.json();\r\n    const { id, title, user_id, description, cover_image, compiled_path, genres } = body;\r\n\r\n    if (!title || !user_id) {\r\n        const res = NextResponse.json({ message: \"Missing title or user_id\" }, { status: 400 });\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    if (genres && !Array.isArray(genres)) {\r\n        const res = NextResponse.json({ message: \"Genres must be an array\" }, { status: 400 });\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    const values = { title, user_id, description, cover_image, compiled_path, genres };\r\n\r\n    const { data, error } = id\r\n        ? await supabaseAdmin\r\n            .from(\"songs\")\r\n            .update(values)\r\n            .eq(\"id\", id)\r\n            .select()\r\n            .single()\r\n        : await supabaseAdmin\r\n            .from(\"songs\")\r\n            .insert([values])\r\n            .select()\r\n            .single();\r\n\r\n    if (error) {\r\n        const res = NextResponse.json({ message: \"Error saving song\", error: error.message }, { status: 500 });\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    const res = NextResponse.json(data, { status: 200 });\r\n    return addCorsHeaders(request, res);\r\n}\r\n\r\n\r\nexport async function GET(request: NextRequest) {\r\n    // 1. Fetch all songs\r\n    const { data: songs, error: songsError } = await supabaseAdmin\r\n        .from(\"songs\")\r\n        .select(\"*\");\r\n\r\n    if (songsError) {\r\n        const res = NextResponse.json(\r\n            { message: \"Error fetching songs\", error: songsError.message },\r\n            { status: 500 }\r\n        );\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    if (!songs || songs.length === 0) {\r\n        const res = NextResponse.json([], { status: 200 });\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    // Get all unique user_ids from songs (remove falsy)\r\n    const songUserIds = [...new Set(songs.map((song) => song.user_id).filter(Boolean))];\r\n\r\n    // 2. Fetch user_details for these user_ids (skip if empty)\r\n    let songUsersDetails = [];\r\n    if (songUserIds.length > 0) {\r\n        const { data, error } = await supabaseAdmin\r\n            .from(\"user_details\")\r\n            .select(\"*\")\r\n            .in(\"id\", songUserIds);  // <-- changed from auth_user_id to id\r\n\r\n        if (error) {\r\n            const res = NextResponse.json(\r\n                { message: \"Error fetching user details\", error: error.message },\r\n                { status: 500 }\r\n            );\r\n            return addCorsHeaders(request, res);\r\n        }\r\n        songUsersDetails = data || [];\r\n    }\r\n\r\n    // 3. Fetch tracks for these songs\r\n    const songIds = songs.map((song) => song.id);\r\n    let tracks = [];\r\n    if (songIds.length > 0) {\r\n        const { data, error } = await supabaseAdmin\r\n            .from(\"tracks\")\r\n            .select(\"*\")\r\n            .in(\"song_id\", songIds);\r\n\r\n        if (error) {\r\n            const res = NextResponse.json(\r\n                { message: \"Error fetching tracks\", error: error.message },\r\n                { status: 500 }\r\n            );\r\n            return addCorsHeaders(request, res);\r\n        }\r\n        tracks = data || [];\r\n    }\r\n\r\n    // 4. Get unique user_ids from tracks (remove falsy)\r\n    const trackUserIds = [...new Set(tracks.map((track) => track.user_id).filter(Boolean))];\r\n\r\n    // 5. Fetch user_details for track users (skip if empty)\r\n    let trackUsersDetails = [];\r\n    if (trackUserIds.length > 0) {\r\n        const { data, error } = await supabaseAdmin\r\n            .from(\"user_details\")\r\n            .select(\"*\")\r\n            .in(\"id\", trackUserIds);  // <-- changed from auth_user_id to id\r\n\r\n        if (error) {\r\n            const res = NextResponse.json(\r\n                { message: \"Error fetching track user details\", error: error.message },\r\n                { status: 500 }\r\n            );\r\n            return addCorsHeaders(request, res);\r\n        }\r\n        trackUsersDetails = data || [];\r\n    }\r\n\r\n    // 6. Map user_details by id for easy lookup\r\n    const songUserMap = new Map(songUsersDetails.map((u) => [u.id, u]));  // <-- changed key to id\r\n    const trackUserMap = new Map(trackUsersDetails.map((u) => [u.id, u])); // <-- changed key to id\r\n\r\n    // 7. Attach user_details to songs and tracks\r\n    const songsWithUsers = songs.map((song) => ({\r\n        ...song,\r\n        user_details: songUserMap.get(song.user_id) || null,\r\n        tracks: tracks\r\n            .filter((track) => track.song_id === song.id)\r\n            .map((track) => ({\r\n                ...track,\r\n                user_details: trackUserMap.get(track.user_id) || null,\r\n            })),\r\n    }));\r\n\r\n    const res = NextResponse.json(songsWithUsers, { status: 200 });\r\n    return addCorsHeaders(request, res);\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}