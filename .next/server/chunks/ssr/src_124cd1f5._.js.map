{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/components/Navbar.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport Link from \"next/link\";\r\nimport { useAppHook } from \"@/context/AppUtils\";\r\nimport { useState } from \"react\";\r\n\r\nconst Navbar = () => {\r\n    const { isLoggedIn, setIsLoggedIn, refreshUser } = useAppHook(); // âœ…\r\n    const [isLoggingOut, setIsLoggingOut] = useState(false);\r\n\r\n    const handleLogout = async () => {\r\n        setIsLoggingOut(true);\r\n        await fetch(\"/api/auth/logout\", { method: \"POST\" });\r\n        await refreshUser(); // update context after logout\r\n        setIsLoggedIn(false);\r\n        setIsLoggingOut(false);\r\n        window.location.href = \"/\"; // force nav\r\n    };\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg px-4\" style={{ backgroundColor: \"#343a40\" }}>\r\n            <Link className=\"navbar-brand fw-bold text-white\" href=\"/\">SupaNext</Link>\r\n\r\n            {isLoggedIn ? (\r\n                <div className=\"ms-auto\">\r\n                    <Link className=\"me-3 text-white text-decoration-none\" href=\"/auth/dashboard\">Dashboard</Link>\r\n                    <Link className=\"me-3 text-white text-decoration-none\" href=\"/auth/profile\">Profile</Link>\r\n                    <Link className=\"me-3 text-white text-decoration-none\" href=\"/auth/editor\">Editor</Link>\r\n                    <Link className=\"me-3 text-white text-decoration-none\" href=\"/auth/connections\">Connections</Link>\r\n                    <Link className=\"me-3 text-white text-decoration-none\" href=\"/auth/messages\">Messages</Link>\r\n                    <button\r\n                        className=\"btn btn-danger\"\r\n                        onClick={handleLogout}\r\n                        disabled={isLoggingOut}\r\n                    >\r\n                        {isLoggingOut ? \"Logging out...\" : \"Logout\"}\r\n                    </button>\r\n                </div>\r\n            ) : (\r\n                <div className=\"ms-auto\">\r\n                    <Link className=\"me-3 text-white text-decoration-none\" href=\"/\">Home</Link>\r\n                    <Link className=\"text-white text-decoration-none\" href=\"/auth/login\">Login</Link>\r\n                </div>\r\n            )}\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMA,MAAM,SAAS;IACX,MAAM,EAAE,UAAU,EAAE,aAAa,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,2HAAA,CAAA,aAAU,AAAD,KAAK,IAAI;IACrE,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEjD,MAAM,eAAe;QACjB,gBAAgB;QAChB,MAAM,MAAM,oBAAoB;YAAE,QAAQ;QAAO;QACjD,MAAM,eAAe,8BAA8B;QACnD,cAAc;QACd,gBAAgB;QAChB,OAAO,QAAQ,CAAC,IAAI,GAAG,KAAK,YAAY;IAC5C;IAEA,qBACI,8OAAC;QAAI,WAAU;QAA+B,OAAO;YAAE,iBAAiB;QAAU;;0BAC9E,8OAAC,4JAAA,CAAA,UAAI;gBAAC,WAAU;gBAAkC,MAAK;0BAAI;;;;;;YAE1D,2BACG,8OAAC;gBAAI,WAAU;;kCACX,8OAAC,4JAAA,CAAA,UAAI;wBAAC,WAAU;wBAAuC,MAAK;kCAAkB;;;;;;kCAC9E,8OAAC,4JAAA,CAAA,UAAI;wBAAC,WAAU;wBAAuC,MAAK;kCAAgB;;;;;;kCAC5E,8OAAC,4JAAA,CAAA,UAAI;wBAAC,WAAU;wBAAuC,MAAK;kCAAe;;;;;;kCAC3E,8OAAC,4JAAA,CAAA,UAAI;wBAAC,WAAU;wBAAuC,MAAK;kCAAoB;;;;;;kCAChF,8OAAC,4JAAA,CAAA,UAAI;wBAAC,WAAU;wBAAuC,MAAK;kCAAiB;;;;;;kCAC7E,8OAAC;wBACG,WAAU;wBACV,SAAS;wBACT,UAAU;kCAET,eAAe,mBAAmB;;;;;;;;;;;qCAI3C,8OAAC;gBAAI,WAAU;;kCACX,8OAAC,4JAAA,CAAA,UAAI;wBAAC,WAAU;wBAAuC,MAAK;kCAAI;;;;;;kCAChE,8OAAC,4JAAA,CAAA,UAAI;wBAAC,WAAU;wBAAkC,MAAK;kCAAc;;;;;;;;;;;;;;;;;;AAKzF;uCAEe","debugId":null}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/components/Footer.tsx"],"sourcesContent":["const Footer = () => {\r\n\r\n    return <>\r\n        <footer className=\"text-center py-3 mt-5\" style={ { backgroundColor: \"#343a40\",color: \"white\" } }>\r\n            <p className=\"mb-0\">&copy; { new Date().getFullYear() } Admin Panel. All Rights Reserved.</p>\r\n        </footer>\r\n    </>\r\n}\r\n\r\nexport default Footer;"],"names":[],"mappings":";;;;;AAAA,MAAM,SAAS;IAEX,qBAAO;kBACH,cAAA,8OAAC;YAAO,WAAU;YAAwB,OAAQ;gBAAE,iBAAiB;gBAAU,OAAO;YAAQ;sBAC1F,cAAA,8OAAC;gBAAE,WAAU;;oBAAO;oBAAS,IAAI,OAAO,WAAW;oBAAI;;;;;;;;;;;;;AAGnE;uCAEe","debugId":null}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/utils/formatting.ts"],"sourcesContent":["export const formatDateTime = (isoString: string): string => {\r\n    if (!isoString) return '';\r\n\r\n    const date = new Date(isoString);\r\n\r\n    return date.toLocaleString('en-GB', {\r\n        day: '2-digit',\r\n        month: '2-digit',\r\n        year: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        hour12: true,\r\n    });\r\n};\r\n"],"names":[],"mappings":";;;AAAO,MAAM,iBAAiB,CAAC;IAC3B,IAAI,CAAC,WAAW,OAAO;IAEvB,MAAM,OAAO,IAAI,KAAK;IAEtB,OAAO,KAAK,cAAc,CAAC,SAAS;QAChC,KAAK;QACL,OAAO;QACP,MAAM;QACN,MAAM;QACN,QAAQ;QACR,QAAQ;IACZ;AACJ","debugId":null}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/components/EditableTable.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { formatDateTime } from \"@/utils/formatting\";\r\n\r\ntype EditableTableProps = {\r\n    data: Record<string, unknown>[];\r\n    table: string;\r\n    visibleColumns?: string[];\r\n    columnLabels?: Record<string, string>;\r\n    onCellUpdate?: (\r\n        rowId: string | number,\r\n        column: string,\r\n        newValue: string\r\n    ) => Promise<void>;\r\n    onRowDelete?: (rowId: string | number) => Promise<void>; // Function to handle row deletion\r\n    onRowEdit?: (rowId: string | number) => void; // Function to handle row edit (could be a modal or something)\r\n};\r\n\r\nconst isISODateTime = (value: unknown): boolean => {\r\n    if (typeof value !== \"string\") return false;\r\n\r\n    const date = new Date(value);\r\n    return !isNaN(date.getTime()) && value.includes(\"T\");\r\n};\r\n\r\nconst EditableTable: React.FC<EditableTableProps> = ({\r\n    data,\r\n    table,\r\n    visibleColumns,\r\n    columnLabels = {},\r\n    onRowDelete,\r\n    onRowEdit,\r\n}) => {\r\n    const [tableData, setTableData] = useState(data);\r\n\r\n    useEffect(() => {\r\n        setTableData(data);\r\n    }, [data]);\r\n\r\n    const columns =\r\n        visibleColumns && visibleColumns.length > 0\r\n            ? visibleColumns\r\n            : data.length > 0\r\n            ? Object.keys(data[0])\r\n            : [];\r\n\r\n    const handleEditClick = (rowId: string | number) => {\r\n        if (onRowEdit) onRowEdit(rowId);\r\n    };\r\n\r\n    const handleDeleteClick = async (rowId: string | number) => {\r\n        if (onRowDelete) {\r\n            try {\r\n                await onRowDelete(rowId);\r\n                toast.success(\"Row deleted successfully\");\r\n            } catch (error) {\r\n                toast.error(\"Failed to delete row\");\r\n                console.error(error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <h4 className=\"center-align\">{table.toUpperCase()} Table</h4>\r\n            <div className=\"table-responsive\">\r\n                <table className=\"table highlight striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            {columns.map((col) => (\r\n                                <th key={col}>{columnLabels[col] ?? col}</th>\r\n                            ))}\r\n                            <th>Actions</th> {/* New column for Actions */}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {tableData.map((row, rowIndex) => (\r\n                            <tr key={(row.id as string | number) ?? rowIndex}>\r\n                                {columns.map((col) => (\r\n                                    <td key={col}>\r\n                                        {/* Display the value in the cell without the click-to-edit functionality */}\r\n                                        {isISODateTime(row[col])\r\n                                            ? formatDateTime(String(row[col]))\r\n                                            : String(row[col] ?? \"\")}\r\n                                    </td>\r\n                                ))}\r\n                                {/* New Actions Column */}\r\n                                <td>\r\n                                    <button\r\n                                        className=\"btn btn-warning btn-sm\"\r\n                                        onClick={() => handleEditClick(row.id as string | number)}\r\n                                    >\r\n                                        Edit\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"btn btn-danger btn-sm ml-2\"\r\n                                        onClick={() => handleDeleteClick(row.id as string | number)}\r\n                                    >\r\n                                        Delete\r\n                                    </button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditableTable;\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAoBA,MAAM,gBAAgB,CAAC;IACnB,IAAI,OAAO,UAAU,UAAU,OAAO;IAEtC,MAAM,OAAO,IAAI,KAAK;IACtB,OAAO,CAAC,MAAM,KAAK,OAAO,OAAO,MAAM,QAAQ,CAAC;AACpD;AAEA,MAAM,gBAA8C,CAAC,EACjD,IAAI,EACJ,KAAK,EACL,cAAc,EACd,eAAe,CAAC,CAAC,EACjB,WAAW,EACX,SAAS,EACZ;IACG,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,aAAa;IACjB,GAAG;QAAC;KAAK;IAET,MAAM,UACF,kBAAkB,eAAe,MAAM,GAAG,IACpC,iBACA,KAAK,MAAM,GAAG,IACd,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,IACnB,EAAE;IAEZ,MAAM,kBAAkB,CAAC;QACrB,IAAI,WAAW,UAAU;IAC7B;IAEA,MAAM,oBAAoB,OAAO;QAC7B,IAAI,aAAa;YACb,IAAI;gBACA,MAAM,YAAY;gBAClB,uJAAA,CAAA,UAAK,CAAC,OAAO,CAAC;YAClB,EAAE,OAAO,OAAO;gBACZ,uJAAA,CAAA,UAAK,CAAC,KAAK,CAAC;gBACZ,QAAQ,KAAK,CAAC;YAClB;QACJ;IACJ;IAEA,qBACI,8OAAC;QAAI,WAAU;;0BACX,8OAAC;gBAAG,WAAU;;oBAAgB,MAAM,WAAW;oBAAG;;;;;;;0BAClD,8OAAC;gBAAI,WAAU;0BACX,cAAA,8OAAC;oBAAM,WAAU;;sCACb,8OAAC;sCACG,cAAA,8OAAC;;oCACI,QAAQ,GAAG,CAAC,CAAC,oBACV,8OAAC;sDAAc,YAAY,CAAC,IAAI,IAAI;2CAA3B;;;;;kDAEb,8OAAC;kDAAG;;;;;;oCAAY;;;;;;;;;;;;sCAGxB,8OAAC;sCACI,UAAU,GAAG,CAAC,CAAC,KAAK,yBACjB,8OAAC;;wCACI,QAAQ,GAAG,CAAC,CAAC,oBACV,8OAAC;0DAEI,cAAc,GAAG,CAAC,IAAI,IACjB,CAAA,GAAA,0HAAA,CAAA,iBAAc,AAAD,EAAE,OAAO,GAAG,CAAC,IAAI,KAC9B,OAAO,GAAG,CAAC,IAAI,IAAI;+CAJpB;;;;;sDAQb,8OAAC;;8DACG,8OAAC;oDACG,WAAU;oDACV,SAAS,IAAM,gBAAgB,IAAI,EAAE;8DACxC;;;;;;8DAGD,8OAAC;oDACG,WAAU;oDACV,SAAS,IAAM,kBAAkB,IAAI,EAAE;8DAC1C;;;;;;;;;;;;;mCApBA,AAAC,IAAI,EAAE,IAAwB;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BpE;uCAEe","debugId":null}},
    {"offset": {"line": 370, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/app/auth/dashboard/page.tsx"],"sourcesContent":["// src/app/auth/dashboard/page.tsx\r\n\"use client\";\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport Navbar from '@/components/Navbar';\r\nimport Footer from '@/components/Footer';\r\nimport EditableTable from '@/components/EditableTable';\r\n\r\ntype Socials = {\r\n    name: string;\r\n    url: string;\r\n    created: string;\r\n    updated: string;\r\n};\r\n\r\nconst Dashboard = () => {\r\n    const [socialsData, setSocialsData] = useState<Socials[]>([]);\r\n\r\n    useEffect(() => {\r\n        const fetchSocials = async () => {\r\n            try {\r\n                // Fetch data from the backend API (which hides the Supabase details)\r\n                const response = await fetch('/api/socials');\r\n                const data = await response.json();\r\n\r\n                if (response.ok) {\r\n                    setSocialsData(data); // Set the fetched data in the state\r\n                } else {\r\n                    console.error('Error fetching socials:', data.message);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching socials:', error);\r\n            }\r\n        };\r\n\r\n        fetchSocials();\r\n    }, []); // Empty dependency array to run only once when the component mounts\r\n\r\n    // handleCellUpdate function to handle updating data (you can expand on this)\r\n    const handleCellUpdate = async (id: string | number, column: string, newValue: string) => {\r\n        try {\r\n            const response = await fetch(`/api/socials/${id}`, {\r\n                method: 'PUT',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ [column]: newValue }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                console.error('Error updating cell:', data.message || 'Unknown error');\r\n            } else {\r\n                console.log('Cell updated successfully');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating cell:', error);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <Navbar />\r\n            <div className=\"container mt-5\">\r\n                <h2>Dashboard</h2>\r\n                <EditableTable\r\n                    table=\"socials\"\r\n                    data={socialsData}\r\n                    visibleColumns={[\"name\", \"url\", \"created\", \"updated\"]}\r\n                    columnLabels={{\r\n                        name: \"Name\",\r\n                        url: \"URL\",\r\n                        created: \"Created At\",\r\n                        updated: \"Updated At\",\r\n                    }}\r\n                    onCellUpdate={handleCellUpdate}\r\n                />\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"names":[],"mappings":"AAAA,kCAAkC;;;;;AAGlC;AACA;AACA;AACA;AALA;;;;;;AAcA,MAAM,YAAY;IACd,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAa,EAAE;IAE5D,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,MAAM,eAAe;YACjB,IAAI;gBACA,qEAAqE;gBACrE,MAAM,WAAW,MAAM,MAAM;gBAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;gBAEhC,IAAI,SAAS,EAAE,EAAE;oBACb,eAAe,OAAO,oCAAoC;gBAC9D,OAAO;oBACH,QAAQ,KAAK,CAAC,2BAA2B,KAAK,OAAO;gBACzD;YACJ,EAAE,OAAO,OAAO;gBACZ,QAAQ,KAAK,CAAC,2BAA2B;YAC7C;QACJ;QAEA;IACJ,GAAG,EAAE,GAAG,oEAAoE;IAE5E,6EAA6E;IAC7E,MAAM,mBAAmB,OAAO,IAAqB,QAAgB;QACjE,IAAI;YACA,MAAM,WAAW,MAAM,MAAM,CAAC,aAAa,EAAE,IAAI,EAAE;gBAC/C,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;oBAAE,CAAC,OAAO,EAAE;gBAAS;YAC9C;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAEhC,IAAI,CAAC,SAAS,EAAE,EAAE;gBACd,QAAQ,KAAK,CAAC,wBAAwB,KAAK,OAAO,IAAI;YAC1D,OAAO;gBACH,QAAQ,GAAG,CAAC;YAChB;QACJ,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,wBAAwB;QAC1C;IACJ;IAGA,qBACI;;0BACI,8OAAC,4HAAA,CAAA,UAAM;;;;;0BACP,8OAAC;gBAAI,WAAU;;kCACX,8OAAC;kCAAG;;;;;;kCACJ,8OAAC,mIAAA,CAAA,UAAa;wBACV,OAAM;wBACN,MAAM;wBACN,gBAAgB;4BAAC;4BAAQ;4BAAO;4BAAW;yBAAU;wBACrD,cAAc;4BACV,MAAM;4BACN,KAAK;4BACL,SAAS;4BACT,SAAS;wBACb;wBACA,cAAc;;;;;;;;;;;;0BAGtB,8OAAC,4HAAA,CAAA,UAAM;;;;;;;AAGnB;uCAEe","debugId":null}}]
}