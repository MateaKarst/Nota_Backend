{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/app/api/auth/me/route.ts"],"sourcesContent":["// src/app/api/me/route.ts\r\nimport { createClient } from '@supabase/supabase-js'\r\nimport { cookies } from 'next/headers'\r\nimport { NextResponse } from 'next/server'\r\n\r\nexport async function GET() {\r\n    const cookieStore = await cookies()\r\n    const access_token = cookieStore.get('access_token')?.value\r\n    const refresh_token = cookieStore.get('refresh_token')?.value\r\n\r\n    if (!access_token || !refresh_token) {\r\n        return NextResponse.json({ user: null }, { status: 401 })\r\n    }\r\n\r\n    let supabase = createClient(\r\n        process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n        {\r\n            auth: {\r\n                persistSession: false,\r\n                autoRefreshToken: false,\r\n            },\r\n        }\r\n    )\r\n\r\n    // Try using access token\r\n    const {\r\n        data: { user },\r\n        error,\r\n    } = await supabase.auth.getUser(access_token)\r\n\r\n    // If access_token is invalid/expired, try refreshing\r\n    if (error || !user) {\r\n        const {\r\n            data: refreshData,\r\n            error: refreshError,\r\n        } = await supabase.auth.refreshSession({ refresh_token })\r\n\r\n        if (refreshError || !refreshData.session) {\r\n            return NextResponse.json({ user: null }, { status: 401 })\r\n        }\r\n\r\n        // Use new session\r\n        const newAccessToken = refreshData.session.access_token\r\n        const newRefreshToken = refreshData.session.refresh_token\r\n\r\n        supabase = createClient(\r\n            process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n            process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n            {\r\n                auth: {\r\n                    persistSession: false,\r\n                    autoRefreshToken: false,\r\n                },\r\n            }\r\n        )\r\n\r\n        const {\r\n            data: { user: refreshedUser },\r\n            error: userError,\r\n        } = await supabase.auth.getUser(newAccessToken)\r\n\r\n        if (userError || !refreshedUser) {\r\n            return NextResponse.json({ user: null }, { status: 401 })\r\n        }\r\n\r\n        const res = NextResponse.json({\r\n            user: {\r\n                email: refreshedUser.email,\r\n                name: refreshedUser.user_metadata.full_name,\r\n                token: newAccessToken,\r\n            },\r\n        })\r\n\r\n        // Set new tokens as cookies\r\n        res.cookies.set('access_token', newAccessToken, {\r\n            httpOnly: true,\r\n            path: '/',\r\n            sameSite: 'lax',\r\n            secure: true,\r\n            maxAge: 60 * 60 * 24 * 7,\r\n        })\r\n\r\n        res.cookies.set('refresh_token', newRefreshToken, {\r\n            httpOnly: true,\r\n            path: '/',\r\n            sameSite: 'lax',\r\n            secure: true,\r\n            maxAge: 60 * 60 * 24 * 30,\r\n        })\r\n\r\n        return res\r\n    }\r\n\r\n    // If user was valid initially\r\n    return NextResponse.json({\r\n        user: {\r\n            email: user.email,\r\n            name: user.user_metadata.full_name,\r\n            token: access_token,\r\n        },\r\n    })\r\n}\r\n"],"names":[],"mappings":"AAAA,0BAA0B;;;;AAC1B;AACA;AACA;;;;AAEO,eAAe;IAClB,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAChC,MAAM,eAAe,YAAY,GAAG,CAAC,iBAAiB;IACtD,MAAM,gBAAgB,YAAY,GAAG,CAAC,kBAAkB;IAExD,IAAI,CAAC,gBAAgB,CAAC,eAAe;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,MAAM;QAAK,GAAG;YAAE,QAAQ;QAAI;IAC3D;IAEA,IAAI,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EACtB,QAAQ,GAAG,CAAC,wBAAwB,EACpC,QAAQ,GAAG,CAAC,6BAA6B,EACzC;QACI,MAAM;YACF,gBAAgB;YAChB,kBAAkB;QACtB;IACJ;IAGJ,yBAAyB;IACzB,MAAM,EACF,MAAM,EAAE,IAAI,EAAE,EACd,KAAK,EACR,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO,CAAC;IAEhC,qDAAqD;IACrD,IAAI,SAAS,CAAC,MAAM;QAChB,MAAM,EACF,MAAM,WAAW,EACjB,OAAO,YAAY,EACtB,GAAG,MAAM,SAAS,IAAI,CAAC,cAAc,CAAC;YAAE;QAAc;QAEvD,IAAI,gBAAgB,CAAC,YAAY,OAAO,EAAE;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,MAAM;YAAK,GAAG;gBAAE,QAAQ;YAAI;QAC3D;QAEA,kBAAkB;QAClB,MAAM,iBAAiB,YAAY,OAAO,CAAC,YAAY;QACvD,MAAM,kBAAkB,YAAY,OAAO,CAAC,aAAa;QAEzD,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAClB,QAAQ,GAAG,CAAC,wBAAwB,EACpC,QAAQ,GAAG,CAAC,6BAA6B,EACzC;YACI,MAAM;gBACF,gBAAgB;gBAChB,kBAAkB;YACtB;QACJ;QAGJ,MAAM,EACF,MAAM,EAAE,MAAM,aAAa,EAAE,EAC7B,OAAO,SAAS,EACnB,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO,CAAC;QAEhC,IAAI,aAAa,CAAC,eAAe;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,MAAM;YAAK,GAAG;gBAAE,QAAQ;YAAI;QAC3D;QAEA,MAAM,MAAM,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAC1B,MAAM;gBACF,OAAO,cAAc,KAAK;gBAC1B,MAAM,cAAc,aAAa,CAAC,SAAS;gBAC3C,OAAO;YACX;QACJ;QAEA,4BAA4B;QAC5B,IAAI,OAAO,CAAC,GAAG,CAAC,gBAAgB,gBAAgB;YAC5C,UAAU;YACV,MAAM;YACN,UAAU;YACV,QAAQ;YACR,QAAQ,KAAK,KAAK,KAAK;QAC3B;QAEA,IAAI,OAAO,CAAC,GAAG,CAAC,iBAAiB,iBAAiB;YAC9C,UAAU;YACV,MAAM;YACN,UAAU;YACV,QAAQ;YACR,QAAQ,KAAK,KAAK,KAAK;QAC3B;QAEA,OAAO;IACX;IAEA,8BAA8B;IAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACrB,MAAM;YACF,OAAO,KAAK,KAAK;YACjB,MAAM,KAAK,aAAa,CAAC,SAAS;YAClC,OAAO;QACX;IACJ;AACJ","debugId":null}}]
}