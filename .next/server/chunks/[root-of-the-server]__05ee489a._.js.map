{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/lib/supabase.ts"],"sourcesContent":["// src/lib/supabase.ts\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nexport const supabase = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\n);\r\n\r\nexport const supabaseAdmin = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n"],"names":[],"mappings":"AAAA,sBAAsB;;;;;AACtB;;AAEO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD;AAK5B,MAAM,gBAAgB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,gFAEpC,QAAQ,GAAG,CAAC,yBAAyB","debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/utils/cors.ts"],"sourcesContent":["// src/utils/cors.ts\r\nimport { NextResponse } from 'next/server'\r\n\r\nconst allowedOrigins = [\r\n    // localhost browser\r\n    'http://localhost:3000',\r\n    'http://localhost:3001',\r\n    'http://localhost:3002',\r\n\r\n    // vio n mk network?\r\n    'http://192.168.1.38:3000',\r\n    'http://192.168.1.38:3001',\r\n    'http://192.168.1.38:3002',\r\n\r\n    // app sites\r\n    'https://nota-community.netlify.app',\r\n    'https://nota-backend-delta.vercel.app'\r\n]\r\n\r\nexport function handlePreflight(request: Request): NextResponse {\r\n    const origin = request.headers.get('origin') || '';\r\n    const headers: Record<string, string> = {\r\n        'Access-Control-Allow-Methods': 'GET, PATCH, POST, PUT, OPTIONS',\r\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization, x-refresh-token, x-user-id',\r\n        'Access-Control-Allow-Credentials': 'true',\r\n    };\r\n\r\n    if (allowedOrigins.includes(origin)) {\r\n        headers['Access-Control-Allow-Origin'] = origin;\r\n    }\r\n\r\n    return new NextResponse(null, {\r\n        status: 204,\r\n        headers,\r\n    });\r\n}\r\n\r\nexport function addCorsHeaders(\r\n    request: Request,\r\n    response: NextResponse\r\n): NextResponse {\r\n    const origin = request.headers.get('origin') || ''\r\n    if (allowedOrigins.includes(origin)) {\r\n        response.headers.set('Access-Control-Allow-Origin', origin)\r\n        response.headers.set('Access-Control-Allow-Credentials', 'true')\r\n    }\r\n    return response\r\n}"],"names":[],"mappings":"AAAA,oBAAoB;;;;;AACpB;;AAEA,MAAM,iBAAiB;IACnB,oBAAoB;IACpB;IACA;IACA;IAEA,oBAAoB;IACpB;IACA;IACA;IAEA,YAAY;IACZ;IACA;CACH;AAEM,SAAS,gBAAgB,OAAgB;IAC5C,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;IAChD,MAAM,UAAkC;QACpC,gCAAgC;QAChC,gCAAgC;QAChC,oCAAoC;IACxC;IAEA,IAAI,eAAe,QAAQ,CAAC,SAAS;QACjC,OAAO,CAAC,8BAA8B,GAAG;IAC7C;IAEA,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;QAC1B,QAAQ;QACR;IACJ;AACJ;AAEO,SAAS,eACZ,OAAgB,EAChB,QAAsB;IAEtB,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;IAChD,IAAI,eAAe,QAAQ,CAAC,SAAS;QACjC,SAAS,OAAO,CAAC,GAAG,CAAC,+BAA+B;QACpD,SAAS,OAAO,CAAC,GAAG,CAAC,oCAAoC;IAC7D;IACA,OAAO;AACX","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/app/api/user/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { supabaseAdmin } from \"@/lib/supabase\";\r\nimport { addCorsHeaders, handlePreflight } from \"@/utils/cors\";\r\n\r\nexport async function OPTIONS(request: NextRequest) {\r\n    return handlePreflight(request);\r\n}\r\n\r\nexport async function GET(\r\n    request: NextRequest,\r\n    { params }: { params: Promise<{ id: string }> }\r\n) {\r\n    const user_id = (await params).id;\r\n\r\n    if (!user_id) {\r\n        const res = NextResponse.json({ message: \"Missing user ID\" }, { status: 400 });\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    try {\r\n        // 1. Get user info from Supabase Admin API\r\n        const { data: authUser, error: authError } = await supabaseAdmin.auth.admin.getUserById(user_id);\r\n\r\n        if (authError) {\r\n            console.error(\"Error fetching auth user:\", authError);\r\n            const res = NextResponse.json({ message: \"Error fetching auth user\", error: authError.message }, { status: 500 });\r\n            return addCorsHeaders(request, res);\r\n        }\r\n\r\n        if (!authUser) {\r\n            const res = NextResponse.json({ message: \"Auth user not found\" }, { status: 404 });\r\n            return addCorsHeaders(request, res);\r\n        }\r\n\r\n        // 2. Get user details from user_details table\r\n        const { data: userDetails, error: detailsError } = await supabaseAdmin\r\n            .from(\"user_details\")\r\n            .select(\"*\")\r\n            .eq(\"id\", user_id)\r\n            .single();\r\n\r\n        if (detailsError) {\r\n            console.error(\"Error fetching user details:\", detailsError);\r\n            const res = NextResponse.json({ message: \"Error fetching user details\", error: detailsError.message }, { status: 500 });\r\n            return addCorsHeaders(request, res);\r\n        }\r\n\r\n        // 3. Combine the results\r\n        const combinedUser = {\r\n            user: { ...authUser },\r\n            user_details: { ...userDetails },\r\n        };\r\n\r\n        const res = NextResponse.json(combinedUser, { status: 200 });\r\n        return addCorsHeaders(request, res);\r\n\r\n    } catch (err) {\r\n        console.error(\"Unexpected error:\", err);\r\n        const res = NextResponse.json({ message: \"Unexpected error\" }, { status: 500 });\r\n        return addCorsHeaders(request, res);\r\n    }\r\n}\r\n\r\nexport async function PATCH(\r\n    request: Request,\r\n    { params }: { params: Promise<{ id: string }> }\r\n) {\r\n    const user_id = (await params).id;\r\n\r\n    if (!user_id) {\r\n        const res = NextResponse.json({ message: \"Missing user ID\" }, { status: 400 });\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    try {\r\n        const body = await request.json();\r\n        const { name, avatar, profile_description } = body;\r\n\r\n        if (!name && !avatar && !profile_description) {\r\n            const res = NextResponse.json({ message: \"No valid fields to update\" }, { status: 400 });\r\n            return addCorsHeaders(request, res);\r\n        }\r\n\r\n        let avatar_url = null;\r\n\r\n        if (avatar) {\r\n            try {\r\n                console.log(\"üñºÔ∏è Uploading avatar image to Supabase Storage...\");\r\n\r\n                const base64Data = avatar.includes(\",\") ? avatar.split(\",\")[1] : avatar;\r\n                const buffer = Buffer.from(base64Data, \"base64\");\r\n\r\n                let contentType = \"image/png\";\r\n                if (avatar.startsWith(\"data:image/x-icon\")) contentType = \"image/x-icon\";\r\n                else if (avatar.startsWith(\"data:image/jpeg\")) contentType = \"image/jpeg\";\r\n                else if (avatar.startsWith(\"data:image/gif\")) contentType = \"image/gif\";\r\n\r\n                const filePath = `avatars/${user_id}-${Date.now()}.png`;\r\n\r\n                const { error: uploadError } = await supabaseAdmin.storage\r\n                    .from(\"avatars\")\r\n                    .upload(filePath, buffer, {\r\n                        contentType,\r\n                        upsert: true,\r\n                    });\r\n\r\n                if (uploadError) throw new Error(typeof uploadError === \"string\" ? uploadError : JSON.stringify(uploadError));\r\n\r\n                const { data: publicUrlData } = supabaseAdmin.storage\r\n                    .from(\"avatars\")\r\n                    .getPublicUrl(filePath);\r\n\r\n                avatar_url = publicUrlData.publicUrl;\r\n                console.log(\"‚úÖ Avatar uploaded successfully:\", avatar_url);\r\n\r\n            } catch (uploadError: unknown) {\r\n                // Narrow error type to string message\r\n                let message = \"Unknown error\";\r\n                if (uploadError instanceof Error) message = uploadError.message;\r\n                else if (typeof uploadError === \"string\") message = uploadError;\r\n\r\n                console.error(\"‚ùå Failed to upload avatar:\", message);\r\n                const res = NextResponse.json(\r\n                    { message: \"Failed to upload avatar.\", error: message },\r\n                    { status: 500 }\r\n                );\r\n                return addCorsHeaders(request, res);\r\n            }\r\n        }\r\n\r\n        const updateFields: { [key: string]: string | null | undefined } = {};\r\n        if (name !== undefined) updateFields.name = name;\r\n        if (profile_description !== undefined) updateFields.profile_description = profile_description;\r\n        if (avatar_url) updateFields.avatar = avatar_url;\r\n\r\n        console.log(\"Updating user details for:\", user_id, updateFields);\r\n\r\n        const { data, error } = await supabaseAdmin\r\n            .from(\"user_details\")\r\n            .update(updateFields)\r\n            .eq(\"id\", user_id)\r\n            .single();\r\n\r\n        if (error) {\r\n            console.error(\"‚ùå Error updating user details:\", error.message ?? error);\r\n            const res = NextResponse.json(\r\n                { message: \"Error updating user details\", error: error.message ?? error },\r\n                { status: 500 }\r\n            );\r\n            return addCorsHeaders(request, res);\r\n        }\r\n\r\n        const res = NextResponse.json(\r\n            { message: \"User updated successfully\", user_details: data },\r\n            { status: 200 }\r\n        );\r\n        return addCorsHeaders(request, res);\r\n\r\n    } catch (err: unknown) {\r\n        // Narrow err type here too\r\n        let message = \"Unknown error\";\r\n        if (err instanceof Error) message = err.message;\r\n        else if (typeof err === \"string\") message = err;\r\n\r\n        console.error(\"Unexpected error:\", message);\r\n        const res = NextResponse.json({ message: \"Unexpected error\", error: message }, { status: 500 });\r\n        return addCorsHeaders(request, res);\r\n    }\r\n}\r\n\r\n"],"names":[],"mappings":"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","debugId":null}}]
}