module.exports = {

"[project]/node_modules/music-metadata/lib/wavpack/WavPackToken.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BlockHeaderToken": (()=>BlockHeaderToken),
    "MetadataIdToken": (()=>MetadataIdToken)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/token-types/lib/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$FourCC$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/FourCC.js [app-route] (ecmascript)");
;
;
const SampleRates = [
    6000,
    8000,
    9600,
    11025,
    12000,
    16000,
    22050,
    24000,
    32000,
    44100,
    48000,
    64000,
    88200,
    96000,
    192000,
    -1
];
const BlockHeaderToken = {
    len: 32,
    get: (buf, off)=>{
        const flags = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 24);
        const res = {
            // should equal 'wvpk'
            BlockID: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$FourCC$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["FourCcToken"].get(buf, off),
            //  0x402 to 0x410 are valid for decode
            blockSize: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 4),
            //  0x402 (1026) to 0x410 are valid for decode
            version: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT16_LE"].get(buf, off + 8),
            //  40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)
            totalSamples: /* replace with bigint? (Token.UINT8.get(buf, off + 11) << 32) + */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 12),
            // 40-bit block_index
            blockIndex: /* replace with bigint? (Token.UINT8.get(buf, off + 10) << 32) + */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 16),
            // 40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)
            blockSamples: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 20),
            // various flags for id and decoding
            flags: {
                bitsPerSample: (1 + getBitAllignedNumber(flags, 0, 2)) * 8,
                isMono: isBitSet(flags, 2),
                isHybrid: isBitSet(flags, 3),
                isJointStereo: isBitSet(flags, 4),
                crossChannel: isBitSet(flags, 5),
                hybridNoiseShaping: isBitSet(flags, 6),
                floatingPoint: isBitSet(flags, 7),
                samplingRate: SampleRates[getBitAllignedNumber(flags, 23, 4)],
                isDSD: isBitSet(flags, 31)
            },
            // crc for actual decoded data
            crc: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Uint8ArrayType"](4).get(buf, off + 28)
        };
        if (res.flags.isDSD) {
            res.totalSamples *= 8;
        }
        return res;
    }
};
const MetadataIdToken = {
    len: 1,
    get: (buf, off)=>{
        return {
            functionId: getBitAllignedNumber(buf[off], 0, 6),
            isOptional: isBitSet(buf[off], 5),
            isOddSize: isBitSet(buf[off], 6),
            largeBlock: isBitSet(buf[off], 7)
        };
    }
};
function isBitSet(flags, bitOffset) {
    return getBitAllignedNumber(flags, bitOffset, 1) === 1;
}
function getBitAllignedNumber(flags, bitOffset, len) {
    return flags >>> bitOffset & 0xffffffff >>> 32 - len;
} //# sourceMappingURL=WavPackToken.js.map
}}),
"[project]/node_modules/music-metadata/lib/wavpack/WavPackParser.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "WavPackContentError": (()=>WavPackContentError),
    "WavPackParser": (()=>WavPackParser)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/token-types/lib/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Parser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/apev2/APEv2Parser.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$FourCC$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/FourCC.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$BasicParser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/BasicParser.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$wavpack$2f$WavPackToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/wavpack/WavPackToken.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/debug/src/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$extras$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uint8array-extras/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/ParseError.js [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
const debug = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])('music-metadata:parser:WavPack');
class WavPackContentError extends (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["makeUnexpectedFileContentError"])('WavPack') {
}
class WavPackParser extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$BasicParser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BasicParser"] {
    constructor(){
        super(...arguments);
        this.audioDataSize = 0;
    }
    async parse() {
        this.audioDataSize = 0;
        // First parse all WavPack blocks
        await this.parseWavPackBlocks();
        // try to parse APEv2 header
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Parser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["APEv2Parser"].tryParseApeHeader(this.metadata, this.tokenizer, this.options);
    }
    async parseWavPackBlocks() {
        do {
            const blockId = await this.tokenizer.peekToken(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$FourCC$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["FourCcToken"]);
            if (blockId !== 'wvpk') break;
            const header = await this.tokenizer.readToken(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$wavpack$2f$WavPackToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BlockHeaderToken"]);
            if (header.BlockID !== 'wvpk') throw new WavPackContentError('Invalid WavPack Block-ID');
            debug(`WavPack header blockIndex=${header.blockIndex}, len=${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$wavpack$2f$WavPackToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BlockHeaderToken"].len}`);
            if (header.blockIndex === 0 && !this.metadata.format.container) {
                this.metadata.setFormat('container', 'WavPack');
                this.metadata.setFormat('lossless', !header.flags.isHybrid);
                // tagTypes: this.type,
                this.metadata.setFormat('bitsPerSample', header.flags.bitsPerSample);
                if (!header.flags.isDSD) {
                    // In case isDSD, these values will ne set in ID_DSD_BLOCK
                    this.metadata.setFormat('sampleRate', header.flags.samplingRate);
                    this.metadata.setFormat('duration', header.totalSamples / header.flags.samplingRate);
                }
                this.metadata.setFormat('numberOfChannels', header.flags.isMono ? 1 : 2);
                this.metadata.setFormat('numberOfSamples', header.totalSamples);
                this.metadata.setFormat('codec', header.flags.isDSD ? 'DSD' : 'PCM');
            }
            const ignoreBytes = header.blockSize - (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$wavpack$2f$WavPackToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BlockHeaderToken"].len - 8);
            await (header.blockIndex === 0 ? this.parseMetadataSubBlock(header, ignoreBytes) : this.tokenizer.ignore(ignoreBytes));
            if (header.blockSamples > 0) {
                this.audioDataSize += header.blockSize; // Count audio data for bit-rate calculation
            }
        }while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$wavpack$2f$WavPackToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BlockHeaderToken"].len)
        if (this.metadata.format.duration) {
            this.metadata.setFormat('bitrate', this.audioDataSize * 8 / this.metadata.format.duration);
        }
    }
    /**
     * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks
     * @param header Header
     * @param remainingLength Remaining length
     */ async parseMetadataSubBlock(header, remainingLength) {
        let remaining = remainingLength;
        while(remaining > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$wavpack$2f$WavPackToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MetadataIdToken"].len){
            const id = await this.tokenizer.readToken(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$wavpack$2f$WavPackToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MetadataIdToken"]);
            const dataSizeInWords = await this.tokenizer.readNumber(id.largeBlock ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT24_LE"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT8"]);
            const data = new Uint8Array(dataSizeInWords * 2 - (id.isOddSize ? 1 : 0));
            await this.tokenizer.readBuffer(data);
            debug(`Metadata Sub-Blocks functionId=0x${id.functionId.toString(16)}, id.largeBlock=${id.largeBlock},data-size=${data.length}`);
            switch(id.functionId){
                case 0x0:
                    break;
                case 0xe:
                    {
                        debug('ID_DSD_BLOCK');
                        // https://github.com/dbry/WavPack/issues/71#issuecomment-483094813
                        const mp = 1 << __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT8"].get(data, 0);
                        const samplingRate = header.flags.samplingRate * mp * 8; // ToDo: second factor should be read from DSD-metadata block https://github.com/dbry/WavPack/issues/71#issuecomment-483094813
                        if (!header.flags.isDSD) throw new WavPackContentError('Only expect DSD block if DSD-flag is set');
                        this.metadata.setFormat('sampleRate', samplingRate);
                        this.metadata.setFormat('duration', header.totalSamples / samplingRate);
                        break;
                    }
                case 0x24:
                    debug('ID_ALT_TRAILER: trailer for non-wav files');
                    break;
                case 0x26:
                    this.metadata.setFormat('audioMD5', data);
                    break;
                case 0x2f:
                    debug(`ID_BLOCK_CHECKSUM: checksum=${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$extras$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["uint8ArrayToHex"])(data)}`);
                    break;
                default:
                    debug(`Ignore unsupported meta-sub-block-id functionId=0x${id.functionId.toString(16)}`);
                    break;
            }
            remaining -= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$wavpack$2f$WavPackToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MetadataIdToken"].len + (id.largeBlock ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT24_LE"].len : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT8"].len) + dataSizeInWords * 2;
            debug(`remainingLength=${remaining}`);
            if (id.isOddSize) this.tokenizer.ignore(1);
        }
        if (remaining !== 0) throw new WavPackContentError('metadata-sub-block should fit it remaining length');
    }
} //# sourceMappingURL=WavPackParser.js.map
}}),

};

//# sourceMappingURL=node_modules_music-metadata_lib_wavpack_c1cab8f9._.js.map