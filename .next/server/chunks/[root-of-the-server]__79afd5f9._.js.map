{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/lib/supabase.ts"],"sourcesContent":["// src/lib/supabase.ts\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nexport const supabase = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\n);\r\n\r\nexport const supabaseAdmin = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n"],"names":[],"mappings":"AAAA,sBAAsB;;;;;AACtB;;AAEO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD;AAK5B,MAAM,gBAAgB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,gFAEpC,QAAQ,GAAG,CAAC,yBAAyB","debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/utils/cors.ts"],"sourcesContent":["// src/utils/cors.ts\r\nimport { NextResponse } from 'next/server'\r\n\r\nconst allowedOrigins = [\r\n    // localhost browser\r\n    'http://localhost:3000',\r\n    'http://localhost:3001',\r\n    'http://localhost:3002',\r\n\r\n    // vio n mk network?\r\n    'http://192.168.1.38:3000',\r\n    'http://192.168.1.38:3001',\r\n    'http://192.168.1.38:3002',\r\n\r\n    // app sites\r\n    'https://nota-community.netlify.app',\r\n    'https://nota-backend-delta.vercel.app'\r\n]\r\n\r\nexport function handlePreflight(request: Request): NextResponse {\r\n    const origin = request.headers.get('origin') || '';\r\n    const headers: Record<string, string> = {\r\n        'Access-Control-Allow-Methods': 'GET, PATCH, POST, PUT, OPTIONS',\r\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization, x-refresh-token, x-user-id',\r\n        'Access-Control-Allow-Credentials': 'true',\r\n    };\r\n\r\n    if (allowedOrigins.includes(origin)) {\r\n        headers['Access-Control-Allow-Origin'] = origin;\r\n    }\r\n\r\n    return new NextResponse(null, {\r\n        status: 204,\r\n        headers,\r\n    });\r\n}\r\n\r\nexport function addCorsHeaders(\r\n    request: Request,\r\n    response: NextResponse\r\n): NextResponse {\r\n    const origin = request.headers.get('origin') || ''\r\n    if (allowedOrigins.includes(origin)) {\r\n        response.headers.set('Access-Control-Allow-Origin', origin)\r\n        response.headers.set('Access-Control-Allow-Credentials', 'true')\r\n    }\r\n    return response\r\n}"],"names":[],"mappings":"AAAA,oBAAoB;;;;;AACpB;;AAEA,MAAM,iBAAiB;IACnB,oBAAoB;IACpB;IACA;IACA;IAEA,oBAAoB;IACpB;IACA;IACA;IAEA,YAAY;IACZ;IACA;CACH;AAEM,SAAS,gBAAgB,OAAgB;IAC5C,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;IAChD,MAAM,UAAkC;QACpC,gCAAgC;QAChC,gCAAgC;QAChC,oCAAoC;IACxC;IAEA,IAAI,eAAe,QAAQ,CAAC,SAAS;QACjC,OAAO,CAAC,8BAA8B,GAAG;IAC7C;IAEA,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;QAC1B,QAAQ;QACR;IACJ;AACJ;AAEO,SAAS,eACZ,OAAgB,EAChB,QAAsB;IAEtB,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;IAChD,IAAI,eAAe,QAAQ,CAAC,SAAS;QACjC,SAAS,OAAO,CAAC,GAAG,CAAC,+BAA+B;QACpD,SAAS,OAAO,CAAC,GAAG,CAAC,oCAAoC;IAC7D;IACA,OAAO;AACX","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/app/api/connections/%5Bid%5D/route.ts"],"sourcesContent":["// src/app/api/connections/route.ts\r\nimport { NextResponse, NextRequest } from \"next/server\";\r\nimport { supabaseAdmin } from \"@/lib/supabase\";\r\nimport { addCorsHeaders, handlePreflight } from \"@/utils/cors\";\r\n\r\nexport async function OPTIONS(request: NextRequest) {\r\n    return handlePreflight(request);\r\n}\r\n\r\nexport async function POST(\r\n    request: NextRequest,\r\n    { params }: { params: Promise<{ id: string }> }\r\n) {\r\n    const user_id = (await params).id;\r\n    const body = await request.json();\r\n    const { id, connection_id } = body;\r\n\r\n    if (!connection_id || !user_id) {\r\n        const res = NextResponse.json(\r\n            { message: \"Missing connection_id or user_id\" },\r\n            { status: 400 }\r\n        );\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    const values = { user_id, connection_id };\r\n\r\n    const { data: existingConnection, error: existingError } = await supabaseAdmin\r\n        .from(\"connections\")\r\n        .select(\"id\")\r\n        .eq(\"user_id\", user_id)\r\n        .eq(\"connection_id\", connection_id)\r\n        .maybeSingle();\r\n\r\n    if (existingError) {\r\n        const res = NextResponse.json(\r\n            { message: \"Error checking existing connection\", error: existingError.message },\r\n            { status: 500 }\r\n        );\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    if (existingConnection && !id) {\r\n        const res = NextResponse.json({ message: \"Connection already exists\" }, { status: 409 });\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    const { data, error } = id\r\n        ? await supabaseAdmin\r\n            .from(\"connections\")\r\n            .update(values)\r\n            .eq(\"id\", id)\r\n            .select()\r\n            .single()\r\n        : await supabaseAdmin\r\n            .from(\"connections\")\r\n            .insert([values])\r\n            .select()\r\n            .single();\r\n\r\n    if (error) {\r\n        const res = NextResponse.json(\r\n            { message: \"Error saving connection\", error: error.message },\r\n            { status: 500 }\r\n        );\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    const res = NextResponse.json(data, { status: 200 });\r\n    return addCorsHeaders(request, res);\r\n}\r\n\r\nexport async function GET(\r\n    request: NextRequest,\r\n    { params }: { params: Promise<{ id: string }> }\r\n) {\r\n    const user_id = (await params).id;\r\n\r\n    if (!user_id) {\r\n        const res = NextResponse.json({ message: \"Missing user_id\" }, { status: 400 });\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    const { data, error } = await supabaseAdmin\r\n        .from(\"connections\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", user_id);\r\n\r\n    if (error) {\r\n        const res = NextResponse.json(\r\n            { message: \"Error fetching connections\", error: error.message },\r\n            { status: 500 }\r\n        );\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    const res = NextResponse.json(data, { status: 200 });\r\n    return addCorsHeaders(request, res);\r\n}\r\n\r\nexport async function DELETE(\r\n    request: NextRequest,\r\n    { params }: { params: Promise<{ id: string }> }\r\n) {\r\n    const id = (await params).id;\r\n\r\n    if (!id) {\r\n        const res = NextResponse.json({ message: \"Missing connection id\" }, { status: 400 });\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    // Check if connection exists first\r\n    const { data: existingConnection, error: fetchError } = await supabaseAdmin\r\n        .from(\"connections\")\r\n        .select(\"id\")\r\n        .eq(\"id\", id)\r\n        .single();\r\n\r\n    if (fetchError) {\r\n        const res = NextResponse.json(\r\n            { message: \"Error checking connection existence\", error: fetchError.message },\r\n            { status: 500 }\r\n        );\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    if (!existingConnection) {\r\n        const res = NextResponse.json({ message: \"Connection not found\" }, { status: 404 });\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    // Proceed to delete\r\n    const { error: deleteError } = await supabaseAdmin\r\n        .from(\"connections\")\r\n        .delete()\r\n        .eq(\"id\", id);\r\n\r\n    if (deleteError) {\r\n        const res = NextResponse.json(\r\n            { message: \"Error deleting connection\", error: deleteError.message },\r\n            { status: 500 }\r\n        );\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    const res = NextResponse.json({ message: \"Connection deleted successfully\" }, { status: 200 });\r\n    return addCorsHeaders(request, res);\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}