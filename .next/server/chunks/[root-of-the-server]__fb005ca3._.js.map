{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/utils/cors.ts"],"sourcesContent":["// src/utils/cors.ts\r\nimport { NextResponse } from 'next/server'\r\n\r\nconst allowedOrigins = [\r\n    // localhost browser\r\n    'http://localhost:3000',\r\n    'http://localhost:3001',\r\n    'http://localhost:3002',\r\n\r\n    // vio n mk network?\r\n    'http://192.168.1.38:3000',\r\n    'http://192.168.1.38:3001',\r\n    'http://192.168.1.38:3002',\r\n\r\n    // app sites\r\n    'https://nota-community.netlify.app',\r\n    'https://nota-backend-delta.vercel.app'\r\n]\r\n\r\nexport function handlePreflight(request: Request): NextResponse {\r\n    const origin = request.headers.get('origin') || '';\r\n    const headers: Record<string, string> = {\r\n        'Access-Control-Allow-Methods': 'GET, PATCH, POST, PUT, OPTIONS',\r\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization, x-refresh-token, x-user-id',\r\n        'Access-Control-Allow-Credentials': 'true',\r\n    };\r\n\r\n    if (allowedOrigins.includes(origin)) {\r\n        headers['Access-Control-Allow-Origin'] = origin;\r\n    }\r\n\r\n    return new NextResponse(null, {\r\n        status: 204,\r\n        headers,\r\n    });\r\n}\r\n\r\nexport function addCorsHeaders(\r\n    request: Request,\r\n    response: NextResponse\r\n): NextResponse {\r\n    const origin = request.headers.get('origin') || ''\r\n    if (allowedOrigins.includes(origin)) {\r\n        response.headers.set('Access-Control-Allow-Origin', origin)\r\n        response.headers.set('Access-Control-Allow-Credentials', 'true')\r\n    }\r\n    return response\r\n}"],"names":[],"mappings":"AAAA,oBAAoB;;;;;AACpB;;AAEA,MAAM,iBAAiB;IACnB,oBAAoB;IACpB;IACA;IACA;IAEA,oBAAoB;IACpB;IACA;IACA;IAEA,YAAY;IACZ;IACA;CACH;AAEM,SAAS,gBAAgB,OAAgB;IAC5C,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;IAChD,MAAM,UAAkC;QACpC,gCAAgC;QAChC,gCAAgC;QAChC,oCAAoC;IACxC;IAEA,IAAI,eAAe,QAAQ,CAAC,SAAS;QACjC,OAAO,CAAC,8BAA8B,GAAG;IAC7C;IAEA,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;QAC1B,QAAQ;QACR;IACJ;AACJ;AAEO,SAAS,eACZ,OAAgB,EAChB,QAAsB;IAEtB,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;IAChD,IAAI,eAAe,QAAQ,CAAC,SAAS;QACjC,SAAS,OAAO,CAAC,GAAG,CAAC,+BAA+B;QACpD,SAAS,OAAO,CAAC,GAAG,CAAC,oCAAoC;IAC7D;IACA,OAAO;AACX","debugId":null}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/app/api/auth/me/route.ts"],"sourcesContent":["// src/app/api/me/route.ts\r\nimport { createClient } from '@supabase/supabase-js'\r\nimport { cookies } from 'next/headers'\r\nimport { NextResponse } from 'next/server'\r\nimport { addCorsHeaders, handlePreflight } from '@/utils/cors'\r\n// const isProduction = process.env.NODE_ENV === \"production\";\r\nconst isProduction = false; \r\nexport async function OPTIONS(request: Request) {\r\n    return handlePreflight(request)\r\n}\r\n\r\nexport async function GET(request: Request) {\r\n    // 1. Try to get tokens from cookies\r\n    const cookieStore = await cookies()\r\n    let access_token = cookieStore.get('access_token')?.value\r\n    let refresh_token = cookieStore.get('refresh_token')?.value\r\n\r\n    // 2. If no tokens in cookies, try to get from headers\r\n    if (!access_token || !refresh_token) {\r\n        const authHeader = request.headers.get('Authorization')\r\n        if (authHeader && authHeader.startsWith('Bearer ')) {\r\n            access_token = authHeader.substring('Bearer '.length)\r\n        }\r\n        const refreshHeader = request.headers.get('x-refresh-token')\r\n        if (refreshHeader) {\r\n            refresh_token = refreshHeader\r\n        }\r\n    }\r\n\r\n    // If still no tokens, return user null (allow no token request)\r\n    if (!access_token || !refresh_token) {\r\n        // This allows /me without token (e.g. admin panel) returning null user\r\n        const res = NextResponse.json({ user: null }, { status: 200 })\r\n        return addCorsHeaders(request, res)\r\n    }\r\n\r\n    // Create Supabase client\r\n    let supabase = createClient(\r\n        process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n        {\r\n            auth: {\r\n                persistSession: false,\r\n                autoRefreshToken: false,\r\n            },\r\n        }\r\n    )\r\n\r\n    // Try to get user with access token\r\n    const {\r\n        data: { user },\r\n        error,\r\n    } = await supabase.auth.getUser(access_token)\r\n\r\n    // If token invalid or no user, try refresh\r\n    if (error || !user) {\r\n        const {\r\n            data: refreshData,\r\n            error: refreshError,\r\n        } = await supabase.auth.refreshSession({ refresh_token })\r\n\r\n        if (refreshError || !refreshData.session) {\r\n            // Refresh failed, return user null (or 401 if you want strict)\r\n            const res = NextResponse.json({ user: null }, { status: 200 })\r\n            return addCorsHeaders(request, res)\r\n        }\r\n\r\n        const newAccessToken = refreshData.session.access_token\r\n        const newRefreshToken = refreshData.session.refresh_token\r\n\r\n        // Recreate supabase client with new access token\r\n        supabase = createClient(\r\n            process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n            process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n            {\r\n                auth: {\r\n                    persistSession: false,\r\n                    autoRefreshToken: false,\r\n                },\r\n            }\r\n        )\r\n\r\n        const {\r\n            data: { user: refreshedUser },\r\n            error: userError,\r\n        } = await supabase.auth.getUser(newAccessToken)\r\n\r\n        if (userError || !refreshedUser) {\r\n            const res = NextResponse.json({ user: null }, { status: 200 })\r\n            return addCorsHeaders(request, res)\r\n        }\r\n\r\n        // Set refreshed tokens as httpOnly cookies (always)\r\n        const res = NextResponse.json({\r\n            user: {\r\n                email: refreshedUser.email,\r\n                name: refreshedUser.user_metadata?.full_name || '',\r\n            },\r\n        })\r\n\r\n        res.cookies.set('access_token', newAccessToken, {\r\n            httpOnly: true,\r\n            sameSite: isProduction ? 'none' : 'lax', // use 'none' only in production on https\r\n            secure: isProduction,                   // true in prod (https), false in dev (http)\r\n            path: '/',\r\n            maxAge: 60 * 60 * 24 * 7,\r\n        })\r\n\r\n        res.cookies.set('refresh_token', newRefreshToken, {\r\n            httpOnly: true,\r\n            sameSite: isProduction ? 'none' : 'lax',\r\n            secure: isProduction,\r\n            path: '/',\r\n            maxAge: 60 * 60 * 24 * 30,\r\n        })\r\n\r\n        return addCorsHeaders(request, res)\r\n    }\r\n\r\n    // User valid on first try, return user info\r\n    const res = NextResponse.json({\r\n        user: {\r\n            id: user?.id,\r\n            email: user.email,\r\n            name: user.user_metadata?.full_name || '',\r\n            access_token: access_token,\r\n            refresh_token: refresh_token,\r\n        },\r\n    })\r\n\r\n    return addCorsHeaders(request, res)\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}