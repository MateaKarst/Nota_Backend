module.exports = {

"[project]/node_modules/music-metadata/lib/matroska/types.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "TargetType": (()=>TargetType),
    "TrackType": (()=>TrackType),
    "TrackTypeValueToKeyMap": (()=>TrackTypeValueToKeyMap)
});
const TargetType = {
    10: 'shot',
    20: 'scene',
    30: 'track',
    40: 'part',
    50: 'album',
    60: 'edition',
    70: 'collection'
};
const TrackType = {
    video: 0x01,
    audio: 0x02,
    complex: 0x03,
    logo: 0x04,
    subtitle: 0x11,
    button: 0x12,
    control: 0x20
};
const TrackTypeValueToKeyMap = {
    [TrackType.video]: 'video',
    [TrackType.audio]: 'audio',
    [TrackType.complex]: 'complex',
    [TrackType.logo]: 'logo',
    [TrackType.subtitle]: 'subtitle',
    [TrackType.button]: 'button',
    [TrackType.control]: 'control'
}; //# sourceMappingURL=types.js.map
}}),
"[project]/node_modules/music-metadata/lib/common/GenericTagTypes.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "commonTagsKeys": (()=>commonTagsKeys),
    "isSingleton": (()=>isSingleton),
    "isUnique": (()=>isUnique)
});
const defaultTagInfo = {
    multiple: false
};
const commonTags = {
    year: defaultTagInfo,
    track: defaultTagInfo,
    disk: defaultTagInfo,
    title: defaultTagInfo,
    artist: defaultTagInfo,
    artists: {
        multiple: true,
        unique: true
    },
    albumartist: defaultTagInfo,
    album: defaultTagInfo,
    date: defaultTagInfo,
    originaldate: defaultTagInfo,
    originalyear: defaultTagInfo,
    releasedate: defaultTagInfo,
    comment: {
        multiple: true,
        unique: false
    },
    genre: {
        multiple: true,
        unique: true
    },
    picture: {
        multiple: true,
        unique: true
    },
    composer: {
        multiple: true,
        unique: true
    },
    lyrics: {
        multiple: true,
        unique: false
    },
    albumsort: {
        multiple: false,
        unique: true
    },
    titlesort: {
        multiple: false,
        unique: true
    },
    work: {
        multiple: false,
        unique: true
    },
    artistsort: {
        multiple: false,
        unique: true
    },
    albumartistsort: {
        multiple: false,
        unique: true
    },
    composersort: {
        multiple: false,
        unique: true
    },
    lyricist: {
        multiple: true,
        unique: true
    },
    writer: {
        multiple: true,
        unique: true
    },
    conductor: {
        multiple: true,
        unique: true
    },
    remixer: {
        multiple: true,
        unique: true
    },
    arranger: {
        multiple: true,
        unique: true
    },
    engineer: {
        multiple: true,
        unique: true
    },
    producer: {
        multiple: true,
        unique: true
    },
    technician: {
        multiple: true,
        unique: true
    },
    djmixer: {
        multiple: true,
        unique: true
    },
    mixer: {
        multiple: true,
        unique: true
    },
    label: {
        multiple: true,
        unique: true
    },
    grouping: defaultTagInfo,
    subtitle: {
        multiple: true
    },
    discsubtitle: defaultTagInfo,
    totaltracks: defaultTagInfo,
    totaldiscs: defaultTagInfo,
    compilation: defaultTagInfo,
    rating: {
        multiple: true
    },
    bpm: defaultTagInfo,
    mood: defaultTagInfo,
    media: defaultTagInfo,
    catalognumber: {
        multiple: true,
        unique: true
    },
    tvShow: defaultTagInfo,
    tvShowSort: defaultTagInfo,
    tvSeason: defaultTagInfo,
    tvEpisode: defaultTagInfo,
    tvEpisodeId: defaultTagInfo,
    tvNetwork: defaultTagInfo,
    podcast: defaultTagInfo,
    podcasturl: defaultTagInfo,
    releasestatus: defaultTagInfo,
    releasetype: {
        multiple: true
    },
    releasecountry: defaultTagInfo,
    script: defaultTagInfo,
    language: defaultTagInfo,
    copyright: defaultTagInfo,
    license: defaultTagInfo,
    encodedby: defaultTagInfo,
    encodersettings: defaultTagInfo,
    gapless: defaultTagInfo,
    barcode: defaultTagInfo,
    isrc: {
        multiple: true
    },
    asin: defaultTagInfo,
    musicbrainz_recordingid: defaultTagInfo,
    musicbrainz_trackid: defaultTagInfo,
    musicbrainz_albumid: defaultTagInfo,
    musicbrainz_artistid: {
        multiple: true
    },
    musicbrainz_albumartistid: {
        multiple: true
    },
    musicbrainz_releasegroupid: defaultTagInfo,
    musicbrainz_workid: defaultTagInfo,
    musicbrainz_trmid: defaultTagInfo,
    musicbrainz_discid: defaultTagInfo,
    acoustid_id: defaultTagInfo,
    acoustid_fingerprint: defaultTagInfo,
    musicip_puid: defaultTagInfo,
    musicip_fingerprint: defaultTagInfo,
    website: defaultTagInfo,
    'performer:instrument': {
        multiple: true,
        unique: true
    },
    averageLevel: defaultTagInfo,
    peakLevel: defaultTagInfo,
    notes: {
        multiple: true,
        unique: false
    },
    key: defaultTagInfo,
    originalalbum: defaultTagInfo,
    originalartist: defaultTagInfo,
    discogs_artist_id: {
        multiple: true,
        unique: true
    },
    discogs_release_id: defaultTagInfo,
    discogs_label_id: defaultTagInfo,
    discogs_master_release_id: defaultTagInfo,
    discogs_votes: defaultTagInfo,
    discogs_rating: defaultTagInfo,
    replaygain_track_peak: defaultTagInfo,
    replaygain_track_gain: defaultTagInfo,
    replaygain_album_peak: defaultTagInfo,
    replaygain_album_gain: defaultTagInfo,
    replaygain_track_minmax: defaultTagInfo,
    replaygain_album_minmax: defaultTagInfo,
    replaygain_undo: defaultTagInfo,
    description: {
        multiple: true
    },
    longDescription: defaultTagInfo,
    category: {
        multiple: true
    },
    hdVideo: defaultTagInfo,
    keywords: {
        multiple: true
    },
    movement: defaultTagInfo,
    movementIndex: defaultTagInfo,
    movementTotal: defaultTagInfo,
    podcastId: defaultTagInfo,
    showMovement: defaultTagInfo,
    stik: defaultTagInfo
};
const commonTagsKeys = /* @__PURE__ */ Object.keys(commonTags);
function isSingleton(alias) {
    return commonTags[alias] && !commonTags[alias].multiple;
}
function isUnique(alias) {
    return !commonTags[alias].multiple || commonTags[alias].unique || false;
} //# sourceMappingURL=GenericTagTypes.js.map
}}),
"[project]/node_modules/music-metadata/lib/common/GenericTagMapper.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CommonTagMapper": (()=>CommonTagMapper)
});
class CommonTagMapper {
    static toIntOrNull(str) {
        const cleaned = Number.parseInt(str, 10);
        return Number.isNaN(cleaned) ? null : cleaned;
    }
    // TODO: a string of 1of1 would fail to be converted
    // converts 1/10 to no : 1, of : 10
    // or 1 to no : 1, of : 0
    static normalizeTrack(origVal) {
        const split = origVal.toString().split('/');
        return {
            no: Number.parseInt(split[0], 10) || null,
            of: Number.parseInt(split[1], 10) || null
        };
    }
    constructor(tagTypes, tagMap){
        this.tagTypes = tagTypes;
        this.tagMap = tagMap;
    }
    /**
     * Process and set common tags
     * write common tags to
     * @param tag Native tag
     * @param warnings Register warnings
     * @return common name
     */ mapGenericTag(tag, warnings) {
        tag = {
            id: tag.id,
            value: tag.value
        }; // clone object
        this.postMap(tag, warnings);
        // Convert native tag event to generic 'alias' tag
        const id = this.getCommonName(tag.id);
        return id ? {
            id,
            value: tag.value
        } : null;
    }
    /**
     * Convert native tag key to common tag key
     * @param tag Native header tag
     * @return common tag name (alias)
     */ getCommonName(tag) {
        return this.tagMap[tag];
    }
    /**
     * Handle post mapping exceptions / correction
     * @param tag Tag e.g. {"Â©alb", "Buena Vista Social Club")
     * @param warnings Used to register warnings
     */ postMap(tag, warnings) {
        return;
    }
}
CommonTagMapper.maxRatingScore = 1; //# sourceMappingURL=GenericTagMapper.js.map
}}),
"[project]/node_modules/music-metadata/lib/id3v1/ID3v1TagMap.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ID3v1TagMapper": (()=>ID3v1TagMapper)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/GenericTagMapper.js [app-route] (ecmascript)");
;
/**
 * ID3v1 tag mappings
 */ const id3v1TagMap = {
    title: 'title',
    artist: 'artist',
    album: 'album',
    year: 'year',
    comment: 'comment',
    track: 'track',
    genre: 'genre'
};
class ID3v1TagMapper extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CommonTagMapper"] {
    constructor(){
        super([
            'ID3v1'
        ], id3v1TagMap);
    }
} //# sourceMappingURL=ID3v1TagMap.js.map
}}),
"[project]/node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CaseInsensitiveTagMap": (()=>CaseInsensitiveTagMap)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/GenericTagMapper.js [app-route] (ecmascript)");
;
class CaseInsensitiveTagMap extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CommonTagMapper"] {
    constructor(tagTypes, tagMap){
        const upperCaseMap = {};
        for (const tag of Object.keys(tagMap)){
            upperCaseMap[tag.toUpperCase()] = tagMap[tag];
        }
        super(tagTypes, upperCaseMap);
    }
    /**
     * @tag  Native header tag
     * @return common tag name (alias)
     */ getCommonName(tag) {
        return this.tagMap[tag.toUpperCase()];
    }
} //# sourceMappingURL=CaseInsensitiveTagMap.js.map
}}),
"[project]/node_modules/music-metadata/lib/ParseError.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CouldNotDetermineFileTypeError": (()=>CouldNotDetermineFileTypeError),
    "FieldDecodingError": (()=>FieldDecodingError),
    "InternalParserError": (()=>InternalParserError),
    "UnsupportedFileTypeError": (()=>UnsupportedFileTypeError),
    "makeParseError": (()=>makeParseError),
    "makeUnexpectedFileContentError": (()=>makeUnexpectedFileContentError)
});
const makeParseError = (name)=>{
    return class ParseError extends Error {
        constructor(message){
            super(message);
            this.name = name;
        }
    };
};
class CouldNotDetermineFileTypeError extends makeParseError('CouldNotDetermineFileTypeError') {
}
class UnsupportedFileTypeError extends makeParseError('UnsupportedFileTypeError') {
}
// Concrete error class representing unexpected file content.
class UnexpectedFileContentError extends makeParseError('UnexpectedFileContentError') {
    constructor(fileType, message){
        super(message);
        this.fileType = fileType;
    }
    // Override toString to include file type information.
    toString() {
        return `${this.name} (FileType: ${this.fileType}): ${this.message}`;
    }
}
class FieldDecodingError extends makeParseError('FieldDecodingError') {
}
class InternalParserError extends makeParseError('InternalParserError') {
}
const makeUnexpectedFileContentError = (fileType)=>{
    return class extends UnexpectedFileContentError {
        constructor(message){
            super(fileType, message);
        }
    };
}; //# sourceMappingURL=ParseError.js.map
}}),
"[project]/node_modules/music-metadata/lib/common/Util.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "a2hex": (()=>a2hex),
    "dbToRatio": (()=>dbToRatio),
    "decodeString": (()=>decodeString),
    "findZero": (()=>findZero),
    "getBit": (()=>getBit),
    "getBitAllignedNumber": (()=>getBitAllignedNumber),
    "isBitSet": (()=>isBitSet),
    "ratioToDb": (()=>ratioToDb),
    "stripNulls": (()=>stripNulls),
    "toRatio": (()=>toRatio),
    "trimRightNull": (()=>trimRightNull)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/token-types/lib/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/ParseError.js [app-route] (ecmascript)");
;
;
function getBit(buf, off, bit) {
    return (buf[off] & 1 << bit) !== 0;
}
function findZero(uint8Array, start, end, encoding) {
    let i = start;
    if (encoding === 'utf-16le') {
        while(uint8Array[i] !== 0 || uint8Array[i + 1] !== 0){
            if (i >= end) return end;
            i += 2;
        }
        return i;
    }
    while(uint8Array[i] !== 0){
        if (i >= end) return end;
        i++;
    }
    return i;
}
function trimRightNull(x) {
    const pos0 = x.indexOf('\0');
    return pos0 === -1 ? x : x.substr(0, pos0);
}
function swapBytes(uint8Array) {
    const l = uint8Array.length;
    if ((l & 1) !== 0) throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["FieldDecodingError"]('Buffer length must be even');
    for(let i = 0; i < l; i += 2){
        const a = uint8Array[i];
        uint8Array[i] = uint8Array[i + 1];
        uint8Array[i + 1] = a;
    }
    return uint8Array;
}
function decodeString(uint8Array, encoding) {
    // annoying workaround for a double BOM issue
    // https://github.com/leetreveil/musicmetadata/issues/84
    if (uint8Array[0] === 0xFF && uint8Array[1] === 0xFE) {
        return decodeString(uint8Array.subarray(2), encoding);
    }
    if (encoding === 'utf-16le' && uint8Array[0] === 0xFE && uint8Array[1] === 0xFF) {
        // BOM, indicating big endian decoding
        if ((uint8Array.length & 1) !== 0) throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["FieldDecodingError"]('Expected even number of octets for 16-bit unicode string');
        return decodeString(swapBytes(uint8Array), encoding);
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["StringType"](uint8Array.length, encoding).get(uint8Array, 0);
}
function stripNulls(str) {
    str = str.replace(/^\x00+/g, '');
    str = str.replace(/\x00+$/g, '');
    return str;
}
function getBitAllignedNumber(source, byteOffset, bitOffset, len) {
    const byteOff = byteOffset + ~~(bitOffset / 8);
    const bitOff = bitOffset % 8;
    let value = source[byteOff];
    value &= 0xff >> bitOff;
    const bitsRead = 8 - bitOff;
    const bitsLeft = len - bitsRead;
    if (bitsLeft < 0) {
        value >>= 8 - bitOff - len;
    } else if (bitsLeft > 0) {
        value <<= bitsLeft;
        value |= getBitAllignedNumber(source, byteOffset, bitOffset + bitsRead, bitsLeft);
    }
    return value;
}
function isBitSet(source, byteOffset, bitOffset) {
    return getBitAllignedNumber(source, byteOffset, bitOffset, 1) === 1;
}
function a2hex(str) {
    const arr = [];
    for(let i = 0, l = str.length; i < l; i++){
        const hex = Number(str.charCodeAt(i)).toString(16);
        arr.push(hex.length === 1 ? `0${hex}` : hex);
    }
    return arr.join(' ');
}
function ratioToDb(ratio) {
    return 10 * Math.log10(ratio);
}
function dbToRatio(dB) {
    return 10 ** (dB / 10);
}
function toRatio(value) {
    const ps = value.split(' ').map((p)=>p.trim().toLowerCase());
    // @ts-ignore
    if (ps.length >= 1) {
        const v = Number.parseFloat(ps[0]);
        return ps.length === 2 && ps[1] === 'db' ? {
            dB: v,
            ratio: dbToRatio(v)
        } : {
            dB: ratioToDb(v),
            ratio: v
        };
    }
} //# sourceMappingURL=Util.js.map
}}),
"[project]/node_modules/music-metadata/lib/id3v2/ID3v24TagMapper.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ID3v24TagMapper": (()=>ID3v24TagMapper)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/token-types/lib/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/GenericTagMapper.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$CaseInsensitiveTagMap$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/Util.js [app-route] (ecmascript)");
;
;
;
;
/**
 * ID3v2.3/ID3v2.4 tag mappings
 */ const id3v24TagMap = {
    // id3v2.3
    TIT2: 'title',
    TPE1: 'artist',
    'TXXX:Artists': 'artists',
    TPE2: 'albumartist',
    TALB: 'album',
    TDRV: 'date',
    /**
     * Original release year
     */ TORY: 'originalyear',
    TPOS: 'disk',
    TCON: 'genre',
    APIC: 'picture',
    TCOM: 'composer',
    USLT: 'lyrics',
    TSOA: 'albumsort',
    TSOT: 'titlesort',
    TOAL: 'originalalbum',
    TSOP: 'artistsort',
    TSO2: 'albumartistsort',
    TSOC: 'composersort',
    TEXT: 'lyricist',
    'TXXX:Writer': 'writer',
    TPE3: 'conductor',
    // 'IPLS:instrument': 'performer:instrument', // ToDo
    TPE4: 'remixer',
    'IPLS:arranger': 'arranger',
    'IPLS:engineer': 'engineer',
    'IPLS:producer': 'producer',
    'IPLS:DJ-mix': 'djmixer',
    'IPLS:mix': 'mixer',
    TPUB: 'label',
    TIT1: 'grouping',
    TIT3: 'subtitle',
    TRCK: 'track',
    TCMP: 'compilation',
    POPM: 'rating',
    TBPM: 'bpm',
    TMED: 'media',
    'TXXX:CATALOGNUMBER': 'catalognumber',
    'TXXX:MusicBrainz Album Status': 'releasestatus',
    'TXXX:MusicBrainz Album Type': 'releasetype',
    /**
     * Release country as documented: https://picard.musicbrainz.org/docs/mappings/#cite_note-0
     */ 'TXXX:MusicBrainz Album Release Country': 'releasecountry',
    /**
     * Release country as implemented // ToDo: report
     */ 'TXXX:RELEASECOUNTRY': 'releasecountry',
    'TXXX:SCRIPT': 'script',
    TLAN: 'language',
    TCOP: 'copyright',
    WCOP: 'license',
    TENC: 'encodedby',
    TSSE: 'encodersettings',
    'TXXX:BARCODE': 'barcode',
    'TXXX:ISRC': 'isrc',
    TSRC: 'isrc',
    'TXXX:ASIN': 'asin',
    'TXXX:originalyear': 'originalyear',
    'UFID:http://musicbrainz.org': 'musicbrainz_recordingid',
    'TXXX:MusicBrainz Release Track Id': 'musicbrainz_trackid',
    'TXXX:MusicBrainz Album Id': 'musicbrainz_albumid',
    'TXXX:MusicBrainz Artist Id': 'musicbrainz_artistid',
    'TXXX:MusicBrainz Album Artist Id': 'musicbrainz_albumartistid',
    'TXXX:MusicBrainz Release Group Id': 'musicbrainz_releasegroupid',
    'TXXX:MusicBrainz Work Id': 'musicbrainz_workid',
    'TXXX:MusicBrainz TRM Id': 'musicbrainz_trmid',
    'TXXX:MusicBrainz Disc Id': 'musicbrainz_discid',
    'TXXX:ACOUSTID_ID': 'acoustid_id',
    'TXXX:Acoustid Id': 'acoustid_id',
    'TXXX:Acoustid Fingerprint': 'acoustid_fingerprint',
    'TXXX:MusicIP PUID': 'musicip_puid',
    'TXXX:MusicMagic Fingerprint': 'musicip_fingerprint',
    WOAR: 'website',
    // id3v2.4
    // ToDo: In same sequence as defined at http://id3.org/id3v2.4.0-frames
    TDRC: 'date',
    TYER: 'year',
    TDOR: 'originaldate',
    // 'TMCL:instrument': 'performer:instrument',
    'TIPL:arranger': 'arranger',
    'TIPL:engineer': 'engineer',
    'TIPL:producer': 'producer',
    'TIPL:DJ-mix': 'djmixer',
    'TIPL:mix': 'mixer',
    TMOO: 'mood',
    // additional mappings:
    SYLT: 'lyrics',
    TSST: 'discsubtitle',
    TKEY: 'key',
    COMM: 'comment',
    TOPE: 'originalartist',
    // Windows Media Player
    'PRIV:AverageLevel': 'averageLevel',
    'PRIV:PeakLevel': 'peakLevel',
    // Discogs
    'TXXX:DISCOGS_ARTIST_ID': 'discogs_artist_id',
    'TXXX:DISCOGS_ARTISTS': 'artists',
    'TXXX:DISCOGS_ARTIST_NAME': 'artists',
    'TXXX:DISCOGS_ALBUM_ARTISTS': 'albumartist',
    'TXXX:DISCOGS_CATALOG': 'catalognumber',
    'TXXX:DISCOGS_COUNTRY': 'releasecountry',
    'TXXX:DISCOGS_DATE': 'originaldate',
    'TXXX:DISCOGS_LABEL': 'label',
    'TXXX:DISCOGS_LABEL_ID': 'discogs_label_id',
    'TXXX:DISCOGS_MASTER_RELEASE_ID': 'discogs_master_release_id',
    'TXXX:DISCOGS_RATING': 'discogs_rating',
    'TXXX:DISCOGS_RELEASED': 'date',
    'TXXX:DISCOGS_RELEASE_ID': 'discogs_release_id',
    'TXXX:DISCOGS_VOTES': 'discogs_votes',
    'TXXX:CATALOGID': 'catalognumber',
    'TXXX:STYLE': 'genre',
    'TXXX:REPLAYGAIN_TRACK_PEAK': 'replaygain_track_peak',
    'TXXX:REPLAYGAIN_TRACK_GAIN': 'replaygain_track_gain',
    'TXXX:REPLAYGAIN_ALBUM_PEAK': 'replaygain_album_peak',
    'TXXX:REPLAYGAIN_ALBUM_GAIN': 'replaygain_album_gain',
    'TXXX:MP3GAIN_MINMAX': 'replaygain_track_minmax',
    'TXXX:MP3GAIN_ALBUM_MINMAX': 'replaygain_album_minmax',
    'TXXX:MP3GAIN_UNDO': 'replaygain_undo',
    MVNM: 'movement',
    MVIN: 'movementIndex',
    PCST: 'podcast',
    TCAT: 'category',
    TDES: 'description',
    TDRL: 'releasedate',
    TGID: 'podcastId',
    TKWD: 'keywords',
    WFED: 'podcasturl',
    GRP1: 'grouping'
};
class ID3v24TagMapper extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$CaseInsensitiveTagMap$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CaseInsensitiveTagMap"] {
    static toRating(popm) {
        return {
            source: popm.email,
            rating: popm.rating > 0 ? (popm.rating - 1) / 254 * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CommonTagMapper"].maxRatingScore : undefined
        };
    }
    constructor(){
        super([
            'ID3v2.3',
            'ID3v2.4'
        ], id3v24TagMap);
    }
    /**
     * Handle post mapping exceptions / correction
     * @param tag to post map
     * @param warnings Wil be used to register (collect) warnings
     */ postMap(tag, warnings) {
        switch(tag.id){
            case 'UFID':
                {
                    // decode MusicBrainz Recording Id
                    const idTag = tag.value;
                    if (idTag.owner_identifier === 'http://musicbrainz.org') {
                        tag.id += `:${idTag.owner_identifier}`;
                        tag.value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(idTag.identifier, 'latin1'); // latin1 == iso-8859-1
                    }
                }
                break;
            case 'PRIV':
                {
                    const customTag = tag.value;
                    switch(customTag.owner_identifier){
                        // decode Windows Media Player
                        case 'AverageLevel':
                        case 'PeakValue':
                            tag.id += `:${customTag.owner_identifier}`;
                            tag.value = customTag.data.length === 4 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(customTag.data, 0) : null;
                            if (tag.value === null) {
                                warnings.addWarning('Failed to parse PRIV:PeakValue');
                            }
                            break;
                        default:
                            warnings.addWarning(`Unknown PRIV owner-identifier: ${customTag.data}`);
                    }
                }
                break;
            case 'POPM':
                tag.value = ID3v24TagMapper.toRating(tag.value);
                break;
            default:
                break;
        }
    }
} //# sourceMappingURL=ID3v24TagMapper.js.map
}}),
"[project]/node_modules/music-metadata/lib/asf/AsfTagMapper.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AsfTagMapper": (()=>AsfTagMapper)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/GenericTagMapper.js [app-route] (ecmascript)");
;
/**
 * ASF Metadata tag mappings.
 * See http://msdn.microsoft.com/en-us/library/ms867702.aspx
 */ const asfTagMap = {
    Title: 'title',
    Author: 'artist',
    'WM/AlbumArtist': 'albumartist',
    'WM/AlbumTitle': 'album',
    'WM/Year': 'date',
    'WM/OriginalReleaseTime': 'originaldate',
    'WM/OriginalReleaseYear': 'originalyear',
    Description: 'comment',
    'WM/TrackNumber': 'track',
    'WM/PartOfSet': 'disk',
    'WM/Genre': 'genre',
    'WM/Composer': 'composer',
    'WM/Lyrics': 'lyrics',
    'WM/AlbumSortOrder': 'albumsort',
    'WM/TitleSortOrder': 'titlesort',
    'WM/ArtistSortOrder': 'artistsort',
    'WM/AlbumArtistSortOrder': 'albumartistsort',
    'WM/ComposerSortOrder': 'composersort',
    'WM/Writer': 'lyricist',
    'WM/Conductor': 'conductor',
    'WM/ModifiedBy': 'remixer',
    'WM/Engineer': 'engineer',
    'WM/Producer': 'producer',
    'WM/DJMixer': 'djmixer',
    'WM/Mixer': 'mixer',
    'WM/Publisher': 'label',
    'WM/ContentGroupDescription': 'grouping',
    'WM/SubTitle': 'subtitle',
    'WM/SetSubTitle': 'discsubtitle',
    // 'WM/PartOfSet': 'totaldiscs',
    'WM/IsCompilation': 'compilation',
    'WM/SharedUserRating': 'rating',
    'WM/BeatsPerMinute': 'bpm',
    'WM/Mood': 'mood',
    'WM/Media': 'media',
    'WM/CatalogNo': 'catalognumber',
    'MusicBrainz/Album Status': 'releasestatus',
    'MusicBrainz/Album Type': 'releasetype',
    'MusicBrainz/Album Release Country': 'releasecountry',
    'WM/Script': 'script',
    'WM/Language': 'language',
    Copyright: 'copyright',
    LICENSE: 'license',
    'WM/EncodedBy': 'encodedby',
    'WM/EncodingSettings': 'encodersettings',
    'WM/Barcode': 'barcode',
    'WM/ISRC': 'isrc',
    'MusicBrainz/Track Id': 'musicbrainz_recordingid',
    'MusicBrainz/Release Track Id': 'musicbrainz_trackid',
    'MusicBrainz/Album Id': 'musicbrainz_albumid',
    'MusicBrainz/Artist Id': 'musicbrainz_artistid',
    'MusicBrainz/Album Artist Id': 'musicbrainz_albumartistid',
    'MusicBrainz/Release Group Id': 'musicbrainz_releasegroupid',
    'MusicBrainz/Work Id': 'musicbrainz_workid',
    'MusicBrainz/TRM Id': 'musicbrainz_trmid',
    'MusicBrainz/Disc Id': 'musicbrainz_discid',
    'Acoustid/Id': 'acoustid_id',
    'Acoustid/Fingerprint': 'acoustid_fingerprint',
    'MusicIP/PUID': 'musicip_puid',
    'WM/ARTISTS': 'artists',
    'WM/InitialKey': 'key',
    ASIN: 'asin',
    'WM/Work': 'work',
    'WM/AuthorURL': 'website',
    'WM/Picture': 'picture'
};
class AsfTagMapper extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CommonTagMapper"] {
    static toRating(rating) {
        return {
            rating: Number.parseFloat(rating + 1) / 5
        };
    }
    constructor(){
        super([
            'asf'
        ], asfTagMap);
    }
    postMap(tag) {
        switch(tag.id){
            case 'WM/SharedUserRating':
                {
                    const keys = tag.id.split(':');
                    tag.value = AsfTagMapper.toRating(tag.value);
                    tag.id = keys[0];
                    break;
                }
        }
    }
} //# sourceMappingURL=AsfTagMapper.js.map
}}),
"[project]/node_modules/music-metadata/lib/id3v2/ID3v22TagMapper.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ID3v22TagMapper": (()=>ID3v22TagMapper),
    "id3v22TagMap": (()=>id3v22TagMap)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$CaseInsensitiveTagMap$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js [app-route] (ecmascript)");
;
const id3v22TagMap = {
    TT2: 'title',
    TP1: 'artist',
    TP2: 'albumartist',
    TAL: 'album',
    TYE: 'year',
    COM: 'comment',
    TRK: 'track',
    TPA: 'disk',
    TCO: 'genre',
    PIC: 'picture',
    TCM: 'composer',
    TOR: 'originaldate',
    TOT: 'originalalbum',
    TXT: 'lyricist',
    TP3: 'conductor',
    TPB: 'label',
    TT1: 'grouping',
    TT3: 'subtitle',
    TLA: 'language',
    TCR: 'copyright',
    WCP: 'license',
    TEN: 'encodedby',
    TSS: 'encodersettings',
    WAR: 'website',
    PCS: 'podcast',
    TCP: "compilation",
    TDR: 'date',
    TS2: 'albumartistsort',
    TSA: 'albumsort',
    TSC: 'composersort',
    TSP: 'artistsort',
    TST: 'titlesort',
    WFD: 'podcasturl',
    TBP: 'bpm'
};
class ID3v22TagMapper extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$CaseInsensitiveTagMap$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CaseInsensitiveTagMap"] {
    constructor(){
        super([
            'ID3v2.2'
        ], id3v22TagMap);
    }
} //# sourceMappingURL=ID3v22TagMapper.js.map
}}),
"[project]/node_modules/music-metadata/lib/apev2/APEv2TagMapper.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "APEv2TagMapper": (()=>APEv2TagMapper)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$CaseInsensitiveTagMap$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js [app-route] (ecmascript)");
;
/**
 * ID3v2.2 tag mappings
 */ const apev2TagMap = {
    Title: 'title',
    Artist: 'artist',
    Artists: 'artists',
    'Album Artist': 'albumartist',
    Album: 'album',
    Year: 'date',
    Originalyear: 'originalyear',
    Originaldate: 'originaldate',
    Releasedate: 'releasedate',
    Comment: 'comment',
    Track: 'track',
    Disc: 'disk',
    DISCNUMBER: 'disk',
    Genre: 'genre',
    'Cover Art (Front)': 'picture',
    'Cover Art (Back)': 'picture',
    Composer: 'composer',
    Lyrics: 'lyrics',
    ALBUMSORT: 'albumsort',
    TITLESORT: 'titlesort',
    WORK: 'work',
    ARTISTSORT: 'artistsort',
    ALBUMARTISTSORT: 'albumartistsort',
    COMPOSERSORT: 'composersort',
    Lyricist: 'lyricist',
    Writer: 'writer',
    Conductor: 'conductor',
    // 'Performer=artistÂ (instrument)': 'performer:instrument',
    MixArtist: 'remixer',
    Arranger: 'arranger',
    Engineer: 'engineer',
    Producer: 'producer',
    DJMixer: 'djmixer',
    Mixer: 'mixer',
    Label: 'label',
    Grouping: 'grouping',
    Subtitle: 'subtitle',
    DiscSubtitle: 'discsubtitle',
    Compilation: 'compilation',
    BPM: 'bpm',
    Mood: 'mood',
    Media: 'media',
    CatalogNumber: 'catalognumber',
    MUSICBRAINZ_ALBUMSTATUS: 'releasestatus',
    MUSICBRAINZ_ALBUMTYPE: 'releasetype',
    RELEASECOUNTRY: 'releasecountry',
    Script: 'script',
    Language: 'language',
    Copyright: 'copyright',
    LICENSE: 'license',
    EncodedBy: 'encodedby',
    EncoderSettings: 'encodersettings',
    Barcode: 'barcode',
    ISRC: 'isrc',
    ASIN: 'asin',
    musicbrainz_trackid: 'musicbrainz_recordingid',
    musicbrainz_releasetrackid: 'musicbrainz_trackid',
    MUSICBRAINZ_ALBUMID: 'musicbrainz_albumid',
    MUSICBRAINZ_ARTISTID: 'musicbrainz_artistid',
    MUSICBRAINZ_ALBUMARTISTID: 'musicbrainz_albumartistid',
    MUSICBRAINZ_RELEASEGROUPID: 'musicbrainz_releasegroupid',
    MUSICBRAINZ_WORKID: 'musicbrainz_workid',
    MUSICBRAINZ_TRMID: 'musicbrainz_trmid',
    MUSICBRAINZ_DISCID: 'musicbrainz_discid',
    Acoustid_Id: 'acoustid_id',
    ACOUSTID_FINGERPRINT: 'acoustid_fingerprint',
    MUSICIP_PUID: 'musicip_puid',
    Weblink: 'website',
    REPLAYGAIN_TRACK_GAIN: 'replaygain_track_gain',
    REPLAYGAIN_TRACK_PEAK: 'replaygain_track_peak',
    MP3GAIN_MINMAX: 'replaygain_track_minmax',
    MP3GAIN_UNDO: 'replaygain_undo'
};
class APEv2TagMapper extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$CaseInsensitiveTagMap$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CaseInsensitiveTagMap"] {
    constructor(){
        super([
            'APEv2'
        ], apev2TagMap);
    }
} //# sourceMappingURL=APEv2TagMapper.js.map
}}),
"[project]/node_modules/music-metadata/lib/mp4/MP4TagMapper.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "MP4TagMapper": (()=>MP4TagMapper),
    "tagType": (()=>tagType)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$CaseInsensitiveTagMap$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js [app-route] (ecmascript)");
;
/**
 * Ref: https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata
 */ const mp4TagMap = {
    'Â©nam': 'title',
    'Â©ART': 'artist',
    aART: 'albumartist',
    /**
     * ToDo: Album artist seems to be stored here while Picard documentation says: aART
     */ '----:com.apple.iTunes:Band': 'albumartist',
    'Â©alb': 'album',
    'Â©day': 'date',
    'Â©cmt': 'comment',
    'Â©com': 'comment',
    trkn: 'track',
    disk: 'disk',
    'Â©gen': 'genre',
    covr: 'picture',
    'Â©wrt': 'composer',
    'Â©lyr': 'lyrics',
    soal: 'albumsort',
    sonm: 'titlesort',
    soar: 'artistsort',
    soaa: 'albumartistsort',
    soco: 'composersort',
    '----:com.apple.iTunes:LYRICIST': 'lyricist',
    '----:com.apple.iTunes:CONDUCTOR': 'conductor',
    '----:com.apple.iTunes:REMIXER': 'remixer',
    '----:com.apple.iTunes:ENGINEER': 'engineer',
    '----:com.apple.iTunes:PRODUCER': 'producer',
    '----:com.apple.iTunes:DJMIXER': 'djmixer',
    '----:com.apple.iTunes:MIXER': 'mixer',
    '----:com.apple.iTunes:LABEL': 'label',
    'Â©grp': 'grouping',
    '----:com.apple.iTunes:SUBTITLE': 'subtitle',
    '----:com.apple.iTunes:DISCSUBTITLE': 'discsubtitle',
    cpil: 'compilation',
    tmpo: 'bpm',
    '----:com.apple.iTunes:MOOD': 'mood',
    '----:com.apple.iTunes:MEDIA': 'media',
    '----:com.apple.iTunes:CATALOGNUMBER': 'catalognumber',
    tvsh: 'tvShow',
    tvsn: 'tvSeason',
    tves: 'tvEpisode',
    sosn: 'tvShowSort',
    tven: 'tvEpisodeId',
    tvnn: 'tvNetwork',
    pcst: 'podcast',
    purl: 'podcasturl',
    '----:com.apple.iTunes:MusicBrainz Album Status': 'releasestatus',
    '----:com.apple.iTunes:MusicBrainz Album Type': 'releasetype',
    '----:com.apple.iTunes:MusicBrainz Album Release Country': 'releasecountry',
    '----:com.apple.iTunes:SCRIPT': 'script',
    '----:com.apple.iTunes:LANGUAGE': 'language',
    cprt: 'copyright',
    'Â©cpy': 'copyright',
    '----:com.apple.iTunes:LICENSE': 'license',
    'Â©too': 'encodedby',
    pgap: 'gapless',
    '----:com.apple.iTunes:BARCODE': 'barcode',
    '----:com.apple.iTunes:ISRC': 'isrc',
    '----:com.apple.iTunes:ASIN': 'asin',
    '----:com.apple.iTunes:NOTES': 'comment',
    '----:com.apple.iTunes:MusicBrainz Track Id': 'musicbrainz_recordingid',
    '----:com.apple.iTunes:MusicBrainz Release Track Id': 'musicbrainz_trackid',
    '----:com.apple.iTunes:MusicBrainz Album Id': 'musicbrainz_albumid',
    '----:com.apple.iTunes:MusicBrainz Artist Id': 'musicbrainz_artistid',
    '----:com.apple.iTunes:MusicBrainz Album Artist Id': 'musicbrainz_albumartistid',
    '----:com.apple.iTunes:MusicBrainz Release Group Id': 'musicbrainz_releasegroupid',
    '----:com.apple.iTunes:MusicBrainz Work Id': 'musicbrainz_workid',
    '----:com.apple.iTunes:MusicBrainz TRM Id': 'musicbrainz_trmid',
    '----:com.apple.iTunes:MusicBrainz Disc Id': 'musicbrainz_discid',
    '----:com.apple.iTunes:Acoustid Id': 'acoustid_id',
    '----:com.apple.iTunes:Acoustid Fingerprint': 'acoustid_fingerprint',
    '----:com.apple.iTunes:MusicIP PUID': 'musicip_puid',
    '----:com.apple.iTunes:fingerprint': 'musicip_fingerprint',
    '----:com.apple.iTunes:replaygain_track_gain': 'replaygain_track_gain',
    '----:com.apple.iTunes:replaygain_track_peak': 'replaygain_track_peak',
    '----:com.apple.iTunes:replaygain_album_gain': 'replaygain_album_gain',
    '----:com.apple.iTunes:replaygain_album_peak': 'replaygain_album_peak',
    '----:com.apple.iTunes:replaygain_track_minmax': 'replaygain_track_minmax',
    '----:com.apple.iTunes:replaygain_album_minmax': 'replaygain_album_minmax',
    '----:com.apple.iTunes:replaygain_undo': 'replaygain_undo',
    // Additional mappings:
    gnre: 'genre',
    '----:com.apple.iTunes:ALBUMARTISTSORT': 'albumartistsort',
    '----:com.apple.iTunes:ARTISTS': 'artists',
    '----:com.apple.iTunes:ORIGINALDATE': 'originaldate',
    '----:com.apple.iTunes:ORIGINALYEAR': 'originalyear',
    '----:com.apple.iTunes:RELEASEDATE': 'releasedate',
    // '----:com.apple.iTunes:PERFORMER': 'performer'
    desc: 'description',
    ldes: 'longDescription',
    'Â©mvn': 'movement',
    'Â©mvi': 'movementIndex',
    'Â©mvc': 'movementTotal',
    'Â©wrk': 'work',
    catg: 'category',
    egid: 'podcastId',
    hdvd: 'hdVideo',
    keyw: 'keywords',
    shwm: 'showMovement',
    stik: 'stik',
    rate: 'rating'
};
const tagType = 'iTunes';
class MP4TagMapper extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$CaseInsensitiveTagMap$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CaseInsensitiveTagMap"] {
    constructor(){
        super([
            tagType
        ], mp4TagMap);
    }
    postMap(tag, warnings) {
        switch(tag.id){
            case 'rate':
                tag.value = {
                    source: undefined,
                    rating: Number.parseFloat(tag.value) / 100
                };
                break;
        }
    }
} //# sourceMappingURL=MP4TagMapper.js.map
}}),
"[project]/node_modules/music-metadata/lib/ogg/vorbis/VorbisTagMapper.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "VorbisTagMapper": (()=>VorbisTagMapper)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/GenericTagMapper.js [app-route] (ecmascript)");
;
/**
 * Vorbis tag mappings
 *
 * Mapping from native header format to one or possibly more 'common' entries
 * The common entries aim to read the same information from different media files
 * independent of the underlying format
 */ const vorbisTagMap = {
    TITLE: 'title',
    ARTIST: 'artist',
    ARTISTS: 'artists',
    ALBUMARTIST: 'albumartist',
    'ALBUM ARTIST': 'albumartist',
    ALBUM: 'album',
    DATE: 'date',
    ORIGINALDATE: 'originaldate',
    ORIGINALYEAR: 'originalyear',
    RELEASEDATE: 'releasedate',
    COMMENT: 'comment',
    TRACKNUMBER: 'track',
    DISCNUMBER: 'disk',
    GENRE: 'genre',
    METADATA_BLOCK_PICTURE: 'picture',
    COMPOSER: 'composer',
    LYRICS: 'lyrics',
    ALBUMSORT: 'albumsort',
    TITLESORT: 'titlesort',
    WORK: 'work',
    ARTISTSORT: 'artistsort',
    ALBUMARTISTSORT: 'albumartistsort',
    COMPOSERSORT: 'composersort',
    LYRICIST: 'lyricist',
    WRITER: 'writer',
    CONDUCTOR: 'conductor',
    // 'PERFORMER=artistÂ (instrument)': 'performer:instrument', // ToDo
    REMIXER: 'remixer',
    ARRANGER: 'arranger',
    ENGINEER: 'engineer',
    PRODUCER: 'producer',
    DJMIXER: 'djmixer',
    MIXER: 'mixer',
    LABEL: 'label',
    GROUPING: 'grouping',
    SUBTITLE: 'subtitle',
    DISCSUBTITLE: 'discsubtitle',
    TRACKTOTAL: 'totaltracks',
    DISCTOTAL: 'totaldiscs',
    COMPILATION: 'compilation',
    RATING: 'rating',
    BPM: 'bpm',
    KEY: 'key',
    MOOD: 'mood',
    MEDIA: 'media',
    CATALOGNUMBER: 'catalognumber',
    RELEASESTATUS: 'releasestatus',
    RELEASETYPE: 'releasetype',
    RELEASECOUNTRY: 'releasecountry',
    SCRIPT: 'script',
    LANGUAGE: 'language',
    COPYRIGHT: 'copyright',
    LICENSE: 'license',
    ENCODEDBY: 'encodedby',
    ENCODERSETTINGS: 'encodersettings',
    BARCODE: 'barcode',
    ISRC: 'isrc',
    ASIN: 'asin',
    MUSICBRAINZ_TRACKID: 'musicbrainz_recordingid',
    MUSICBRAINZ_RELEASETRACKID: 'musicbrainz_trackid',
    MUSICBRAINZ_ALBUMID: 'musicbrainz_albumid',
    MUSICBRAINZ_ARTISTID: 'musicbrainz_artistid',
    MUSICBRAINZ_ALBUMARTISTID: 'musicbrainz_albumartistid',
    MUSICBRAINZ_RELEASEGROUPID: 'musicbrainz_releasegroupid',
    MUSICBRAINZ_WORKID: 'musicbrainz_workid',
    MUSICBRAINZ_TRMID: 'musicbrainz_trmid',
    MUSICBRAINZ_DISCID: 'musicbrainz_discid',
    ACOUSTID_ID: 'acoustid_id',
    ACOUSTID_ID_FINGERPRINT: 'acoustid_fingerprint',
    MUSICIP_PUID: 'musicip_puid',
    // 'FINGERPRINT=MusicMagic FingerprintÂ {fingerprint}': 'musicip_fingerprint', // ToDo
    WEBSITE: 'website',
    NOTES: 'notes',
    TOTALTRACKS: 'totaltracks',
    TOTALDISCS: 'totaldiscs',
    // Discogs
    DISCOGS_ARTIST_ID: 'discogs_artist_id',
    DISCOGS_ARTISTS: 'artists',
    DISCOGS_ARTIST_NAME: 'artists',
    DISCOGS_ALBUM_ARTISTS: 'albumartist',
    DISCOGS_CATALOG: 'catalognumber',
    DISCOGS_COUNTRY: 'releasecountry',
    DISCOGS_DATE: 'originaldate',
    DISCOGS_LABEL: 'label',
    DISCOGS_LABEL_ID: 'discogs_label_id',
    DISCOGS_MASTER_RELEASE_ID: 'discogs_master_release_id',
    DISCOGS_RATING: 'discogs_rating',
    DISCOGS_RELEASED: 'date',
    DISCOGS_RELEASE_ID: 'discogs_release_id',
    DISCOGS_VOTES: 'discogs_votes',
    CATALOGID: 'catalognumber',
    STYLE: 'genre',
    //
    REPLAYGAIN_TRACK_GAIN: 'replaygain_track_gain',
    REPLAYGAIN_TRACK_PEAK: 'replaygain_track_peak',
    REPLAYGAIN_ALBUM_GAIN: 'replaygain_album_gain',
    REPLAYGAIN_ALBUM_PEAK: 'replaygain_album_peak',
    // To Sure if these (REPLAYGAIN_MINMAX, REPLAYGAIN_ALBUM_MINMAX & REPLAYGAIN_UNDO) are used for Vorbis:
    REPLAYGAIN_MINMAX: 'replaygain_track_minmax',
    REPLAYGAIN_ALBUM_MINMAX: 'replaygain_album_minmax',
    REPLAYGAIN_UNDO: 'replaygain_undo'
};
class VorbisTagMapper extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CommonTagMapper"] {
    static toRating(email, rating, maxScore) {
        return {
            source: email ? email.toLowerCase() : undefined,
            rating: Number.parseFloat(rating) / maxScore * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CommonTagMapper"].maxRatingScore
        };
    }
    constructor(){
        super([
            'vorbis'
        ], vorbisTagMap);
    }
    postMap(tag) {
        if (tag.id === 'RATING') {
            // The way Winamp 5.666 assigns rating
            tag.value = VorbisTagMapper.toRating(undefined, tag.value, 100);
        } else if (tag.id.indexOf('RATING:') === 0) {
            const keys = tag.id.split(':');
            tag.value = VorbisTagMapper.toRating(keys[1], tag.value, 1);
            tag.id = keys[0];
        }
    }
} //# sourceMappingURL=VorbisTagMapper.js.map
}}),
"[project]/node_modules/music-metadata/lib/riff/RiffInfoTagMap.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "RiffInfoTagMapper": (()=>RiffInfoTagMapper),
    "riffInfoTagMap": (()=>riffInfoTagMap)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/GenericTagMapper.js [app-route] (ecmascript)");
;
const riffInfoTagMap = {
    IART: 'artist',
    ICRD: 'date',
    INAM: 'title',
    TITL: 'title',
    IPRD: 'album',
    ITRK: 'track',
    IPRT: 'track',
    COMM: 'comment',
    ICMT: 'comment',
    ICNT: 'releasecountry',
    GNRE: 'genre',
    IWRI: 'writer',
    RATE: 'rating',
    YEAR: 'year',
    ISFT: 'encodedby',
    CODE: 'encodedby',
    TURL: 'website',
    IGNR: 'genre',
    IENG: 'engineer',
    ITCH: 'technician',
    IMED: 'media',
    IRPD: 'album' // Product, where the file was intended for
};
class RiffInfoTagMapper extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CommonTagMapper"] {
    constructor(){
        super([
            'exif'
        ], riffInfoTagMap);
    }
} //# sourceMappingURL=RiffInfoTagMap.js.map
}}),
"[project]/node_modules/music-metadata/lib/matroska/MatroskaTagMapper.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "MatroskaTagMapper": (()=>MatroskaTagMapper)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$CaseInsensitiveTagMap$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js [app-route] (ecmascript)");
;
/**
 * EBML Tag map
 */ const ebmlTagMap = {
    'segment:title': 'title',
    'album:ARTIST': 'albumartist',
    'album:ARTISTSORT': 'albumartistsort',
    'album:TITLE': 'album',
    'album:DATE_RECORDED': 'originaldate',
    'album:DATE_RELEASED': 'releasedate',
    'album:PART_NUMBER': 'disk',
    'album:TOTAL_PARTS': 'totaltracks',
    'track:ARTIST': 'artist',
    'track:ARTISTSORT': 'artistsort',
    'track:TITLE': 'title',
    'track:PART_NUMBER': 'track',
    'track:MUSICBRAINZ_TRACKID': 'musicbrainz_recordingid',
    'track:MUSICBRAINZ_ALBUMID': 'musicbrainz_albumid',
    'track:MUSICBRAINZ_ARTISTID': 'musicbrainz_artistid',
    'track:PUBLISHER': 'label',
    'track:GENRE': 'genre',
    'track:ENCODER': 'encodedby',
    'track:ENCODER_OPTIONS': 'encodersettings',
    'edition:TOTAL_PARTS': 'totaldiscs',
    picture: 'picture'
};
class MatroskaTagMapper extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$CaseInsensitiveTagMap$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CaseInsensitiveTagMap"] {
    constructor(){
        super([
            'matroska'
        ], ebmlTagMap);
    }
} //# sourceMappingURL=MatroskaTagMapper.js.map
}}),
"[project]/node_modules/music-metadata/lib/aiff/AiffTagMap.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AiffTagMapper": (()=>AiffTagMapper)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/GenericTagMapper.js [app-route] (ecmascript)");
;
/**
 * ID3v1 tag mappings
 */ const tagMap = {
    NAME: 'title',
    AUTH: 'artist',
    '(c) ': 'copyright',
    ANNO: 'comment'
};
class AiffTagMapper extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CommonTagMapper"] {
    constructor(){
        super([
            'AIFF'
        ], tagMap);
    }
} //# sourceMappingURL=AiffTagMap.js.map
}}),
"[project]/node_modules/music-metadata/lib/common/CombinedTagMapper.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CombinedTagMapper": (()=>CombinedTagMapper)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v1$2f$ID3v1TagMap$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/id3v1/ID3v1TagMap.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v24TagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/id3v2/ID3v24TagMapper.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$asf$2f$AsfTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/asf/AsfTagMapper.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v22TagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/id3v2/ID3v22TagMapper.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2TagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/apev2/APEv2TagMapper.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$mp4$2f$MP4TagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/mp4/MP4TagMapper.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ogg$2f$vorbis$2f$VorbisTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/ogg/vorbis/VorbisTagMapper.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$riff$2f$RiffInfoTagMap$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/riff/RiffInfoTagMap.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$matroska$2f$MatroskaTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/matroska/MatroskaTagMapper.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$aiff$2f$AiffTagMap$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/aiff/AiffTagMap.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/ParseError.js [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
class CombinedTagMapper {
    constructor(){
        this.tagMappers = {};
        [
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v1$2f$ID3v1TagMap$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ID3v1TagMapper"](),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v22TagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ID3v22TagMapper"](),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v24TagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ID3v24TagMapper"](),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$mp4$2f$MP4TagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MP4TagMapper"](),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$mp4$2f$MP4TagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MP4TagMapper"](),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ogg$2f$vorbis$2f$VorbisTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["VorbisTagMapper"](),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2TagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["APEv2TagMapper"](),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$asf$2f$AsfTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AsfTagMapper"](),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$riff$2f$RiffInfoTagMap$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RiffInfoTagMapper"](),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$matroska$2f$MatroskaTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MatroskaTagMapper"](),
            new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$aiff$2f$AiffTagMap$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AiffTagMapper"]()
        ].forEach((mapper)=>{
            this.registerTagMapper(mapper);
        });
    }
    /**
     * Convert native to generic (common) tags
     * @param tagType Originating tag format
     * @param tag     Native tag to map to a generic tag id
     * @param warnings
     * @return Generic tag result (output of this function)
     */ mapTag(tagType, tag, warnings) {
        const tagMapper = this.tagMappers[tagType];
        if (tagMapper) {
            return this.tagMappers[tagType].mapGenericTag(tag, warnings);
        }
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["InternalParserError"](`No generic tag mapper defined for tag-format: ${tagType}`);
    }
    registerTagMapper(genericTagMapper) {
        for (const tagType of genericTagMapper.tagTypes){
            this.tagMappers[tagType] = genericTagMapper;
        }
    }
} //# sourceMappingURL=CombinedTagMapper.js.map
}}),
"[project]/node_modules/music-metadata/lib/id3v2/ID3v2Token.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AttachedPictureType": (()=>AttachedPictureType),
    "ExtendedHeader": (()=>ExtendedHeader),
    "ID3v2Header": (()=>ID3v2Header),
    "LyricsContentType": (()=>LyricsContentType),
    "SyncTextHeader": (()=>SyncTextHeader),
    "TextEncodingToken": (()=>TextEncodingToken),
    "TextHeader": (()=>TextHeader),
    "TimestampFormat": (()=>TimestampFormat),
    "UINT32SYNCSAFE": (()=>UINT32SYNCSAFE)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/token-types/lib/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/Util.js [app-route] (ecmascript)");
;
;
const AttachedPictureType = {
    0: 'Other',
    1: "32x32 pixels 'file icon' (PNG only)",
    2: 'Other file icon',
    3: 'Cover (front)',
    4: 'Cover (back)',
    5: 'Leaflet page',
    6: 'Media (e.g. label side of CD)',
    7: 'Lead artist/lead performer/soloist',
    8: 'Artist/performer',
    9: 'Conductor',
    10: 'Band/Orchestra',
    11: 'Composer',
    12: 'Lyricist/text writer',
    13: 'Recording Location',
    14: 'During recording',
    15: 'During performance',
    16: 'Movie/video screen capture',
    17: 'A bright coloured fish',
    18: 'Illustration',
    19: 'Band/artist logotype',
    20: 'Publisher/Studio logotype'
};
const LyricsContentType = {
    other: 0,
    lyrics: 1,
    text: 2,
    movement_part: 3,
    events: 4,
    chord: 5,
    trivia_pop: 6
};
const TimestampFormat = {
    notSynchronized0: 0,
    mpegFrameNumber: 1,
    milliseconds: 2
};
const UINT32SYNCSAFE = {
    get: (buf, off)=>{
        return buf[off + 3] & 0x7f | buf[off + 2] << 7 | buf[off + 1] << 14 | buf[off] << 21;
    },
    len: 4
};
const ID3v2Header = {
    len: 10,
    get: (buf, off)=>{
        return {
            // ID3v2/file identifier   "ID3"
            fileIdentifier: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["StringType"](3, 'ascii').get(buf, off),
            // ID3v2 versionIndex
            version: {
                major: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["INT8"].get(buf, off + 3),
                revision: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["INT8"].get(buf, off + 4)
            },
            // ID3v2 flags
            flags: {
                // Unsynchronisation
                unsynchronisation: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getBit"])(buf, off + 5, 7),
                // Extended header
                isExtendedHeader: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getBit"])(buf, off + 5, 6),
                // Experimental indicator
                expIndicator: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getBit"])(buf, off + 5, 5),
                footer: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getBit"])(buf, off + 5, 4)
            },
            size: UINT32SYNCSAFE.get(buf, off + 6)
        };
    }
};
const ExtendedHeader = {
    len: 10,
    get: (buf, off)=>{
        return {
            // Extended header size
            size: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_BE"].get(buf, off),
            // Extended Flags
            extendedFlags: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT16_BE"].get(buf, off + 4),
            // Size of padding
            sizeOfPadding: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_BE"].get(buf, off + 6),
            // CRC data present
            crcDataPresent: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getBit"])(buf, off + 4, 31)
        };
    }
};
const TextEncodingToken = {
    len: 1,
    get: (uint8Array, off)=>{
        switch(uint8Array[off]){
            case 0x00:
                return {
                    encoding: 'latin1'
                }; // binary
            case 0x01:
                return {
                    encoding: 'utf-16le',
                    bom: true
                };
            case 0x02:
                return {
                    encoding: 'utf-16le',
                    bom: false
                };
            case 0x03:
                return {
                    encoding: 'utf8',
                    bom: false
                };
            default:
                return {
                    encoding: 'utf8',
                    bom: false
                };
        }
    }
};
const TextHeader = {
    len: 4,
    get: (uint8Array, off)=>{
        return {
            encoding: TextEncodingToken.get(uint8Array, off),
            language: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["StringType"](3, 'latin1').get(uint8Array, off + 1)
        };
    }
};
const SyncTextHeader = {
    len: 6,
    get: (uint8Array, off)=>{
        const text = TextHeader.get(uint8Array, off);
        return {
            encoding: text.encoding,
            language: text.language,
            timeStampFormat: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT8"].get(uint8Array, off + 4),
            contentType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT8"].get(uint8Array, off + 5)
        };
    }
}; //# sourceMappingURL=ID3v2Token.js.map
}}),
"[project]/node_modules/music-metadata/lib/lrc/LyricsParser.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "parseLrc": (()=>parseLrc)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/id3v2/ID3v2Token.js [app-route] (ecmascript)");
;
function parseLrc(lrcString) {
    const lines = lrcString.split('\n');
    const syncText = [];
    // Regular expression to match LRC timestamps (e.g., [00:45.52])
    const timestampRegex = /\[(\d{2}):(\d{2})\.(\d{2})\]/;
    for (const line of lines){
        const match = line.match(timestampRegex);
        if (match) {
            const minutes = Number.parseInt(match[1], 10);
            const seconds = Number.parseInt(match[2], 10);
            const hundredths = Number.parseInt(match[3], 10);
            // Convert the timestamp to milliseconds, as per TimestampFormat.milliseconds
            const timestamp = (minutes * 60 + seconds) * 1000 + hundredths * 10;
            // Get the text portion of the line (e.g., "ãã®è¶ã¯èªç±ã«ãªããããª")
            const text = line.replace(timestampRegex, '').trim();
            syncText.push({
                timestamp,
                text
            });
        }
    }
    // Creating the ILyricsTag object
    return {
        contentType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["LyricsContentType"].lyrics,
        timeStampFormat: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TimestampFormat"].milliseconds,
        syncText
    };
} //# sourceMappingURL=LyricsParser.js.map
}}),
"[project]/node_modules/music-metadata/lib/common/MetadataCollector.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "MetadataCollector": (()=>MetadataCollector),
    "joinArtists": (()=>joinArtists)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$matroska$2f$types$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/matroska/types.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/debug/src/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagTypes$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/GenericTagTypes.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$CombinedTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/CombinedTagMapper.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/GenericTagMapper.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/Util.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$core$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/file-type/core.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$lrc$2f$LyricsParser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/lrc/LyricsParser.js [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
const debug = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])('music-metadata:collector');
const TagPriority = [
    'matroska',
    'APEv2',
    'vorbis',
    'ID3v2.4',
    'ID3v2.3',
    'ID3v2.2',
    'exif',
    'asf',
    'iTunes',
    'AIFF',
    'ID3v1'
];
class MetadataCollector {
    constructor(opts){
        this.format = {
            tagTypes: [],
            trackInfo: []
        };
        this.native = {};
        this.common = {
            track: {
                no: null,
                of: null
            },
            disk: {
                no: null,
                of: null
            },
            movementIndex: {
                no: null,
                of: null
            }
        };
        this.quality = {
            warnings: []
        };
        /**
         * Keeps track of origin priority for each mapped id
         */ this.commonOrigin = {};
        /**
         * Maps a tag type to a priority
         */ this.originPriority = {};
        this.tagMapper = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$CombinedTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CombinedTagMapper"]();
        this.opts = opts;
        let priority = 1;
        for (const tagType of TagPriority){
            this.originPriority[tagType] = priority++;
        }
        this.originPriority.artificial = 500; // Filled using alternative tags
        this.originPriority.id3v1 = 600; // Consider as the worst because of the field length limit
    }
    /**
     * @returns {boolean} true if one or more tags have been found
     */ hasAny() {
        return Object.keys(this.native).length > 0;
    }
    addStreamInfo(streamInfo) {
        debug(`streamInfo: type=${streamInfo.type ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$matroska$2f$types$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TrackTypeValueToKeyMap"][streamInfo.type] : '?'}, codec=${streamInfo.codecName}`);
        this.format.trackInfo.push(streamInfo);
    }
    setFormat(key, value) {
        debug(`format: ${key} = ${value}`);
        this.format[key] = value; // as any to override readonly
        if (this.opts?.observer) {
            this.opts.observer({
                metadata: this,
                tag: {
                    type: 'format',
                    id: key,
                    value
                }
            });
        }
    }
    async addTag(tagType, tagId, value) {
        debug(`tag ${tagType}.${tagId} = ${value}`);
        if (!this.native[tagType]) {
            this.format.tagTypes.push(tagType);
            this.native[tagType] = [];
        }
        this.native[tagType].push({
            id: tagId,
            value
        });
        await this.toCommon(tagType, tagId, value);
    }
    addWarning(warning) {
        this.quality.warnings.push({
            message: warning
        });
    }
    async postMap(tagType, tag) {
        // Common tag (alias) found
        // check if we need to do something special with common tag
        // if the event has been aliased then we need to clean it before
        // it is emitted to the user. e.g. genre (20) -> Electronic
        switch(tag.id){
            case 'artist':
                if (this.commonOrigin.artist === this.originPriority[tagType]) {
                    // Assume the artist field is used as artists
                    return this.postMap('artificial', {
                        id: 'artists',
                        value: tag.value
                    });
                }
                if (!this.common.artists) {
                    // Fill artists using artist source
                    this.setGenericTag('artificial', {
                        id: 'artists',
                        value: tag.value
                    });
                }
                break;
            case 'artists':
                if (!this.common.artist || this.commonOrigin.artist === this.originPriority.artificial) {
                    if (!this.common.artists || this.common.artists.indexOf(tag.value) === -1) {
                        // Fill artist using artists source
                        const artists = (this.common.artists || []).concat([
                            tag.value
                        ]);
                        const value = joinArtists(artists);
                        const artistTag = {
                            id: 'artist',
                            value
                        };
                        this.setGenericTag('artificial', artistTag);
                    }
                }
                break;
            case 'picture':
                return this.postFixPicture(tag.value).then((picture)=>{
                    if (picture !== null) {
                        tag.value = picture;
                        this.setGenericTag(tagType, tag);
                    }
                });
            case 'totaltracks':
                this.common.track.of = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CommonTagMapper"].toIntOrNull(tag.value);
                return;
            case 'totaldiscs':
                this.common.disk.of = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CommonTagMapper"].toIntOrNull(tag.value);
                return;
            case 'movementTotal':
                this.common.movementIndex.of = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CommonTagMapper"].toIntOrNull(tag.value);
                return;
            case 'track':
            case 'disk':
            case 'movementIndex':
                {
                    const of = this.common[tag.id].of; // store of value, maybe maybe overwritten
                    this.common[tag.id] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagMapper$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CommonTagMapper"].normalizeTrack(tag.value);
                    this.common[tag.id].of = of != null ? of : this.common[tag.id].of;
                    return;
                }
            case 'bpm':
            case 'year':
            case 'originalyear':
                tag.value = Number.parseInt(tag.value, 10);
                break;
            case 'date':
                {
                    // ToDo: be more strict on 'YYYY...'
                    const year = Number.parseInt(tag.value.substr(0, 4), 10);
                    if (!Number.isNaN(year)) {
                        this.common.year = year;
                    }
                    break;
                }
            case 'discogs_label_id':
            case 'discogs_release_id':
            case 'discogs_master_release_id':
            case 'discogs_artist_id':
            case 'discogs_votes':
                tag.value = typeof tag.value === 'string' ? Number.parseInt(tag.value, 10) : tag.value;
                break;
            case 'replaygain_track_gain':
            case 'replaygain_track_peak':
            case 'replaygain_album_gain':
            case 'replaygain_album_peak':
                tag.value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toRatio"])(tag.value);
                break;
            case 'replaygain_track_minmax':
                tag.value = tag.value.split(',').map((v)=>Number.parseInt(v, 10));
                break;
            case 'replaygain_undo':
                {
                    const minMix = tag.value.split(',').map((v)=>Number.parseInt(v, 10));
                    tag.value = {
                        leftChannel: minMix[0],
                        rightChannel: minMix[1]
                    };
                    break;
                }
            case 'gapless':
            case 'compilation':
            case 'podcast':
            case 'showMovement':
                tag.value = tag.value === '1' || tag.value === 1; // boolean
                break;
            case 'isrc':
                {
                    const commonTag = this.common[tag.id];
                    if (commonTag && commonTag.indexOf(tag.value) !== -1) return;
                    break;
                }
            case 'comment':
                if (typeof tag.value === 'string') {
                    tag.value = {
                        text: tag.value
                    };
                }
                if (tag.value.descriptor === 'iTunPGAP') {
                    this.setGenericTag(tagType, {
                        id: 'gapless',
                        value: tag.value.text === '1'
                    });
                }
                break;
            case 'lyrics':
                if (typeof tag.value === 'string') {
                    tag.value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$lrc$2f$LyricsParser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["parseLrc"])(tag.value);
                }
                break;
            default:
        }
        if (tag.value !== null) {
            this.setGenericTag(tagType, tag);
        }
    }
    /**
     * Convert native tags to common tags
     * @returns {IAudioMetadata} Native + common tags
     */ toCommonMetadata() {
        return {
            format: this.format,
            native: this.native,
            quality: this.quality,
            common: this.common
        };
    }
    /**
     * Fix some common issues with picture object
     * @param picture Picture
     */ async postFixPicture(picture) {
        if (picture.data && picture.data.length > 0) {
            if (!picture.format) {
                const fileType = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$core$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["fileTypeFromBuffer"])(Uint8Array.from(picture.data)); // ToDO: remove Buffer
                if (fileType) {
                    picture.format = fileType.mime;
                } else {
                    return null;
                }
            }
            picture.format = picture.format.toLocaleLowerCase();
            switch(picture.format){
                case 'image/jpg':
                    picture.format = 'image/jpeg'; // ToDo: register warning
            }
            return picture;
        }
        this.addWarning("Empty picture tag found");
        return null;
    }
    /**
     * Convert native tag to common tags
     */ async toCommon(tagType, tagId, value) {
        const tag = {
            id: tagId,
            value
        };
        const genericTag = this.tagMapper.mapTag(tagType, tag, this);
        if (genericTag) {
            await this.postMap(tagType, genericTag);
        }
    }
    /**
     * Set generic tag
     */ setGenericTag(tagType, tag) {
        debug(`common.${tag.id} = ${tag.value}`);
        const prio0 = this.commonOrigin[tag.id] || 1000;
        const prio1 = this.originPriority[tagType];
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagTypes$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isSingleton"])(tag.id)) {
            if (prio1 <= prio0) {
                this.common[tag.id] = tag.value;
                this.commonOrigin[tag.id] = prio1;
            } else {
                return debug(`Ignore native tag (singleton): ${tagType}.${tag.id} = ${tag.value}`);
            }
        } else {
            if (prio1 === prio0) {
                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$GenericTagTypes$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isUnique"])(tag.id) || this.common[tag.id].indexOf(tag.value) === -1) {
                    this.common[tag.id].push(tag.value);
                } else {
                    debug(`Ignore duplicate value: ${tagType}.${tag.id} = ${tag.value}`);
                }
            // no effect? this.commonOrigin[tag.id] = prio1;
            } else if (prio1 < prio0) {
                this.common[tag.id] = [
                    tag.value
                ];
                this.commonOrigin[tag.id] = prio1;
            } else {
                return debug(`Ignore native tag (list): ${tagType}.${tag.id} = ${tag.value}`);
            }
        }
        if (this.opts?.observer) {
            this.opts.observer({
                metadata: this,
                tag: {
                    type: 'common',
                    id: tag.id,
                    value: tag.value
                }
            });
        }
    // ToDo: trigger metadata event
    }
}
function joinArtists(artists) {
    if (artists.length > 2) {
        return `${artists.slice(0, artists.length - 1).join(', ')} & ${artists[artists.length - 1]}`;
    }
    return artists.join(' & ');
} //# sourceMappingURL=MetadataCollector.js.map
}}),
"[project]/node_modules/music-metadata/lib/mpeg/MpegLoader.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "mpegParserLoader": (()=>mpegParserLoader)
});
const mpegParserLoader = {
    parserType: 'mpeg',
    extensions: [
        '.mp2',
        '.mp3',
        '.m2a',
        '.aac',
        'aacp'
    ],
    mimeTypes: [
        'audio/mpeg',
        'audio/mp3',
        'audio/aacs',
        'audio/aacp'
    ],
    async load () {
        return (await __turbopack_context__.r("[project]/node_modules/music-metadata/lib/mpeg/MpegParser.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i)).MpegParser;
    }
}; //# sourceMappingURL=MpegLoader.js.map
}}),
"[project]/node_modules/music-metadata/lib/apev2/Apev2Loader.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "apeParserLoader": (()=>apeParserLoader)
});
const apeParserLoader = {
    parserType: 'apev2',
    extensions: [
        '.ape'
    ],
    mimeTypes: [
        'audio/ape',
        'audio/monkeys-audio'
    ],
    async load () {
        return (await __turbopack_context__.r("[project]/node_modules/music-metadata/lib/apev2/APEv2Parser.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i)).APEv2Parser;
    }
}; //# sourceMappingURL=Apev2Loader.js.map
}}),
"[project]/node_modules/music-metadata/lib/asf/AsfLoader.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "asfParserLoader": (()=>asfParserLoader)
});
const asfParserLoader = {
    parserType: 'asf',
    extensions: [
        '.asf'
    ],
    mimeTypes: [
        'audio/ms-wma',
        'video/ms-wmv',
        'audio/ms-asf',
        'video/ms-asf',
        'application/vnd.ms-asf'
    ],
    async load () {
        return (await __turbopack_context__.r("[project]/node_modules/music-metadata/lib/asf/AsfParser.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i)).AsfParser;
    }
}; //# sourceMappingURL=AsfLoader.js.map
}}),
"[project]/node_modules/music-metadata/lib/dsdiff/DsdiffLoader.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "dsdiffParserLoader": (()=>dsdiffParserLoader)
});
const dsdiffParserLoader = {
    parserType: 'dsdiff',
    extensions: [
        '.dff'
    ],
    mimeTypes: [
        'audio/dsf',
        'audio/dsd'
    ],
    async load () {
        return (await __turbopack_context__.r("[project]/node_modules/music-metadata/lib/dsdiff/DsdiffParser.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i)).DsdiffParser;
    }
}; //# sourceMappingURL=DsdiffLoader.js.map
}}),
"[project]/node_modules/music-metadata/lib/aiff/AiffLoader.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "aiffParserLoader": (()=>aiffParserLoader)
});
const aiffParserLoader = {
    parserType: 'aiff',
    extensions: [
        '.aif',
        'aiff',
        'aifc'
    ],
    mimeTypes: [
        'audio/aiff',
        'audio/aif',
        'audio/aifc',
        'application/aiff'
    ],
    async load () {
        return (await __turbopack_context__.r("[project]/node_modules/music-metadata/lib/aiff/AiffParser.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i)).AIFFParser;
    }
}; //# sourceMappingURL=AiffLoader.js.map
}}),
"[project]/node_modules/music-metadata/lib/dsf/DsfLoader.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "dsfParserLoader": (()=>dsfParserLoader)
});
const dsfParserLoader = {
    parserType: 'dsf',
    extensions: [
        '.dsf'
    ],
    mimeTypes: [
        'audio/dsf'
    ],
    async load () {
        return (await __turbopack_context__.r("[project]/node_modules/music-metadata/lib/dsf/DsfParser.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i)).DsfParser;
    }
}; //# sourceMappingURL=DsfLoader.js.map
}}),
"[project]/node_modules/music-metadata/lib/flac/FlacLoader.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "flacParserLoader": (()=>flacParserLoader)
});
const flacParserLoader = {
    parserType: 'flac',
    extensions: [
        '.flac'
    ],
    mimeTypes: [
        'audio/flac'
    ],
    async load () {
        return (await __turbopack_context__.r("[project]/node_modules/music-metadata/lib/flac/FlacParser.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i)).FlacParser;
    }
}; //# sourceMappingURL=FlacLoader.js.map
}}),
"[project]/node_modules/music-metadata/lib/matroska/MatroskaLoader.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "matroskaParserLoader": (()=>matroskaParserLoader)
});
const matroskaParserLoader = {
    parserType: 'matroska',
    extensions: [
        '.mka',
        '.mkv',
        '.mk3d',
        '.mks',
        'webm'
    ],
    mimeTypes: [
        'audio/matroska',
        'video/matroska',
        'audio/webm',
        'video/webm'
    ],
    async load () {
        return (await __turbopack_context__.r("[project]/node_modules/music-metadata/lib/matroska/MatroskaParser.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i)).MatroskaParser;
    }
}; //# sourceMappingURL=MatroskaLoader.js.map
}}),
"[project]/node_modules/music-metadata/lib/mp4/Mp4Loader.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "mp4ParserLoader": (()=>mp4ParserLoader)
});
const mp4ParserLoader = {
    parserType: 'mp4',
    extensions: [
        '.mp4',
        '.m4a',
        '.m4b',
        '.m4pa',
        'm4v',
        'm4r',
        '3gp'
    ],
    mimeTypes: [
        'audio/mp4',
        'audio/m4a',
        'video/m4v',
        'video/mp4'
    ],
    async load () {
        return (await __turbopack_context__.r("[project]/node_modules/music-metadata/lib/mp4/MP4Parser.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i)).MP4Parser;
    }
}; //# sourceMappingURL=Mp4Loader.js.map
}}),
"[project]/node_modules/music-metadata/lib/musepack/MusepackLoader.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "musepackParserLoader": (()=>musepackParserLoader)
});
const musepackParserLoader = {
    parserType: 'musepack',
    extensions: [
        '.mpc'
    ],
    mimeTypes: [
        'audio/musepack'
    ],
    async load () {
        return (await __turbopack_context__.r("[project]/node_modules/music-metadata/lib/musepack/MusepackParser.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i)).MusepackParser;
    }
}; //# sourceMappingURL=MusepackLoader.js.map
}}),
"[project]/node_modules/music-metadata/lib/ogg/OggLoader.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "oggParserLoader": (()=>oggParserLoader)
});
const oggParserLoader = {
    parserType: 'ogg',
    extensions: [
        '.ogg',
        '.ogv',
        '.oga',
        '.ogm',
        '.ogx',
        '.opus',
        '.spx'
    ],
    mimeTypes: [
        'audio/ogg',
        'audio/opus',
        'audio/speex',
        'video/ogg'
    ],
    async load () {
        return (await __turbopack_context__.r("[project]/node_modules/music-metadata/lib/ogg/OggParser.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i)).OggParser;
    }
}; //# sourceMappingURL=OggLoader.js.map
}}),
"[project]/node_modules/music-metadata/lib/wavpack/WavPackLoader.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "wavpackParserLoader": (()=>wavpackParserLoader)
});
const wavpackParserLoader = {
    parserType: 'wavpack',
    extensions: [
        '.wv',
        '.wvp'
    ],
    mimeTypes: [
        'audio/wavpack'
    ],
    async load () {
        return (await __turbopack_context__.r("[project]/node_modules/music-metadata/lib/wavpack/WavPackParser.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i)).WavPackParser;
    }
}; //# sourceMappingURL=WavPackLoader.js.map
}}),
"[project]/node_modules/music-metadata/lib/wav/WaveLoader.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "riffParserLoader": (()=>riffParserLoader)
});
const riffParserLoader = {
    parserType: 'riff',
    extensions: [
        '.wav',
        'wave',
        '.bwf'
    ],
    mimeTypes: [
        'audio/vnd.wave',
        'audio/wav',
        'audio/wave'
    ],
    async load () {
        return (await __turbopack_context__.r("[project]/node_modules/music-metadata/lib/wav/WaveParser.js [app-route] (ecmascript, async loader)")(__turbopack_context__.i)).WaveParser;
    }
}; //# sourceMappingURL=WaveLoader.js.map
}}),
"[project]/node_modules/music-metadata/lib/ParserFactory.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ParserFactory": (()=>ParserFactory),
    "parseHttpContentType": (()=>parseHttpContentType)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$core$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/file-type/core.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$content$2d$type$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/content-type/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$media$2d$typer$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/media-typer/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/debug/src/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$MetadataCollector$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/MetadataCollector.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$mpeg$2f$MpegLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/mpeg/MpegLoader.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/ParseError.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$Apev2Loader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/apev2/Apev2Loader.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$asf$2f$AsfLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/asf/AsfLoader.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$dsdiff$2f$DsdiffLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/dsdiff/DsdiffLoader.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$aiff$2f$AiffLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/aiff/AiffLoader.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$dsf$2f$DsfLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/dsf/DsfLoader.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$flac$2f$FlacLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/flac/FlacLoader.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$matroska$2f$MatroskaLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/matroska/MatroskaLoader.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$mp4$2f$Mp4Loader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/mp4/Mp4Loader.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$musepack$2f$MusepackLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/musepack/MusepackLoader.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ogg$2f$OggLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/ogg/OggLoader.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$wavpack$2f$WavPackLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/wavpack/WavPackLoader.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$wav$2f$WaveLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/wav/WaveLoader.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$core$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/core.js [app-route] (ecmascript) <locals>");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const debug = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])('music-metadata:parser:factory');
function parseHttpContentType(contentType) {
    const type = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$content$2d$type$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].parse(contentType);
    const mime = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$media$2d$typer$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["parse"])(type.type);
    return {
        type: mime.type,
        subtype: mime.subtype,
        suffix: mime.suffix,
        parameters: type.parameters
    };
}
class ParserFactory {
    constructor(){
        this.parsers = [];
        [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$flac$2f$FlacLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["flacParserLoader"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$mpeg$2f$MpegLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["mpegParserLoader"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$Apev2Loader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["apeParserLoader"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$mp4$2f$Mp4Loader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["mp4ParserLoader"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$matroska$2f$MatroskaLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["matroskaParserLoader"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$wav$2f$WaveLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["riffParserLoader"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ogg$2f$OggLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["oggParserLoader"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$asf$2f$AsfLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["asfParserLoader"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$aiff$2f$AiffLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["aiffParserLoader"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$wavpack$2f$WavPackLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["wavpackParserLoader"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$musepack$2f$MusepackLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["musepackParserLoader"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$dsf$2f$DsfLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["dsfParserLoader"],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$dsdiff$2f$DsdiffLoader$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["dsdiffParserLoader"]
        ].forEach((parser)=>this.registerParser(parser));
    }
    registerParser(parser) {
        this.parsers.push(parser);
    }
    async parse(tokenizer, parserLoader, opts) {
        if (tokenizer.supportsRandomAccess()) {
            debug('tokenizer supports random-access, scanning for appending headers');
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$core$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["scanAppendingHeaders"])(tokenizer, opts);
        } else {
            debug('tokenizer does not support random-access, cannot scan for appending headers');
        }
        if (!parserLoader) {
            const buf = new Uint8Array(4100);
            if (tokenizer.fileInfo.mimeType) {
                parserLoader = this.findLoaderForContentType(tokenizer.fileInfo.mimeType);
            }
            if (!parserLoader && tokenizer.fileInfo.path) {
                parserLoader = this.findLoaderForExtension(tokenizer.fileInfo.path);
            }
            if (!parserLoader) {
                // Parser could not be determined on MIME-type or extension
                debug('Guess parser on content...');
                await tokenizer.peekBuffer(buf, {
                    mayBeLess: true
                });
                const guessedType = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$file$2d$type$2f$core$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["fileTypeFromBuffer"])(buf);
                if (!guessedType || !guessedType.mime) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CouldNotDetermineFileTypeError"]('Failed to determine audio format');
                }
                debug(`Guessed file type is mime=${guessedType.mime}, extension=${guessedType.ext}`);
                parserLoader = this.findLoaderForContentType(guessedType.mime);
                if (!parserLoader) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UnsupportedFileTypeError"](`Guessed MIME-type not supported: ${guessedType.mime}`);
                }
            }
        }
        // Parser found, execute parser
        debug(`Loading ${parserLoader.parserType} parser...`);
        const metadata = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$MetadataCollector$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["MetadataCollector"](opts);
        const ParserImpl = await parserLoader.load();
        const parser = new ParserImpl(metadata, tokenizer, opts ?? {});
        debug(`Parser ${parserLoader.parserType} loaded`);
        await parser.parse();
        return metadata.toCommonMetadata();
    }
    /**
     * @param filePath - Path, filename or extension to audio file
     * @return Parser submodule name
     */ findLoaderForExtension(filePath) {
        if (!filePath) return;
        const extension = getExtension(filePath).toLocaleLowerCase() || filePath;
        return this.parsers.find((parser)=>parser.extensions.indexOf(extension) !== -1);
    }
    findLoaderForContentType(httpContentType) {
        let mime;
        if (!httpContentType) return;
        try {
            mime = parseHttpContentType(httpContentType);
        } catch (err) {
            debug(`Invalid HTTP Content-Type header value: ${httpContentType}`);
            return;
        }
        const subType = mime.subtype.indexOf('x-') === 0 ? mime.subtype.substring(2) : mime.subtype;
        return this.parsers.find((parser)=>parser.mimeTypes.find((loader)=>loader.indexOf(`${mime.type}/${subType}`) !== -1));
    }
    getSupportedMimeTypes() {
        const mimeTypeSet = new Set();
        this.parsers.forEach((loader)=>{
            loader.mimeTypes.forEach((mimeType)=>{
                mimeTypeSet.add(mimeType);
                mimeTypeSet.add(mimeType.replace('/', '/x-'));
            });
        });
        return Array.from(mimeTypeSet);
    }
}
function getExtension(fname) {
    const i = fname.lastIndexOf('.');
    return i === -1 ? '' : fname.slice(i);
} //# sourceMappingURL=ParserFactory.js.map
}}),
"[project]/node_modules/music-metadata/lib/common/BasicParser.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BasicParser": (()=>BasicParser)
});
class BasicParser {
    /**
     * Initialize parser with output (metadata), input (tokenizer) & parsing options (options).
     * @param {INativeMetadataCollector} metadata Output
     * @param {ITokenizer} tokenizer Input
     * @param {IOptions} options Parsing options
     */ constructor(metadata, tokenizer, options){
        this.metadata = metadata;
        this.tokenizer = tokenizer;
        this.options = options;
    }
} //# sourceMappingURL=BasicParser.js.map
}}),
"[project]/node_modules/music-metadata/lib/common/FourCC.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "FourCcToken": (()=>FourCcToken)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$extras$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uint8array-extras/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/Util.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/ParseError.js [app-route] (ecmascript)");
;
;
;
const validFourCC = /^[\x21-\x7eÂ©][\x20-\x7e\x00()]{3}/;
const FourCcToken = {
    len: 4,
    get: (buf, off)=>{
        const id = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$extras$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["uint8ArrayToString"])(buf.slice(off, off + FourCcToken.len), 'latin1');
        if (!id.match(validFourCC)) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["FieldDecodingError"](`FourCC contains invalid characters: ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["a2hex"])(id)} "${id}"`);
        }
        return id;
    },
    put: (buffer, offset, id)=>{
        const str = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$extras$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["stringToUint8Array"])(id);
        if (str.length !== 4) throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["InternalParserError"]('Invalid length');
        buffer.set(str, offset);
        return offset + 4;
    }
}; //# sourceMappingURL=FourCC.js.map
}}),
"[project]/node_modules/music-metadata/lib/apev2/APEv2Token.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DataType": (()=>DataType),
    "DescriptorParser": (()=>DescriptorParser),
    "Header": (()=>Header),
    "TagFooter": (()=>TagFooter),
    "TagItemHeader": (()=>TagItemHeader),
    "isBitSet": (()=>isBitSet),
    "parseTagFlags": (()=>parseTagFlags)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/token-types/lib/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$FourCC$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/FourCC.js [app-route] (ecmascript)");
;
;
const DataType = {
    text_utf8: 0,
    binary: 1,
    external_info: 2,
    reserved: 3
};
const DescriptorParser = {
    len: 52,
    get: (buf, off)=>{
        return {
            // should equal 'MAC '
            ID: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$FourCC$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["FourCcToken"].get(buf, off),
            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)
            version: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 4) / 1000,
            // the number of descriptor bytes (allows later expansion of this header)
            descriptorBytes: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 8),
            // the number of header APE_HEADER bytes
            headerBytes: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 12),
            // the number of header APE_HEADER bytes
            seekTableBytes: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 16),
            // the number of header data bytes (from original file)
            headerDataBytes: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 20),
            // the number of bytes of APE frame data
            apeFrameDataBytes: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 24),
            // the high order number of APE frame data bytes
            apeFrameDataBytesHigh: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 28),
            // the terminating data of the file (not including tag data)
            terminatingDataBytes: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 32),
            // the MD5 hash of the file (see notes for usage... it's a little tricky)
            fileMD5: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Uint8ArrayType"](16).get(buf, off + 36)
        };
    }
};
const Header = {
    len: 24,
    get: (buf, off)=>{
        return {
            // the compression level (see defines I.E. COMPRESSION_LEVEL_FAST)
            compressionLevel: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT16_LE"].get(buf, off),
            // any format flags (for future use)
            formatFlags: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT16_LE"].get(buf, off + 2),
            // the number of audio blocks in one frame
            blocksPerFrame: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 4),
            // the number of audio blocks in the final frame
            finalFrameBlocks: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 8),
            // the total number of frames
            totalFrames: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 12),
            // the bits per sample (typically 16)
            bitsPerSample: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT16_LE"].get(buf, off + 16),
            // the number of channels (1 or 2)
            channel: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT16_LE"].get(buf, off + 18),
            // the sample rate (typically 44100)
            sampleRate: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 20)
        };
    }
};
const TagFooter = {
    len: 32,
    get: (buf, off)=>{
        return {
            // should equal 'APETAGEX'
            ID: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["StringType"](8, 'ascii').get(buf, off),
            // equals CURRENT_APE_TAG_VERSION
            version: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 8),
            // the complete size of the tag, including this footer (excludes header)
            size: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 12),
            // the number of fields in the tag
            fields: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 16),
            // reserved for later use (must be zero),
            flags: parseTagFlags(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 20))
        };
    }
};
const TagItemHeader = {
    len: 8,
    get: (buf, off)=>{
        return {
            // Length of assigned value in bytes
            size: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off),
            // reserved for later use (must be zero),
            flags: parseTagFlags(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_LE"].get(buf, off + 4))
        };
    }
};
function parseTagFlags(flags) {
    return {
        containsHeader: isBitSet(flags, 31),
        containsFooter: isBitSet(flags, 30),
        isHeader: isBitSet(flags, 29),
        readOnly: isBitSet(flags, 0),
        dataType: (flags & 6) >> 1
    };
}
function isBitSet(num, bit) {
    return (num & 1 << bit) !== 0;
} //# sourceMappingURL=APEv2Token.js.map
}}),
"[project]/node_modules/music-metadata/lib/apev2/APEv2Parser.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "APEv2Parser": (()=>APEv2Parser),
    "ApeContentError": (()=>ApeContentError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/debug/src/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/strtok3/lib/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/strtok3/lib/core.js [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/token-types/lib/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$extras$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/uint8array-extras/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/Util.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$BasicParser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/BasicParser.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/apev2/APEv2Token.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/ParseError.js [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
const debug = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])('music-metadata:parser:APEv2');
const tagFormat = 'APEv2';
const preamble = 'APETAGEX';
class ApeContentError extends (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["makeUnexpectedFileContentError"])('APEv2') {
}
class APEv2Parser extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$BasicParser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BasicParser"] {
    constructor(){
        super(...arguments);
        this.ape = {};
    }
    static tryParseApeHeader(metadata, tokenizer, options) {
        const apeParser = new APEv2Parser(metadata, tokenizer, options);
        return apeParser.tryParseApeHeader();
    }
    /**
     * Calculate the media file duration
     * @param ah ApeHeader
     * @return {number} duration in seconds
     */ static calculateDuration(ah) {
        let duration = ah.totalFrames > 1 ? ah.blocksPerFrame * (ah.totalFrames - 1) : 0;
        duration += ah.finalFrameBlocks;
        return duration / ah.sampleRate;
    }
    /**
     * Calculates the APEv1 / APEv2 first field offset
     * @param tokenizer
     * @param offset
     */ static async findApeFooterOffset(tokenizer, offset) {
        // Search for APE footer header at the end of the file
        const apeBuf = new Uint8Array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TagFooter"].len);
        const position = tokenizer.position;
        if (offset <= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TagFooter"].len) {
            debug(`Offset is too small to read APE footer: offset=${offset}`);
            return undefined;
        }
        if (offset > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TagFooter"].len) {
            await tokenizer.readBuffer(apeBuf, {
                position: offset - __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TagFooter"].len
            });
            tokenizer.setPosition(position);
            const tagFooter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TagFooter"].get(apeBuf, 0);
            if (tagFooter.ID === 'APETAGEX') {
                if (tagFooter.flags.isHeader) {
                    debug(`APE Header found at offset=${offset - __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TagFooter"].len}`);
                } else {
                    debug(`APE Footer found at offset=${offset - __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TagFooter"].len}`);
                    offset -= tagFooter.size;
                }
                return {
                    footer: tagFooter,
                    offset
                };
            }
        }
    }
    static parseTagFooter(metadata, buffer, options) {
        const footer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TagFooter"].get(buffer, buffer.length - __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TagFooter"].len);
        if (footer.ID !== preamble) throw new ApeContentError('Unexpected APEv2 Footer ID preamble value');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fromBuffer"])(buffer);
        const apeParser = new APEv2Parser(metadata, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fromBuffer"])(buffer), options);
        return apeParser.parseTags(footer);
    }
    /**
     * Parse APEv1 / APEv2 header if header signature found
     */ async tryParseApeHeader() {
        if (this.tokenizer.fileInfo.size && this.tokenizer.fileInfo.size - this.tokenizer.position < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TagFooter"].len) {
            debug("No APEv2 header found, end-of-file reached");
            return;
        }
        const footer = await this.tokenizer.peekToken(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TagFooter"]);
        if (footer.ID === preamble) {
            await this.tokenizer.ignore(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TagFooter"].len);
            return this.parseTags(footer);
        }
        debug(`APEv2 header not found at offset=${this.tokenizer.position}`);
        if (this.tokenizer.fileInfo.size) {
            // Try to read the APEv2 header using just the footer-header
            const remaining = this.tokenizer.fileInfo.size - this.tokenizer.position; // ToDo: take ID3v1 into account
            const buffer = new Uint8Array(remaining);
            await this.tokenizer.readBuffer(buffer);
            return APEv2Parser.parseTagFooter(this.metadata, buffer, this.options);
        }
    }
    async parse() {
        const descriptor = await this.tokenizer.readToken(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DescriptorParser"]);
        if (descriptor.ID !== 'MAC ') throw new ApeContentError('Unexpected descriptor ID');
        this.ape.descriptor = descriptor;
        const lenExp = descriptor.descriptorBytes - __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DescriptorParser"].len;
        const header = await (lenExp > 0 ? this.parseDescriptorExpansion(lenExp) : this.parseHeader());
        await this.tokenizer.ignore(header.forwardBytes);
        return this.tryParseApeHeader();
    }
    async parseTags(footer) {
        const keyBuffer = new Uint8Array(256); // maximum tag key length
        let bytesRemaining = footer.size - __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TagFooter"].len;
        debug(`Parse APE tags at offset=${this.tokenizer.position}, size=${bytesRemaining}`);
        for(let i = 0; i < footer.fields; i++){
            if (bytesRemaining < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TagItemHeader"].len) {
                this.metadata.addWarning(`APEv2 Tag-header: ${footer.fields - i} items remaining, but no more tag data to read.`);
                break;
            }
            // Only APEv2 tag has tag item headers
            const tagItemHeader = await this.tokenizer.readToken(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TagItemHeader"]);
            bytesRemaining -= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TagItemHeader"].len + tagItemHeader.size;
            await this.tokenizer.peekBuffer(keyBuffer, {
                length: Math.min(keyBuffer.length, bytesRemaining)
            });
            let zero = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["findZero"])(keyBuffer, 0, keyBuffer.length);
            const key = await this.tokenizer.readToken(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["StringType"](zero, 'ascii'));
            await this.tokenizer.ignore(1);
            bytesRemaining -= key.length + 1;
            switch(tagItemHeader.flags.dataType){
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DataType"].text_utf8:
                    {
                        const value = await this.tokenizer.readToken(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["StringType"](tagItemHeader.size, 'utf8'));
                        const values = value.split(/\x00/g);
                        await Promise.all(values.map((val)=>this.metadata.addTag(tagFormat, key, val)));
                        break;
                    }
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DataType"].binary:
                    if (this.options.skipCovers) {
                        await this.tokenizer.ignore(tagItemHeader.size);
                    } else {
                        const picData = new Uint8Array(tagItemHeader.size);
                        await this.tokenizer.readBuffer(picData);
                        zero = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["findZero"])(picData, 0, picData.length);
                        const description = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$extras$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["uint8ArrayToString"])(picData.slice(0, zero));
                        const data = picData.slice(zero + 1);
                        await this.metadata.addTag(tagFormat, key, {
                            description,
                            data
                        });
                    }
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DataType"].external_info:
                    debug(`Ignore external info ${key}`);
                    await this.tokenizer.ignore(tagItemHeader.size);
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DataType"].reserved:
                    debug(`Ignore external info ${key}`);
                    this.metadata.addWarning(`APEv2 header declares a reserved datatype for "${key}"`);
                    await this.tokenizer.ignore(tagItemHeader.size);
                    break;
            }
        }
    }
    async parseDescriptorExpansion(lenExp) {
        await this.tokenizer.ignore(lenExp);
        return this.parseHeader();
    }
    async parseHeader() {
        const header = await this.tokenizer.readToken(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Header"]);
        // ToDo before
        this.metadata.setFormat('lossless', true);
        this.metadata.setFormat('container', 'Monkey\'s Audio');
        this.metadata.setFormat('bitsPerSample', header.bitsPerSample);
        this.metadata.setFormat('sampleRate', header.sampleRate);
        this.metadata.setFormat('numberOfChannels', header.channel);
        this.metadata.setFormat('duration', APEv2Parser.calculateDuration(header));
        if (!this.ape.descriptor) {
            throw new ApeContentError('Missing APE descriptor');
        }
        return {
            forwardBytes: this.ape.descriptor.seekTableBytes + this.ape.descriptor.headerDataBytes + this.ape.descriptor.apeFrameDataBytes + this.ape.descriptor.terminatingDataBytes
        };
    }
} //# sourceMappingURL=APEv2Parser.js.map
}}),
"[project]/node_modules/music-metadata/lib/id3v1/ID3v1Parser.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Genres": (()=>Genres),
    "ID3v1Parser": (()=>ID3v1Parser),
    "hasID3v1Header": (()=>hasID3v1Header)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/debug/src/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/token-types/lib/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/Util.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$BasicParser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/BasicParser.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Parser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/apev2/APEv2Parser.js [app-route] (ecmascript)");
;
;
;
;
;
const debug = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])('music-metadata:parser:ID3v1');
const Genres = [
    'Blues',
    'Classic Rock',
    'Country',
    'Dance',
    'Disco',
    'Funk',
    'Grunge',
    'Hip-Hop',
    'Jazz',
    'Metal',
    'New Age',
    'Oldies',
    'Other',
    'Pop',
    'R&B',
    'Rap',
    'Reggae',
    'Rock',
    'Techno',
    'Industrial',
    'Alternative',
    'Ska',
    'Death Metal',
    'Pranks',
    'Soundtrack',
    'Euro-Techno',
    'Ambient',
    'Trip-Hop',
    'Vocal',
    'Jazz+Funk',
    'Fusion',
    'Trance',
    'Classical',
    'Instrumental',
    'Acid',
    'House',
    'Game',
    'Sound Clip',
    'Gospel',
    'Noise',
    'Alt. Rock',
    'Bass',
    'Soul',
    'Punk',
    'Space',
    'Meditative',
    'Instrumental Pop',
    'Instrumental Rock',
    'Ethnic',
    'Gothic',
    'Darkwave',
    'Techno-Industrial',
    'Electronic',
    'Pop-Folk',
    'Eurodance',
    'Dream',
    'Southern Rock',
    'Comedy',
    'Cult',
    'Gangsta Rap',
    'Top 40',
    'Christian Rap',
    'Pop/Funk',
    'Jungle',
    'Native American',
    'Cabaret',
    'New Wave',
    'Psychedelic',
    'Rave',
    'Showtunes',
    'Trailer',
    'Lo-Fi',
    'Tribal',
    'Acid Punk',
    'Acid Jazz',
    'Polka',
    'Retro',
    'Musical',
    'Rock & Roll',
    'Hard Rock',
    'Folk',
    'Folk/Rock',
    'National Folk',
    'Swing',
    'Fast-Fusion',
    'Bebob',
    'Latin',
    'Revival',
    'Celtic',
    'Bluegrass',
    'Avantgarde',
    'Gothic Rock',
    'Progressive Rock',
    'Psychedelic Rock',
    'Symphonic Rock',
    'Slow Rock',
    'Big Band',
    'Chorus',
    'Easy Listening',
    'Acoustic',
    'Humour',
    'Speech',
    'Chanson',
    'Opera',
    'Chamber Music',
    'Sonata',
    'Symphony',
    'Booty Bass',
    'Primus',
    'Porn Groove',
    'Satire',
    'Slow Jam',
    'Club',
    'Tango',
    'Samba',
    'Folklore',
    'Ballad',
    'Power Ballad',
    'Rhythmic Soul',
    'Freestyle',
    'Duet',
    'Punk Rock',
    'Drum Solo',
    'A Cappella',
    'Euro-House',
    'Dance Hall',
    'Goa',
    'Drum & Bass',
    'Club-House',
    'Hardcore',
    'Terror',
    'Indie',
    'BritPop',
    'Negerpunk',
    'Polsk Punk',
    'Beat',
    'Christian Gangsta Rap',
    'Heavy Metal',
    'Black Metal',
    'Crossover',
    'Contemporary Christian',
    'Christian Rock',
    'Merengue',
    'Salsa',
    'Thrash Metal',
    'Anime',
    'JPop',
    'Synthpop',
    'Abstract',
    'Art Rock',
    'Baroque',
    'Bhangra',
    'Big Beat',
    'Breakbeat',
    'Chillout',
    'Downtempo',
    'Dub',
    'EBM',
    'Eclectic',
    'Electro',
    'Electroclash',
    'Emo',
    'Experimental',
    'Garage',
    'Global',
    'IDM',
    'Illbient',
    'Industro-Goth',
    'Jam Band',
    'Krautrock',
    'Leftfield',
    'Lounge',
    'Math Rock',
    'New Romantic',
    'Nu-Breakz',
    'Post-Punk',
    'Post-Rock',
    'Psytrance',
    'Shoegaze',
    'Space Rock',
    'Trop Rock',
    'World Music',
    'Neoclassical',
    'Audiobook',
    'Audio Theatre',
    'Neue Deutsche Welle',
    'Podcast',
    'Indie Rock',
    'G-Funk',
    'Dubstep',
    'Garage Rock',
    'Psybient'
];
/**
 * Spec: http://id3.org/ID3v1
 * Wiki: https://en.wikipedia.org/wiki/ID3
 */ const Iid3v1Token = {
    len: 128,
    /**
     * @param buf Buffer possibly holding the 128 bytes ID3v1.1 metadata header
     * @param off Offset in buffer in bytes
     * @returns ID3v1.1 header if first 3 bytes equals 'TAG', otherwise null is returned
     */ get: (buf, off)=>{
        const header = new Id3v1StringType(3).get(buf, off);
        return header === 'TAG' ? {
            header,
            title: new Id3v1StringType(30).get(buf, off + 3),
            artist: new Id3v1StringType(30).get(buf, off + 33),
            album: new Id3v1StringType(30).get(buf, off + 63),
            year: new Id3v1StringType(4).get(buf, off + 93),
            comment: new Id3v1StringType(28).get(buf, off + 97),
            // ID3v1.1 separator for track
            zeroByte: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT8"].get(buf, off + 127),
            // track: ID3v1.1 field added by Michael Mutschler
            track: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT8"].get(buf, off + 126),
            genre: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT8"].get(buf, off + 127)
        } : null;
    }
};
class Id3v1StringType {
    constructor(len){
        this.len = len;
        this.stringType = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["StringType"](len, 'latin1');
    }
    get(buf, off) {
        let value = this.stringType.get(buf, off);
        value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["trimRightNull"])(value);
        value = value.trim();
        return value.length > 0 ? value : undefined;
    }
}
class ID3v1Parser extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$BasicParser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BasicParser"] {
    constructor(metadata, tokenizer, options){
        super(metadata, tokenizer, options);
        this.apeHeader = options.apeHeader;
    }
    static getGenre(genreIndex) {
        if (genreIndex < Genres.length) {
            return Genres[genreIndex];
        }
        return undefined; // ToDO: generate warning
    }
    async parse() {
        if (!this.tokenizer.fileInfo.size) {
            debug('Skip checking for ID3v1 because the file-size is unknown');
            return;
        }
        if (this.apeHeader) {
            this.tokenizer.ignore(this.apeHeader.offset - this.tokenizer.position);
            const apeParser = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Parser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["APEv2Parser"](this.metadata, this.tokenizer, this.options);
            await apeParser.parseTags(this.apeHeader.footer);
        }
        const offset = this.tokenizer.fileInfo.size - Iid3v1Token.len;
        if (this.tokenizer.position > offset) {
            debug('Already consumed the last 128 bytes');
            return;
        }
        const header = await this.tokenizer.readToken(Iid3v1Token, offset);
        if (header) {
            debug('ID3v1 header found at: pos=%s', this.tokenizer.fileInfo.size - Iid3v1Token.len);
            const props = [
                'title',
                'artist',
                'album',
                'comment',
                'track',
                'year'
            ];
            for (const id of props){
                if (header[id] && header[id] !== '') await this.addTag(id, header[id]);
            }
            const genre = ID3v1Parser.getGenre(header.genre);
            if (genre) await this.addTag('genre', genre);
        } else {
            debug('ID3v1 header not found at: pos=%s', this.tokenizer.fileInfo.size - Iid3v1Token.len);
        }
    }
    async addTag(id, value) {
        await this.metadata.addTag('ID3v1', id, value);
    }
}
async function hasID3v1Header(tokenizer) {
    if (tokenizer.fileInfo.size >= 128) {
        const tag = new Uint8Array(3);
        const position = tokenizer.position;
        await tokenizer.readBuffer(tag, {
            position: tokenizer.fileInfo.size - 128
        });
        tokenizer.setPosition(position); // Restore tokenizer position
        return new TextDecoder('latin1').decode(tag) === 'TAG';
    }
    return false;
} //# sourceMappingURL=ID3v1Parser.js.map
}}),
"[project]/node_modules/music-metadata/lib/lyrics3/Lyrics3.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "endTag2": (()=>endTag2),
    "getLyricsHeaderLength": (()=>getLyricsHeaderLength)
});
const endTag2 = 'LYRICS200';
async function getLyricsHeaderLength(tokenizer) {
    const fileSize = tokenizer.fileInfo.size;
    if (fileSize >= 143) {
        const buf = new Uint8Array(15);
        const position = tokenizer.position;
        await tokenizer.readBuffer(buf, {
            position: fileSize - 143
        });
        tokenizer.setPosition(position); // Restore position
        const txt = new TextDecoder('latin1').decode(buf);
        const tag = txt.slice(6);
        if (tag === endTag2) {
            return Number.parseInt(txt.slice(0, 6), 10) + 15;
        }
    }
    return 0;
} //# sourceMappingURL=Lyrics3.js.map
}}),
"[project]/node_modules/music-metadata/lib/core.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Primary entry point, Node.js specific entry point is MusepackParser.ts
 */ __turbopack_context__.s({
    "getSupportedMimeTypes": (()=>getSupportedMimeTypes),
    "orderTags": (()=>orderTags),
    "parseBlob": (()=>parseBlob),
    "parseBuffer": (()=>parseBuffer),
    "parseFile": (()=>parseFile),
    "parseFromTokenizer": (()=>parseFromTokenizer),
    "parseStream": (()=>parseStream),
    "parseWebStream": (()=>parseWebStream),
    "ratingToStars": (()=>ratingToStars),
    "scanAppendingHeaders": (()=>scanAppendingHeaders),
    "selectCover": (()=>selectCover)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/strtok3/lib/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/strtok3/lib/core.js [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParserFactory$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/ParserFactory.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Parser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/apev2/APEv2Parser.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v1$2f$ID3v1Parser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/id3v1/ID3v1Parser.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$lyrics3$2f$Lyrics3$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/lyrics3/Lyrics3.js [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
async function parseBlob(blob, options = {}) {
    const fileInfo = {
        mimeType: blob.type,
        size: blob.size
    };
    if (blob instanceof File) {
        fileInfo.path = blob.name;
    }
    return parseWebStream(blob.stream(), fileInfo, options);
}
async function parseWebStream(webStream, fileInfo, options = {}) {
    const tokenizer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fromWebStream"])(webStream, {
        fileInfo: typeof fileInfo === 'string' ? {
            mimeType: fileInfo
        } : fileInfo
    });
    try {
        return await parseFromTokenizer(tokenizer, options);
    } finally{
        await tokenizer.close();
    }
}
async function parseBuffer(uint8Array, fileInfo, options = {}) {
    const tokenizer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fromBuffer"])(uint8Array, {
        fileInfo: typeof fileInfo === 'string' ? {
            mimeType: fileInfo
        } : fileInfo
    });
    return parseFromTokenizer(tokenizer, options);
}
function parseFromTokenizer(tokenizer, options) {
    const parserFactory = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParserFactory$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ParserFactory"]();
    return parserFactory.parse(tokenizer, undefined, options);
}
function orderTags(nativeTags) {
    const tags = {};
    for (const { id, value } of nativeTags){
        if (!tags[id]) {
            tags[id] = [];
        }
        tags[id].push(value);
    }
    return tags;
}
function ratingToStars(rating) {
    return rating === undefined ? 0 : 1 + Math.round(rating * 4);
}
function selectCover(pictures) {
    return pictures ? pictures.reduce((acc, cur)=>{
        if (cur.name && cur.name.toLowerCase() in [
            'front',
            'cover',
            'cover (front)'
        ]) return cur;
        return acc;
    }) : null;
}
async function scanAppendingHeaders(tokenizer, options = {}) {
    let apeOffset = tokenizer.fileInfo.size;
    if (await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v1$2f$ID3v1Parser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["hasID3v1Header"])(tokenizer)) {
        apeOffset -= 128;
        const lyricsLen = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$lyrics3$2f$Lyrics3$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getLyricsHeaderLength"])(tokenizer);
        apeOffset -= lyricsLen;
    }
    options.apeHeader = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$apev2$2f$APEv2Parser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["APEv2Parser"].findApeFooterOffset(tokenizer, apeOffset);
}
async function parseFile(filePath, options = {}) {
    throw new Error('This function require a Node engine. To load Web API File objects use parseBlob instead.');
}
async function parseStream(stream, fileInfo, options = {}) {
    throw new Error('This function require a Node engine.');
}
function getSupportedMimeTypes() {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParserFactory$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ParserFactory"]().getSupportedMimeTypes();
} //# sourceMappingURL=core.js.map
}}),

};

//# sourceMappingURL=node_modules_music-metadata_lib_ad4aa819._.js.map