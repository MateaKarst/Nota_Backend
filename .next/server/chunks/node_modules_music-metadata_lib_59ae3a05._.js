module.exports = {

"[project]/node_modules/music-metadata/lib/id3v2/FrameParser.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "FrameParser": (()=>FrameParser),
    "Id3v2ContentError": (()=>Id3v2ContentError),
    "parseGenre": (()=>parseGenre)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/debug/src/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/token-types/lib/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/Util.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/id3v2/ID3v2Token.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v1$2f$ID3v1Parser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/id3v1/ID3v1Parser.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/ParseError.js [app-route] (ecmascript)");
;
;
;
;
;
;
const debug = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])('music-metadata:id3v2:frame-parser');
const defaultEnc = 'latin1'; // latin1 == iso-8859-1;
function parseGenre(origVal) {
    // match everything inside parentheses
    const genres = [];
    let code;
    let word = '';
    for (const c of origVal){
        if (typeof code === 'string') {
            if (c === '(' && code === '') {
                word += '(';
                code = undefined;
            } else if (c === ')') {
                if (word !== '') {
                    genres.push(word);
                    word = '';
                }
                const genre = parseGenreCode(code);
                if (genre) {
                    genres.push(genre);
                }
                code = undefined;
            } else code += c;
        } else if (c === '(') {
            code = '';
        } else {
            word += c;
        }
    }
    if (word) {
        if (genres.length === 0 && word.match(/^\d*$/)) {
            word = parseGenreCode(word);
        }
        if (word) {
            genres.push(word);
        }
    }
    return genres;
}
function parseGenreCode(code) {
    if (code === 'RX') return 'Remix';
    if (code === 'CR') return 'Cover';
    if (code.match(/^\d*$/)) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v1$2f$ID3v1Parser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Genres"][Number.parseInt(code)];
    }
}
class FrameParser {
    /**
     * Create id3v2 frame parser
     * @param major - Major version, e.g. (4) for  id3v2.4
     * @param warningCollector - Used to collect decode issue
     */ constructor(major, warningCollector){
        this.major = major;
        this.warningCollector = warningCollector;
    }
    readData(uint8Array, type, includeCovers) {
        if (uint8Array.length === 0) {
            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);
            return;
        }
        const { encoding, bom } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TextEncodingToken"].get(uint8Array, 0);
        const length = uint8Array.length;
        let offset = 0;
        let output = []; // ToDo
        const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);
        let fzero;
        debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);
        switch(type !== 'TXXX' && type[0] === 'T' ? 'T*' : type){
            case 'T*':
            case 'GRP1':
            case 'IPLS':
            case 'MVIN':
            case 'MVNM':
            case 'PCS':
            case 'PCST':
                {
                    let text;
                    try {
                        text = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(uint8Array.slice(1), encoding).replace(/\x00+$/, '');
                    } catch (error) {
                        if (error instanceof Error) {
                            this.warningCollector.addWarning(`id3v2.${this.major} type=${type} header has invalid string value: ${error.message}`);
                            break;
                        }
                        throw error;
                    }
                    switch(type){
                        case 'TMCL':
                        case 'TIPL':
                        case 'IPLS':
                            output = FrameParser.functionList(this.splitValue(type, text));
                            break;
                        case 'TRK':
                        case 'TRCK':
                        case 'TPOS':
                            output = text;
                            break;
                        case 'TCOM':
                        case 'TEXT':
                        case 'TOLY':
                        case 'TOPE':
                        case 'TPE1':
                        case 'TSRC':
                            // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /
                            output = this.splitValue(type, text);
                            break;
                        case 'TCO':
                        case 'TCON':
                            output = this.splitValue(type, text).map((v)=>parseGenre(v)).reduce((acc, val)=>acc.concat(val), []);
                            break;
                        case 'PCS':
                        case 'PCST':
                            // TODO: Why `default` not results `1` but `''`?
                            output = this.major >= 4 ? this.splitValue(type, text) : [
                                text
                            ];
                            output = Array.isArray(output) && output[0] === '' ? 1 : 0;
                            break;
                        default:
                            output = this.major >= 4 ? this.splitValue(type, text) : [
                                text
                            ];
                    }
                    break;
                }
            case 'TXXX':
                {
                    const idAndData = FrameParser.readIdentifierAndData(uint8Array, offset + 1, length, encoding);
                    const textTag = {
                        description: idAndData.id,
                        text: this.splitValue(type, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(idAndData.data, encoding).replace(/\x00+$/, ''))
                    };
                    output = textTag;
                    break;
                }
            case 'PIC':
            case 'APIC':
                if (includeCovers) {
                    const pic = {};
                    offset += 1;
                    switch(this.major){
                        case 2:
                            pic.format = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(uint8Array.slice(offset, offset + 3), 'latin1'); // 'latin1'; // latin1 == iso-8859-1;
                            offset += 3;
                            break;
                        case 3:
                        case 4:
                            fzero = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["findZero"])(uint8Array, offset, length, defaultEnc);
                            pic.format = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(uint8Array.slice(offset, fzero), defaultEnc);
                            offset = fzero + 1;
                            break;
                        default:
                            throw makeUnexpectedMajorVersionError(this.major);
                    }
                    pic.format = FrameParser.fixPictureMimeType(pic.format);
                    pic.type = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AttachedPictureType"][uint8Array[offset]];
                    offset += 1;
                    fzero = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["findZero"])(uint8Array, offset, length, encoding);
                    pic.description = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(uint8Array.slice(offset, fzero), encoding);
                    offset = fzero + nullTerminatorLength;
                    pic.data = uint8Array.slice(offset, length);
                    output = pic;
                }
                break;
            case 'CNT':
            case 'PCNT':
                output = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_BE"].get(uint8Array, 0);
                break;
            case 'SYLT':
                {
                    const syltHeader = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SyncTextHeader"].get(uint8Array, 0);
                    offset += __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SyncTextHeader"].len;
                    const result = {
                        descriptor: '',
                        language: syltHeader.language,
                        contentType: syltHeader.contentType,
                        timeStampFormat: syltHeader.timeStampFormat,
                        syncText: []
                    };
                    let readSyllables = false;
                    while(offset < length){
                        const nullStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), syltHeader.encoding);
                        offset += nullStr.len;
                        if (readSyllables) {
                            const timestamp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_BE"].get(uint8Array, offset);
                            offset += __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_BE"].len;
                            result.syncText.push({
                                text: nullStr.text,
                                timestamp
                            });
                        } else {
                            result.descriptor = nullStr.text;
                            readSyllables = true;
                        }
                    }
                    output = result;
                    break;
                }
            case 'ULT':
            case 'USLT':
            case 'COM':
            case 'COMM':
                {
                    const textHeader = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TextHeader"].get(uint8Array, offset);
                    offset += __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TextHeader"].len;
                    const descriptorStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);
                    offset += descriptorStr.len;
                    const textStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);
                    const comment = {
                        language: textHeader.language,
                        descriptor: descriptorStr.text,
                        text: textStr.text
                    };
                    output = comment;
                    break;
                }
            case 'UFID':
                {
                    const ufid = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);
                    output = {
                        owner_identifier: ufid.id,
                        identifier: ufid.data
                    };
                    break;
                }
            case 'PRIV':
                {
                    const priv = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);
                    output = {
                        owner_identifier: priv.id,
                        data: priv.data
                    };
                    break;
                }
            case 'POPM':
                {
                    fzero = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["findZero"])(uint8Array, offset, length, defaultEnc);
                    const email = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(uint8Array.slice(offset, fzero), defaultEnc);
                    offset = fzero + 1;
                    const dataLen = length - offset;
                    output = {
                        email,
                        rating: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT8"].get(uint8Array, offset),
                        counter: dataLen >= 5 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_BE"].get(uint8Array, offset + 1) : undefined
                    };
                    break;
                }
            case 'GEOB':
                {
                    fzero = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["findZero"])(uint8Array, offset + 1, length, encoding);
                    const mimeType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(uint8Array.slice(offset + 1, fzero), defaultEnc);
                    offset = fzero + 1;
                    fzero = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["findZero"])(uint8Array, offset, length, encoding);
                    const filename = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(uint8Array.slice(offset, fzero), defaultEnc);
                    offset = fzero + 1;
                    fzero = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["findZero"])(uint8Array, offset, length, encoding);
                    const description = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(uint8Array.slice(offset, fzero), defaultEnc);
                    offset = fzero + 1;
                    const geob = {
                        type: mimeType,
                        filename,
                        description,
                        data: uint8Array.slice(offset, length)
                    };
                    output = geob;
                    break;
                }
            // W-Frames:
            case 'WCOM':
            case 'WCOP':
            case 'WOAF':
            case 'WOAR':
            case 'WOAS':
            case 'WORS':
            case 'WPAY':
            case 'WPUB':
                // Decode URL
                fzero = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["findZero"])(uint8Array, offset + 1, length, encoding);
                output = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(uint8Array.slice(offset, fzero), defaultEnc);
                break;
            case 'WXXX':
                {
                    // Decode URL
                    fzero = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["findZero"])(uint8Array, offset + 1, length, encoding);
                    const description = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(uint8Array.slice(offset + 1, fzero), encoding);
                    offset = fzero + (encoding === 'utf-16le' ? 2 : 1);
                    output = {
                        description,
                        url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(uint8Array.slice(offset, length), defaultEnc)
                    };
                    break;
                }
            case 'WFD':
            case 'WFED':
                output = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(uint8Array.slice(offset + 1, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["findZero"])(uint8Array, offset + 1, length, encoding)), encoding);
                break;
            case 'MCDI':
                {
                    // Music CD identifier
                    output = uint8Array.slice(0, length);
                    break;
                }
            default:
                debug(`Warning: unsupported id3v2-tag-type: ${type}`);
                break;
        }
        return output;
    }
    static readNullTerminatedString(uint8Array, encoding) {
        let offset = encoding.bom ? 2 : 0;
        const zeroIndex = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["findZero"])(uint8Array, offset, uint8Array.length, encoding.encoding);
        const txt = uint8Array.slice(offset, zeroIndex);
        if (encoding.encoding === 'utf-16le') {
            offset = zeroIndex + 2;
        } else {
            offset = zeroIndex + 1;
        }
        return {
            text: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(txt, encoding.encoding),
            len: offset
        };
    }
    static fixPictureMimeType(pictureType) {
        pictureType = pictureType.toLocaleLowerCase();
        switch(pictureType){
            case 'jpg':
                return 'image/jpeg';
            case 'png':
                return 'image/png';
        }
        return pictureType;
    }
    /**
     * Converts TMCL (Musician credits list) or TIPL (Involved people list)
     * @param entries
     */ static functionList(entries) {
        const res = {};
        for(let i = 0; i + 1 < entries.length; i += 2){
            const names = entries[i + 1].split(',');
            res[entries[i]] = res[entries[i]] ? res[entries[i]].concat(names) : names;
        }
        return res;
    }
    /**
     * id3v2.4 defines that multiple T* values are separated by 0x00
     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /
     * @param tag - Tag name
     * @param text - Concatenated tag value
     * @returns Split tag value
     */ splitValue(tag, text) {
        let values;
        if (this.major < 4) {
            values = text.split(/\x00/g);
            if (values.length > 1) {
                this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);
            } else {
                values = text.split(/\//g);
            }
        } else {
            values = text.split(/\x00/g);
        }
        return FrameParser.trimArray(values);
    }
    static trimArray(values) {
        return values.map((value)=>value.replace(/\x00+$/, '').trim());
    }
    static readIdentifierAndData(uint8Array, offset, length, encoding) {
        const fzero = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["findZero"])(uint8Array, offset, length, encoding);
        const id = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decodeString"])(uint8Array.slice(offset, fzero), encoding);
        offset = fzero + FrameParser.getNullTerminatorLength(encoding);
        return {
            id,
            data: uint8Array.slice(offset, length)
        };
    }
    static getNullTerminatorLength(enc) {
        return enc === 'utf-16le' ? 2 : 1;
    }
}
class Id3v2ContentError extends (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["makeUnexpectedFileContentError"])('id3v2') {
}
function makeUnexpectedMajorVersionError(majorVer) {
    throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);
} //# sourceMappingURL=FrameParser.js.map
}}),
"[project]/node_modules/music-metadata/lib/id3v2/ID3v2Parser.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ID3v2Parser": (()=>ID3v2Parser)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/token-types/lib/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/Util.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$FrameParser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/id3v2/FrameParser.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/id3v2/ID3v2Token.js [app-route] (ecmascript)");
;
;
;
;
const asciiDecoder = new TextDecoder('ascii');
class ID3v2Parser {
    constructor(){
        this.tokenizer = undefined;
        this.id3Header = undefined;
        this.metadata = undefined;
        this.headerType = undefined;
        this.options = undefined;
    }
    static removeUnsyncBytes(buffer) {
        let readI = 0;
        let writeI = 0;
        while(readI < buffer.length - 1){
            if (readI !== writeI) {
                buffer[writeI] = buffer[readI];
            }
            readI += buffer[readI] === 0xFF && buffer[readI + 1] === 0 ? 2 : 1;
            writeI++;
        }
        if (readI < buffer.length) {
            buffer[writeI++] = buffer[readI];
        }
        return buffer.slice(0, writeI);
    }
    static getFrameHeaderLength(majorVer) {
        switch(majorVer){
            case 2:
                return 6;
            case 3:
            case 4:
                return 10;
            default:
                throw makeUnexpectedMajorVersionError(majorVer);
        }
    }
    static readFrameFlags(b) {
        return {
            status: {
                tag_alter_preservation: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getBit"])(b, 0, 6),
                file_alter_preservation: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getBit"])(b, 0, 5),
                read_only: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getBit"])(b, 0, 4)
            },
            format: {
                grouping_identity: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getBit"])(b, 1, 7),
                compression: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getBit"])(b, 1, 3),
                encryption: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getBit"])(b, 1, 2),
                unsynchronisation: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getBit"])(b, 1, 1),
                data_length_indicator: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$Util$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getBit"])(b, 1, 0)
            }
        };
    }
    static readFrameData(uint8Array, frameHeader, majorVer, includeCovers, warningCollector) {
        const frameParser = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$FrameParser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["FrameParser"](majorVer, warningCollector);
        switch(majorVer){
            case 2:
                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);
            case 3:
            case 4:
                if (frameHeader.flags?.format.unsynchronisation) {
                    uint8Array = ID3v2Parser.removeUnsyncBytes(uint8Array);
                }
                if (frameHeader.flags?.format.data_length_indicator) {
                    uint8Array = uint8Array.slice(4, uint8Array.length);
                }
                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);
            default:
                throw makeUnexpectedMajorVersionError(majorVer);
        }
    }
    /**
     * Create a combined tag key, of tag & description
     * @param tag e.g.: COM
     * @param description e.g. iTunPGAP
     * @returns string e.g. COM:iTunPGAP
     */ static makeDescriptionTagName(tag, description) {
        return tag + (description ? `:${description}` : '');
    }
    async parse(metadata, tokenizer, options) {
        this.tokenizer = tokenizer;
        this.metadata = metadata;
        this.options = options;
        const id3Header = await this.tokenizer.readToken(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ID3v2Header"]);
        if (id3Header.fileIdentifier !== 'ID3') {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$FrameParser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Id3v2ContentError"]('expected ID3-header file-identifier \'ID3\' was not found');
        }
        this.id3Header = id3Header;
        this.headerType = `ID3v2.${id3Header.version.major}`;
        return id3Header.flags.isExtendedHeader ? this.parseExtendedHeader() : this.parseId3Data(id3Header.size);
    }
    async parseExtendedHeader() {
        const extendedHeader = await this.tokenizer.readToken(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ExtendedHeader"]);
        const dataRemaining = extendedHeader.size - __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ExtendedHeader"].len;
        return dataRemaining > 0 ? this.parseExtendedHeaderData(dataRemaining, extendedHeader.size) : this.parseId3Data(this.id3Header.size - extendedHeader.size);
    }
    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {
        await this.tokenizer.ignore(dataRemaining);
        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);
    }
    async parseId3Data(dataLen) {
        const uint8Array = await this.tokenizer.readToken(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Uint8ArrayType"](dataLen));
        for (const tag of this.parseMetadata(uint8Array)){
            switch(tag.id){
                case 'TXXX':
                    if (tag.value) {
                        await this.handleTag(tag, tag.value.text, ()=>tag.value.description);
                    }
                    break;
                default:
                    await (Array.isArray(tag.value) ? Promise.all(tag.value.map((value)=>this.addTag(tag.id, value))) : this.addTag(tag.id, tag.value));
            }
        }
    }
    async handleTag(tag, values, descriptor, resolveValue = (value)=>value) {
        await Promise.all(values.map((value)=>this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, descriptor(value)), resolveValue(value))));
    }
    async addTag(id, value) {
        await this.metadata.addTag(this.headerType, id, value);
    }
    parseMetadata(data) {
        let offset = 0;
        const tags = [];
        while(true){
            if (offset === data.length) break;
            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);
            if (offset + frameHeaderLength > data.length) {
                this.metadata.addWarning('Illegal ID3v2 tag length');
                break;
            }
            const frameHeaderBytes = data.slice(offset, offset + frameHeaderLength);
            offset += frameHeaderLength;
            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);
            const frameDataBytes = data.slice(offset, offset + frameHeader.length);
            offset += frameHeader.length;
            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);
            if (values) {
                tags.push({
                    id: frameHeader.id,
                    value: values
                });
            }
        }
        return tags;
    }
    readFrameHeader(uint8Array, majorVer) {
        let header;
        switch(majorVer){
            case 2:
                header = {
                    id: asciiDecoder.decode(uint8Array.slice(0, 3)),
                    length: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT24_BE"].get(uint8Array, 3)
                };
                if (!header.id.match(/[A-Z0-9]{3}/g)) {
                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);
                }
                break;
            case 3:
            case 4:
                header = {
                    id: asciiDecoder.decode(uint8Array.slice(0, 4)),
                    length: (majorVer === 4 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Token$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32SYNCSAFE"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_BE"]).get(uint8Array, 4),
                    flags: ID3v2Parser.readFrameFlags(uint8Array.slice(8, 10))
                };
                if (!header.id.match(/[A-Z0-9]{4}/g)) {
                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);
                }
                break;
            default:
                throw makeUnexpectedMajorVersionError(majorVer);
        }
        return header;
    }
}
function makeUnexpectedMajorVersionError(majorVer) {
    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$FrameParser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Id3v2ContentError"](`Unexpected majorVer: ${majorVer}`);
} //# sourceMappingURL=ID3v2Parser.js.map
}}),
"[project]/node_modules/music-metadata/lib/aiff/AiffToken.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AiffContentError": (()=>AiffContentError),
    "Common": (()=>Common),
    "compressionTypes": (()=>compressionTypes)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/token-types/lib/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$FourCC$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/FourCC.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/ParseError.js [app-route] (ecmascript)");
;
;
;
const compressionTypes = {
    NONE: 'not compressed	PCM	Apple Computer',
    sowt: 'PCM (byte swapped)',
    fl32: '32-bit floating point IEEE 32-bit float',
    fl64: '64-bit floating point IEEE 64-bit float	Apple Computer',
    alaw: 'ALaw 2:1	8-bit ITU-T G.711 A-law',
    ulaw: 'µLaw 2:1	8-bit ITU-T G.711 µ-law	Apple Computer',
    ULAW: 'CCITT G.711 u-law 8-bit ITU-T G.711 µ-law',
    ALAW: 'CCITT G.711 A-law 8-bit ITU-T G.711 A-law',
    FL32: 'Float 32	IEEE 32-bit float '
};
class AiffContentError extends (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$ParseError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["makeUnexpectedFileContentError"])('AIFF') {
}
class Common {
    constructor(header, isAifc){
        this.isAifc = isAifc;
        const minimumChunkSize = isAifc ? 22 : 18;
        if (header.chunkSize < minimumChunkSize) throw new AiffContentError(`COMMON CHUNK size should always be at least ${minimumChunkSize}`);
        this.len = header.chunkSize;
    }
    get(buf, off) {
        // see: https://cycling74.com/forums/aiffs-80-bit-sample-rate-value
        const shift = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT16_BE"].get(buf, off + 8) - 16398;
        const baseSampleRate = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT16_BE"].get(buf, off + 8 + 2);
        const res = {
            numChannels: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT16_BE"].get(buf, off),
            numSampleFrames: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_BE"].get(buf, off + 2),
            sampleSize: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT16_BE"].get(buf, off + 6),
            sampleRate: shift < 0 ? baseSampleRate >> Math.abs(shift) : baseSampleRate << shift
        };
        if (this.isAifc) {
            res.compressionType = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$FourCC$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["FourCcToken"].get(buf, off + 18);
            if (this.len > 22) {
                const strLen = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT8"].get(buf, off + 22);
                if (strLen > 0) {
                    const padding = (strLen + 1) % 2;
                    if (23 + strLen + padding === this.len) {
                        res.compressionName = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["StringType"](strLen, 'latin1').get(buf, off + 23);
                    } else {
                        throw new AiffContentError('Illegal pstring length');
                    }
                } else {
                    res.compressionName = undefined;
                }
            }
        } else {
            res.compressionName = 'PCM';
        }
        return res;
    }
} //# sourceMappingURL=AiffToken.js.map
}}),
"[project]/node_modules/music-metadata/lib/iff/index.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Header": (()=>Header)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/token-types/lib/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$FourCC$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/FourCC.js [app-route] (ecmascript)");
;
;
const Header = {
    len: 8,
    get: (buf, off)=>{
        return {
            // Chunk type ID
            chunkID: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$FourCC$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["FourCcToken"].get(buf, off),
            // Chunk size
            chunkSize: Number(BigInt(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UINT32_BE"].get(buf, off + 4)))
        };
    }
}; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/music-metadata/lib/aiff/AiffParser.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AIFFParser": (()=>AIFFParser)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/token-types/lib/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/debug/src/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$strtok3$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/strtok3/lib/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/peek-readable/lib/Errors.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/strtok3/lib/core.js [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Parser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/id3v2/ID3v2Parser.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$FourCC$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/FourCC.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$BasicParser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/common/BasicParser.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$aiff$2f$AiffToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/aiff/AiffToken.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$iff$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/music-metadata/lib/iff/index.js [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
const debug = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])('music-metadata:parser:aiff');
class AIFFParser extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$BasicParser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BasicParser"] {
    constructor(){
        super(...arguments);
        this.isCompressed = null;
    }
    async parse() {
        const header = await this.tokenizer.readToken(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$iff$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Header"]);
        if (header.chunkID !== 'FORM') throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$aiff$2f$AiffToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AiffContentError"]('Invalid Chunk-ID, expected \'FORM\''); // Not AIFF format
        const type = await this.tokenizer.readToken(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$common$2f$FourCC$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["FourCcToken"]);
        switch(type){
            case 'AIFF':
                this.metadata.setFormat('container', type);
                this.isCompressed = false;
                break;
            case 'AIFC':
                this.metadata.setFormat('container', 'AIFF-C');
                this.isCompressed = true;
                break;
            default:
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$aiff$2f$AiffToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AiffContentError"](`Unsupported AIFF type: ${type}`);
        }
        this.metadata.setFormat('lossless', !this.isCompressed);
        try {
            while(!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$iff$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Header"].len){
                debug(`Reading AIFF chunk at offset=${this.tokenizer.position}`);
                const chunkHeader = await this.tokenizer.readToken(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$iff$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Header"]);
                const nextChunk = 2 * Math.round(chunkHeader.chunkSize / 2);
                const bytesRead = await this.readData(chunkHeader);
                await this.tokenizer.ignore(nextChunk - bytesRead);
            }
        } catch (err) {
            if (err instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$peek$2d$readable$2f$lib$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["EndOfStreamError"]) {
                debug("End-of-stream");
            } else {
                throw err;
            }
        }
    }
    async readData(header) {
        switch(header.chunkID){
            case 'COMM':
                {
                    if (this.isCompressed === null) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$aiff$2f$AiffToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AiffContentError"]('Failed to parse AIFF.COMM chunk when compression type is unknown');
                    }
                    const common = await this.tokenizer.readToken(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$aiff$2f$AiffToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Common"](header, this.isCompressed));
                    this.metadata.setFormat('bitsPerSample', common.sampleSize);
                    this.metadata.setFormat('sampleRate', common.sampleRate);
                    this.metadata.setFormat('numberOfChannels', common.numChannels);
                    this.metadata.setFormat('numberOfSamples', common.numSampleFrames);
                    this.metadata.setFormat('duration', common.numSampleFrames / common.sampleRate);
                    if (common.compressionName || common.compressionType) {
                        this.metadata.setFormat('codec', common.compressionName ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$aiff$2f$AiffToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["compressionTypes"][common.compressionType]);
                    }
                    return header.chunkSize;
                }
            case 'ID3 ':
                {
                    const id3_data = await this.tokenizer.readToken(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Uint8ArrayType"](header.chunkSize));
                    const rst = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$strtok3$2f$lib$2f$core$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fromBuffer"])(id3_data);
                    await new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$music$2d$metadata$2f$lib$2f$id3v2$2f$ID3v2Parser$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ID3v2Parser"]().parse(this.metadata, rst, this.options);
                    return header.chunkSize;
                }
            case 'SSND':
                if (this.metadata.format.duration) {
                    this.metadata.setFormat('bitrate', 8 * header.chunkSize / this.metadata.format.duration);
                }
                return 0;
            case 'NAME':
            case 'AUTH':
            case '(c) ':
            case 'ANNO':
                return this.readTextChunk(header);
            default:
                debug(`Ignore chunk id=${header.chunkID}, size=${header.chunkSize}`);
                return 0;
        }
    }
    async readTextChunk(header) {
        const value = await this.tokenizer.readToken(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$token$2d$types$2f$lib$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["StringType"](header.chunkSize, 'ascii'));
        const values = value.split('\0').map((v)=>v.trim()).filter((v)=>v?.length);
        await Promise.all(values.map((v)=>this.metadata.addTag('AIFF', header.chunkID, v)));
        return header.chunkSize;
    }
} //# sourceMappingURL=AiffParser.js.map
}}),

};

//# sourceMappingURL=node_modules_music-metadata_lib_59ae3a05._.js.map