{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/lib/supabase.ts"],"sourcesContent":["// src/lib/supabase.ts\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nexport const supabase = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\n);\r\n\r\nexport const supabaseAdmin = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!\r\n);\r\n"],"names":[],"mappings":"AAAA,sBAAsB;;;;;AACtB;;AAEO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD;AAK5B,MAAM,gBAAgB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,gFAEpC,QAAQ,GAAG,CAAC,yBAAyB","debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/utils/cors.ts"],"sourcesContent":["// src/utils/cors.ts\r\nimport { NextResponse } from 'next/server'\r\n\r\nconst allowedOrigins = [\r\n    // localhost browser\r\n    'http://localhost:3000',\r\n    'http://localhost:3001',\r\n    'http://localhost:3002',\r\n\r\n    // vio n mk network?\r\n    'http://192.168.1.38:3000',\r\n    'http://192.168.1.38:3001',\r\n    'http://192.168.1.38:3002',\r\n\r\n    // app sites\r\n    'https://nota-community.netlify.app',\r\n    'https://nota-backend-delta.vercel.app'\r\n]\r\n\r\nexport function handlePreflight(request: Request): NextResponse {\r\n    const origin = request.headers.get('origin') || '';\r\n    const headers: Record<string, string> = {\r\n        'Access-Control-Allow-Methods': 'GET, PATCH, POST, PUT, OPTIONS',\r\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization, x-refresh-token, x-user-id',\r\n        'Access-Control-Allow-Credentials': 'true',\r\n    };\r\n\r\n    if (allowedOrigins.includes(origin)) {\r\n        headers['Access-Control-Allow-Origin'] = origin;\r\n    }\r\n\r\n    return new NextResponse(null, {\r\n        status: 204,\r\n        headers,\r\n    });\r\n}\r\n\r\nexport function addCorsHeaders(\r\n    request: Request,\r\n    response: NextResponse\r\n): NextResponse {\r\n    const origin = request.headers.get('origin') || ''\r\n    if (allowedOrigins.includes(origin)) {\r\n        response.headers.set('Access-Control-Allow-Origin', origin)\r\n        response.headers.set('Access-Control-Allow-Credentials', 'true')\r\n    }\r\n    return response\r\n}"],"names":[],"mappings":"AAAA,oBAAoB;;;;;AACpB;;AAEA,MAAM,iBAAiB;IACnB,oBAAoB;IACpB;IACA;IACA;IAEA,oBAAoB;IACpB;IACA;IACA;IAEA,YAAY;IACZ;IACA;CACH;AAEM,SAAS,gBAAgB,OAAgB;IAC5C,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;IAChD,MAAM,UAAkC;QACpC,gCAAgC;QAChC,gCAAgC;QAChC,oCAAoC;IACxC;IAEA,IAAI,eAAe,QAAQ,CAAC,SAAS;QACjC,OAAO,CAAC,8BAA8B,GAAG;IAC7C;IAEA,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;QAC1B,QAAQ;QACR;IACJ;AACJ;AAEO,SAAS,eACZ,OAAgB,EAChB,QAAsB;IAEtB,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;IAChD,IAAI,eAAe,QAAQ,CAAC,SAAS;QACjC,SAAS,OAAO,CAAC,GAAG,CAAC,+BAA+B;QACpD,SAAS,OAAO,CAAC,GAAG,CAAC,oCAAoC;IAC7D;IACA,OAAO;AACX","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/src/app/api/auth/register/route.ts"],"sourcesContent":["// src/app/api/auth/register/route.ts\r\nimport { NextResponse } from \"next/server\";\r\nimport { supabaseAdmin } from \"@/lib/supabase\";\r\nimport { addCorsHeaders, handlePreflight } from \"@/utils/cors\";\r\n\r\nexport async function OPTIONS(request: Request) {\r\n    return handlePreflight(request);\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n    console.log(\"‚ö° POST /api/auth/register called\");\r\n\r\n    const {\r\n        email,\r\n        password,\r\n        name,\r\n        avatar,\r\n        profile_description,\r\n    } = await request.json();\r\n\r\n    console.log(\"üì© Received data:\", {\r\n        email,\r\n        name,\r\n        profile_description,\r\n    });\r\n\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(email)) {\r\n        const res = NextResponse.json({ message: \"Invalid email format.\" }, { status: 400 });\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    console.log(\"üõ†Ô∏è Creating user in Supabase Auth...\");\r\n\r\n    const { data: userAuth, error: errorAuth } = await supabaseAdmin.auth.admin.createUser({\r\n        email,\r\n        password,\r\n        email_confirm: true,\r\n    });\r\n\r\n    if (errorAuth || !userAuth.user?.id) {\r\n        console.error(\"‚ùå Error creating auth user:\", errorAuth?.message);\r\n        const res = NextResponse.json(\r\n            { message: \"Failed to create auth user\", error: errorAuth?.message },\r\n            { status: 400 }\r\n        );\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    const userId = userAuth.user.id;\r\n    console.log(\"‚úÖ Auth user created with ID:\", userId);\r\n\r\n    let avatar_url = null;\r\n    try {\r\n        if (avatar) {\r\n            console.log(\"üñºÔ∏è Uploading avatar image to Supabase Storage...\");\r\n\r\n            const base64Data = avatar.split(\",\")[1];\r\n            const buffer = Buffer.from(base64Data, \"base64\");\r\n            const filePath = `avatars/${userId}-${Date.now()}.png`;\r\n\r\n            const { error: uploadError } = await supabaseAdmin.storage\r\n                .from(\"avatars\")\r\n                .upload(filePath, buffer, {\r\n                    contentType: \"image/png\",\r\n                    upsert: true,\r\n                });\r\n\r\n            if (uploadError) throw new Error(uploadError.message);\r\n\r\n            const { data: publicUrlData } = supabaseAdmin.storage\r\n                .from(\"avatars\")\r\n                .getPublicUrl(filePath);\r\n\r\n            avatar_url = publicUrlData.publicUrl;\r\n            console.log(\"‚úÖ Avatar uploaded successfully:\", avatar_url);\r\n        }\r\n    } catch (uploadError) {\r\n        console.error(\"‚ùå Failed to upload avatar:\", uploadError);\r\n        await supabaseAdmin.auth.admin.deleteUser(userId);\r\n        const res = NextResponse.json(\r\n            { message: \"Failed to upload avatar. User deleted to maintain integrity.\" },\r\n            { status: 500 }\r\n        );\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    const { error: insertError } = await supabaseAdmin.from(\"user_details\").insert([\r\n        {\r\n            id: userId,\r\n            email,\r\n            name,\r\n            avatar: avatar_url,\r\n            profile_description,\r\n        },\r\n    ]);\r\n\r\n    if (insertError) {\r\n        console.error(\"‚ùå Error inserting into user_details:\", insertError.message);\r\n        await supabaseAdmin.auth.admin.deleteUser(userId);\r\n        const res = NextResponse.json(\r\n            { message: \"Failed to insert user details. Auth user deleted.\", error: insertError.message },\r\n            { status: 500 }\r\n        );\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    console.log(\"‚úÖ User profile inserted successfully\");\r\n\r\n    // Now, sign in the user to get session tokens\r\n    const { data: signInData, error: signInError } = await supabaseAdmin.auth.signInWithPassword({\r\n        email,\r\n        password,\r\n    });\r\n\r\n    if (signInError || !signInData.session) {\r\n        console.error(\"‚ùå Failed to sign in new user:\", signInError?.message);\r\n        // Optionally delete user to rollback\r\n        await supabaseAdmin.auth.admin.deleteUser(userId);\r\n        const res = NextResponse.json(\r\n            { message: \"Failed to sign in new user\", error: signInError?.message },\r\n            { status: 500 }\r\n        );\r\n        return addCorsHeaders(request, res);\r\n    }\r\n\r\n    const accessToken = signInData.session.access_token;\r\n    const refreshToken = signInData.session.refresh_token;\r\n\r\n    const res = NextResponse.json(\r\n        {\r\n            message: \"User successfully created and logged in\",\r\n            user: {\r\n                id: userId,\r\n                email,\r\n                name,\r\n                access_token: accessToken,\r\n                refresh_token: refreshToken,\r\n            },\r\n        },\r\n        { status: 200 }\r\n    );\r\n\r\n    // Set auth cookies\r\n    res.cookies.set('access_token', accessToken, {\r\n        httpOnly: true,\r\n        sameSite: 'lax',\r\n        secure: true,\r\n        path: '/',\r\n        maxAge: 60 * 60 * 24 * 7, // 7 days\r\n    });\r\n\r\n    res.cookies.set('refresh_token', refreshToken, {\r\n        httpOnly: true,\r\n        sameSite: 'lax',\r\n        secure: true,\r\n        path: '/',\r\n        maxAge: 60 * 60 * 24 * 30, // 30 days\r\n    });\r\n\r\n    return addCorsHeaders(request, res);\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}