{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/node_modules/music-metadata/lib/id3v2/FrameParser.js"],"sourcesContent":["import initDebug from 'debug';\nimport * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { AttachedPictureType, SyncTextHeader, TextEncodingToken, TextHeader } from './ID3v2Token.js';\nimport { Genres } from '../id3v1/ID3v1Parser.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:id3v2:frame-parser');\nconst defaultEnc = 'latin1'; // latin1 == iso-8859-1;\nexport function parseGenre(origVal) {\n    // match everything inside parentheses\n    const genres = [];\n    let code;\n    let word = '';\n    for (const c of origVal) {\n        if (typeof code === 'string') {\n            if (c === '(' && code === '') {\n                word += '(';\n                code = undefined;\n            }\n            else if (c === ')') {\n                if (word !== '') {\n                    genres.push(word);\n                    word = '';\n                }\n                const genre = parseGenreCode(code);\n                if (genre) {\n                    genres.push(genre);\n                }\n                code = undefined;\n            }\n            else\n                code += c;\n        }\n        else if (c === '(') {\n            code = '';\n        }\n        else {\n            word += c;\n        }\n    }\n    if (word) {\n        if (genres.length === 0 && word.match(/^\\d*$/)) {\n            word = parseGenreCode(word);\n        }\n        if (word) {\n            genres.push(word);\n        }\n    }\n    return genres;\n}\nfunction parseGenreCode(code) {\n    if (code === 'RX')\n        return 'Remix';\n    if (code === 'CR')\n        return 'Cover';\n    if (code.match(/^\\d*$/)) {\n        return Genres[Number.parseInt(code)];\n    }\n}\nexport class FrameParser {\n    /**\n     * Create id3v2 frame parser\n     * @param major - Major version, e.g. (4) for  id3v2.4\n     * @param warningCollector - Used to collect decode issue\n     */\n    constructor(major, warningCollector) {\n        this.major = major;\n        this.warningCollector = warningCollector;\n    }\n    readData(uint8Array, type, includeCovers) {\n        if (uint8Array.length === 0) {\n            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);\n            return;\n        }\n        const { encoding, bom } = TextEncodingToken.get(uint8Array, 0);\n        const length = uint8Array.length;\n        let offset = 0;\n        let output = []; // ToDo\n        const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\n        let fzero;\n        debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);\n        switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\n            case 'T*': // 4.2.1. Text information frames - details\n            case 'GRP1': // iTunes-specific ID3v2 grouping field\n            case 'IPLS': // v2.3: Involved people list\n            case 'MVIN':\n            case 'MVNM':\n            case 'PCS':\n            case 'PCST': {\n                let text;\n                try {\n                    text = util.decodeString(uint8Array.slice(1), encoding).replace(/\\x00+$/, '');\n                }\n                catch (error) {\n                    if (error instanceof Error) {\n                        this.warningCollector.addWarning(`id3v2.${this.major} type=${type} header has invalid string value: ${error.message}`);\n                        break;\n                    }\n                    throw error;\n                }\n                switch (type) {\n                    case 'TMCL': // Musician credits list\n                    case 'TIPL': // Involved people list\n                    case 'IPLS': // Involved people list\n                        output = FrameParser.functionList(this.splitValue(type, text));\n                        break;\n                    case 'TRK':\n                    case 'TRCK':\n                    case 'TPOS':\n                        output = text;\n                        break;\n                    case 'TCOM':\n                    case 'TEXT':\n                    case 'TOLY':\n                    case 'TOPE':\n                    case 'TPE1':\n                    case 'TSRC':\n                        // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n                        output = this.splitValue(type, text);\n                        break;\n                    case 'TCO':\n                    case 'TCON':\n                        output = this.splitValue(type, text).map(v => parseGenre(v)).reduce((acc, val) => acc.concat(val), []);\n                        break;\n                    case 'PCS':\n                    case 'PCST':\n                        // TODO: Why `default` not results `1` but `''`?\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                        output = (Array.isArray(output) && output[0] === '') ? 1 : 0;\n                        break;\n                    default:\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                }\n                break;\n            }\n            case 'TXXX': {\n                const idAndData = FrameParser.readIdentifierAndData(uint8Array, offset + 1, length, encoding);\n                const textTag = {\n                    description: idAndData.id,\n                    text: this.splitValue(type, util.decodeString(idAndData.data, encoding).replace(/\\x00+$/, ''))\n                };\n                output = textTag;\n                break;\n            }\n            case 'PIC':\n            case 'APIC':\n                if (includeCovers) {\n                    const pic = {};\n                    offset += 1;\n                    switch (this.major) {\n                        case 2:\n                            pic.format = util.decodeString(uint8Array.slice(offset, offset + 3), 'latin1'); // 'latin1'; // latin1 == iso-8859-1;\n                            offset += 3;\n                            break;\n                        case 3:\n                        case 4:\n                            fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                            pic.format = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                            offset = fzero + 1;\n                            break;\n                        default:\n                            throw makeUnexpectedMajorVersionError(this.major);\n                    }\n                    pic.format = FrameParser.fixPictureMimeType(pic.format);\n                    pic.type = AttachedPictureType[uint8Array[offset]];\n                    offset += 1;\n                    fzero = util.findZero(uint8Array, offset, length, encoding);\n                    pic.description = util.decodeString(uint8Array.slice(offset, fzero), encoding);\n                    offset = fzero + nullTerminatorLength;\n                    pic.data = uint8Array.slice(offset, length);\n                    output = pic;\n                }\n                break;\n            case 'CNT':\n            case 'PCNT':\n                output = Token.UINT32_BE.get(uint8Array, 0);\n                break;\n            case 'SYLT': {\n                const syltHeader = SyncTextHeader.get(uint8Array, 0);\n                offset += SyncTextHeader.len;\n                const result = {\n                    descriptor: '',\n                    language: syltHeader.language,\n                    contentType: syltHeader.contentType,\n                    timeStampFormat: syltHeader.timeStampFormat,\n                    syncText: []\n                };\n                let readSyllables = false;\n                while (offset < length) {\n                    const nullStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), syltHeader.encoding);\n                    offset += nullStr.len;\n                    if (readSyllables) {\n                        const timestamp = Token.UINT32_BE.get(uint8Array, offset);\n                        offset += Token.UINT32_BE.len;\n                        result.syncText.push({\n                            text: nullStr.text,\n                            timestamp\n                        });\n                    }\n                    else {\n                        result.descriptor = nullStr.text;\n                        readSyllables = true;\n                    }\n                }\n                output = result;\n                break;\n            }\n            case 'ULT':\n            case 'USLT':\n            case 'COM':\n            case 'COMM': {\n                const textHeader = TextHeader.get(uint8Array, offset);\n                offset += TextHeader.len;\n                const descriptorStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);\n                offset += descriptorStr.len;\n                const textStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);\n                const comment = {\n                    language: textHeader.language,\n                    descriptor: descriptorStr.text,\n                    text: textStr.text\n                };\n                output = comment;\n                break;\n            }\n            case 'UFID': {\n                const ufid = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: ufid.id, identifier: ufid.data };\n                break;\n            }\n            case 'PRIV': { // private frame\n                const priv = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: priv.id, data: priv.data };\n                break;\n            }\n            case 'POPM': { // Popularimeter\n                fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                const email = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const dataLen = length - offset;\n                output = {\n                    email,\n                    rating: Token.UINT8.get(uint8Array, offset),\n                    counter: dataLen >= 5 ? Token.UINT32_BE.get(uint8Array, offset + 1) : undefined\n                };\n                break;\n            }\n            case 'GEOB': { // General encapsulated object\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const mimeType = util.decodeString(uint8Array.slice(offset + 1, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length, encoding);\n                const filename = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length, encoding);\n                const description = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const geob = {\n                    type: mimeType,\n                    filename,\n                    description,\n                    data: uint8Array.slice(offset, length)\n                };\n                output = geob;\n                break;\n            }\n            // W-Frames:\n            case 'WCOM':\n            case 'WCOP':\n            case 'WOAF':\n            case 'WOAR':\n            case 'WOAS':\n            case 'WORS':\n            case 'WPAY':\n            case 'WPUB':\n                // Decode URL\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                output = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                break;\n            case 'WXXX': {\n                // Decode URL\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const description = util.decodeString(uint8Array.slice(offset + 1, fzero), encoding);\n                offset = fzero + (encoding === 'utf-16le' ? 2 : 1);\n                output = { description, url: util.decodeString(uint8Array.slice(offset, length), defaultEnc) };\n                break;\n            }\n            case 'WFD':\n            case 'WFED':\n                output = util.decodeString(uint8Array.slice(offset + 1, util.findZero(uint8Array, offset + 1, length, encoding)), encoding);\n                break;\n            case 'MCDI': {\n                // Music CD identifier\n                output = uint8Array.slice(0, length);\n                break;\n            }\n            default:\n                debug(`Warning: unsupported id3v2-tag-type: ${type}`);\n                break;\n        }\n        return output;\n    }\n    static readNullTerminatedString(uint8Array, encoding) {\n        let offset = encoding.bom ? 2 : 0;\n        const zeroIndex = util.findZero(uint8Array, offset, uint8Array.length, encoding.encoding);\n        const txt = uint8Array.slice(offset, zeroIndex);\n        if (encoding.encoding === 'utf-16le') {\n            offset = zeroIndex + 2;\n        }\n        else {\n            offset = zeroIndex + 1;\n        }\n        return {\n            text: util.decodeString(txt, encoding.encoding),\n            len: offset\n        };\n    }\n    static fixPictureMimeType(pictureType) {\n        pictureType = pictureType.toLocaleLowerCase();\n        switch (pictureType) {\n            case 'jpg':\n                return 'image/jpeg';\n            case 'png':\n                return 'image/png';\n        }\n        return pictureType;\n    }\n    /**\n     * Converts TMCL (Musician credits list) or TIPL (Involved people list)\n     * @param entries\n     */\n    static functionList(entries) {\n        const res = {};\n        for (let i = 0; i + 1 < entries.length; i += 2) {\n            const names = entries[i + 1].split(',');\n            res[entries[i]] = res[entries[i]] ? res[entries[i]].concat(names) : names;\n        }\n        return res;\n    }\n    /**\n     * id3v2.4 defines that multiple T* values are separated by 0x00\n     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n     * @param tag - Tag name\n     * @param text - Concatenated tag value\n     * @returns Split tag value\n     */\n    splitValue(tag, text) {\n        let values;\n        if (this.major < 4) {\n            values = text.split(/\\x00/g);\n            if (values.length > 1) {\n                this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);\n            }\n            else {\n                values = text.split(/\\//g);\n            }\n        }\n        else {\n            values = text.split(/\\x00/g);\n        }\n        return FrameParser.trimArray(values);\n    }\n    static trimArray(values) {\n        return values.map(value => value.replace(/\\x00+$/, '').trim());\n    }\n    static readIdentifierAndData(uint8Array, offset, length, encoding) {\n        const fzero = util.findZero(uint8Array, offset, length, encoding);\n        const id = util.decodeString(uint8Array.slice(offset, fzero), encoding);\n        offset = fzero + FrameParser.getNullTerminatorLength(encoding);\n        return { id, data: uint8Array.slice(offset, length) };\n    }\n    static getNullTerminatorLength(enc) {\n        return enc === 'utf-16le' ? 2 : 1;\n    }\n}\nexport class Id3v2ContentError extends makeUnexpectedFileContentError('id3v2') {\n}\nfunction makeUnexpectedMajorVersionError(majorVer) {\n    throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);\n}\n//# sourceMappingURL=FrameParser.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/node_modules/music-metadata/lib/id3v2/ID3v2Parser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { FrameParser, Id3v2ContentError } from './FrameParser.js';\nimport { ExtendedHeader, ID3v2Header, UINT32SYNCSAFE } from './ID3v2Token.js';\nconst asciiDecoder = new TextDecoder('ascii');\nexport class ID3v2Parser {\n    constructor() {\n        this.tokenizer = undefined;\n        this.id3Header = undefined;\n        this.metadata = undefined;\n        this.headerType = undefined;\n        this.options = undefined;\n    }\n    static removeUnsyncBytes(buffer) {\n        let readI = 0;\n        let writeI = 0;\n        while (readI < buffer.length - 1) {\n            if (readI !== writeI) {\n                buffer[writeI] = buffer[readI];\n            }\n            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;\n            writeI++;\n        }\n        if (readI < buffer.length) {\n            buffer[writeI++] = buffer[readI];\n        }\n        return buffer.slice(0, writeI);\n    }\n    static getFrameHeaderLength(majorVer) {\n        switch (majorVer) {\n            case 2:\n                return 6;\n            case 3:\n            case 4:\n                return 10;\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n    }\n    static readFrameFlags(b) {\n        return {\n            status: {\n                tag_alter_preservation: util.getBit(b, 0, 6),\n                file_alter_preservation: util.getBit(b, 0, 5),\n                read_only: util.getBit(b, 0, 4)\n            },\n            format: {\n                grouping_identity: util.getBit(b, 1, 7),\n                compression: util.getBit(b, 1, 3),\n                encryption: util.getBit(b, 1, 2),\n                unsynchronisation: util.getBit(b, 1, 1),\n                data_length_indicator: util.getBit(b, 1, 0)\n            }\n        };\n    }\n    static readFrameData(uint8Array, frameHeader, majorVer, includeCovers, warningCollector) {\n        const frameParser = new FrameParser(majorVer, warningCollector);\n        switch (majorVer) {\n            case 2:\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            case 3:\n            case 4:\n                if (frameHeader.flags?.format.unsynchronisation) {\n                    uint8Array = ID3v2Parser.removeUnsyncBytes(uint8Array);\n                }\n                if (frameHeader.flags?.format.data_length_indicator) {\n                    uint8Array = uint8Array.slice(4, uint8Array.length);\n                }\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n    }\n    /**\n     * Create a combined tag key, of tag & description\n     * @param tag e.g.: COM\n     * @param description e.g. iTunPGAP\n     * @returns string e.g. COM:iTunPGAP\n     */\n    static makeDescriptionTagName(tag, description) {\n        return tag + (description ? `:${description}` : '');\n    }\n    async parse(metadata, tokenizer, options) {\n        this.tokenizer = tokenizer;\n        this.metadata = metadata;\n        this.options = options;\n        const id3Header = await this.tokenizer.readToken(ID3v2Header);\n        if (id3Header.fileIdentifier !== 'ID3') {\n            throw new Id3v2ContentError('expected ID3-header file-identifier \\'ID3\\' was not found');\n        }\n        this.id3Header = id3Header;\n        this.headerType = (`ID3v2.${id3Header.version.major}`);\n        return id3Header.flags.isExtendedHeader ? this.parseExtendedHeader() : this.parseId3Data(id3Header.size);\n    }\n    async parseExtendedHeader() {\n        const extendedHeader = await this.tokenizer.readToken(ExtendedHeader);\n        const dataRemaining = extendedHeader.size - ExtendedHeader.len;\n        return dataRemaining > 0 ? this.parseExtendedHeaderData(dataRemaining, extendedHeader.size) : this.parseId3Data(this.id3Header.size - extendedHeader.size);\n    }\n    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\n        await this.tokenizer.ignore(dataRemaining);\n        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\n    }\n    async parseId3Data(dataLen) {\n        const uint8Array = await this.tokenizer.readToken(new Token.Uint8ArrayType(dataLen));\n        for (const tag of this.parseMetadata(uint8Array)) {\n            switch (tag.id) {\n                case 'TXXX':\n                    if (tag.value) {\n                        await this.handleTag(tag, tag.value.text, () => tag.value.description);\n                    }\n                    break;\n                default:\n                    await (Array.isArray(tag.value) ? Promise.all(tag.value.map(value => this.addTag(tag.id, value))) : this.addTag(tag.id, tag.value));\n            }\n        }\n    }\n    async handleTag(tag, values, descriptor, resolveValue = value => value) {\n        await Promise.all(values.map(value => this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, descriptor(value)), resolveValue(value))));\n    }\n    async addTag(id, value) {\n        await this.metadata.addTag(this.headerType, id, value);\n    }\n    parseMetadata(data) {\n        let offset = 0;\n        const tags = [];\n        while (true) {\n            if (offset === data.length)\n                break;\n            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\n            if (offset + frameHeaderLength > data.length) {\n                this.metadata.addWarning('Illegal ID3v2 tag length');\n                break;\n            }\n            const frameHeaderBytes = data.slice(offset, offset + frameHeaderLength);\n            offset += frameHeaderLength;\n            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\n            const frameDataBytes = data.slice(offset, offset + frameHeader.length);\n            offset += frameHeader.length;\n            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\n            if (values) {\n                tags.push({ id: frameHeader.id, value: values });\n            }\n        }\n        return tags;\n    }\n    readFrameHeader(uint8Array, majorVer) {\n        let header;\n        switch (majorVer) {\n            case 2:\n                header = {\n                    id: asciiDecoder.decode(uint8Array.slice(0, 3)),\n                    length: Token.UINT24_BE.get(uint8Array, 3)\n                };\n                if (!header.id.match(/[A-Z0-9]{3}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            case 3:\n            case 4:\n                header = {\n                    id: asciiDecoder.decode(uint8Array.slice(0, 4)),\n                    length: (majorVer === 4 ? UINT32SYNCSAFE : Token.UINT32_BE).get(uint8Array, 4),\n                    flags: ID3v2Parser.readFrameFlags(uint8Array.slice(8, 10))\n                };\n                if (!header.id.match(/[A-Z0-9]{4}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n        return header;\n    }\n}\nfunction makeUnexpectedMajorVersionError(majorVer) {\n    throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);\n}\n//# sourceMappingURL=ID3v2Parser.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 606, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/node_modules/music-metadata/lib/dsdiff/DsdiffToken.js"],"sourcesContent":["import * as Token from 'token-types';\nimport { FourCcToken } from '../common/FourCC.js';\n/**\n * DSDIFF chunk header\n * The data-size encoding is deviating from EA-IFF 85\n * Ref: http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\n */\nexport const ChunkHeader64 = {\n    len: 12,\n    get: (buf, off) => {\n        return {\n            // Group-ID\n            chunkID: FourCcToken.get(buf, off),\n            // Size\n            chunkSize: Token.INT64_BE.get(buf, off + 4)\n        };\n    }\n};\n//# sourceMappingURL=DsdiffToken.js.map"],"names":[],"mappings":";;;AAAA;AACA;;;AAMO,MAAM,gBAAgB;IACzB,KAAK;IACL,KAAK,CAAC,KAAK;QACP,OAAO;YACH,WAAW;YACX,SAAS,8JAAA,CAAA,cAAW,CAAC,GAAG,CAAC,KAAK;YAC9B,OAAO;YACP,WAAW,gJAAA,CAAA,WAAc,CAAC,GAAG,CAAC,KAAK,MAAM;QAC7C;IACJ;AACJ,GACA,uCAAuC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 630, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/node_modules/music-metadata/lib/dsdiff/DsdiffParser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport initDebug from 'debug';\nimport * as strtok3 from 'strtok3';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { ID3v2Parser } from '../id3v2/ID3v2Parser.js';\nimport { ChunkHeader64 } from './DsdiffToken.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:aiff');\nexport class DsdiffContentParseError extends makeUnexpectedFileContentError('DSDIFF') {\n}\n/**\n * DSDIFF - Direct Stream Digital Interchange File Format (Phillips)\n *\n * Ref:\n * - http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\n */\nexport class DsdiffParser extends BasicParser {\n    async parse() {\n        const header = await this.tokenizer.readToken(ChunkHeader64);\n        if (header.chunkID !== 'FRM8')\n            throw new DsdiffContentParseError('Unexpected chunk-ID');\n        const type = (await this.tokenizer.readToken(FourCcToken)).trim();\n        switch (type) {\n            case 'DSD':\n                this.metadata.setFormat('container', `DSDIFF/${type}`);\n                this.metadata.setFormat('lossless', true);\n                return this.readFmt8Chunks(header.chunkSize - BigInt(FourCcToken.len));\n            default:\n                throw new DsdiffContentParseError(`Unsupported DSDIFF type: ${type}`);\n        }\n    }\n    async readFmt8Chunks(remainingSize) {\n        while (remainingSize >= ChunkHeader64.len) {\n            const chunkHeader = await this.tokenizer.readToken(ChunkHeader64);\n            //  If the data is an odd number of bytes in length, a pad byte must be added at the end\n            debug(`Chunk id=${chunkHeader.chunkID}`);\n            await this.readData(chunkHeader);\n            remainingSize -= (BigInt(ChunkHeader64.len) + chunkHeader.chunkSize);\n        }\n    }\n    async readData(header) {\n        debug(`Reading data of chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\n        const p0 = this.tokenizer.position;\n        switch (header.chunkID.trim()) {\n            case 'FVER': { // 3.1 FORMAT VERSION CHUNK\n                const version = await this.tokenizer.readToken(Token.UINT32_LE);\n                debug(`DSDIFF version=${version}`);\n                break;\n            }\n            case 'PROP': { // 3.2 PROPERTY CHUNK\n                const propType = await this.tokenizer.readToken(FourCcToken);\n                if (propType !== 'SND ')\n                    throw new DsdiffContentParseError('Unexpected PROP-chunk ID');\n                await this.handleSoundPropertyChunks(header.chunkSize - BigInt(FourCcToken.len));\n                break;\n            }\n            case 'ID3': { // Unofficial ID3 tag support\n                const id3_data = await this.tokenizer.readToken(new Token.Uint8ArrayType(Number(header.chunkSize)));\n                const rst = strtok3.fromBuffer(id3_data);\n                await new ID3v2Parser().parse(this.metadata, rst, this.options);\n                break;\n            }\n            case 'DSD':\n                if (this.metadata.format.numberOfChannels) {\n                    this.metadata.setFormat('numberOfSamples', Number(header.chunkSize * BigInt(8) / BigInt(this.metadata.format.numberOfChannels)));\n                }\n                if (this.metadata.format.numberOfSamples && this.metadata.format.sampleRate) {\n                    this.metadata.setFormat('duration', this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);\n                }\n                break;\n            default:\n                debug(`Ignore chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\n                break;\n        }\n        const remaining = header.chunkSize - BigInt(this.tokenizer.position - p0);\n        if (remaining > 0) {\n            debug(`After Parsing chunk, remaining ${remaining} bytes`);\n            await this.tokenizer.ignore(Number(remaining));\n        }\n    }\n    async handleSoundPropertyChunks(remainingSize) {\n        debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\n        while (remainingSize > 0) {\n            const sndPropHeader = await this.tokenizer.readToken(ChunkHeader64);\n            debug(`Sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\n            const p0 = this.tokenizer.position;\n            switch (sndPropHeader.chunkID.trim()) {\n                case 'FS': { // 3.2.1 Sample Rate Chunk\n                    const sampleRate = await this.tokenizer.readToken(Token.UINT32_BE);\n                    this.metadata.setFormat('sampleRate', sampleRate);\n                    break;\n                }\n                case 'CHNL': { // 3.2.2 Channels Chunk\n                    const numChannels = await this.tokenizer.readToken(Token.UINT16_BE);\n                    this.metadata.setFormat('numberOfChannels', numChannels);\n                    await this.handleChannelChunks(sndPropHeader.chunkSize - BigInt(Token.UINT16_BE.len));\n                    break;\n                }\n                case 'CMPR': { // 3.2.3 Compression Type Chunk\n                    const compressionIdCode = (await this.tokenizer.readToken(FourCcToken)).trim();\n                    const count = await this.tokenizer.readToken(Token.UINT8);\n                    const compressionName = await this.tokenizer.readToken(new Token.StringType(count, 'ascii'));\n                    if (compressionIdCode === 'DSD') {\n                        this.metadata.setFormat('lossless', true);\n                        this.metadata.setFormat('bitsPerSample', 1);\n                    }\n                    this.metadata.setFormat('codec', `${compressionIdCode} (${compressionName})`);\n                    break;\n                }\n                case 'ABSS': { // 3.2.4 Absolute Start Time Chunk\n                    const hours = await this.tokenizer.readToken(Token.UINT16_BE);\n                    const minutes = await this.tokenizer.readToken(Token.UINT8);\n                    const seconds = await this.tokenizer.readToken(Token.UINT8);\n                    const samples = await this.tokenizer.readToken(Token.UINT32_BE);\n                    debug(`ABSS ${hours}:${minutes}:${seconds}.${samples}`);\n                    break;\n                }\n                case 'LSCO': { // 3.2.5 Loudspeaker Configuration Chunk\n                    const lsConfig = await this.tokenizer.readToken(Token.UINT16_BE);\n                    debug(`LSCO lsConfig=${lsConfig}`);\n                    break;\n                }\n                default:\n                    debug(`Unknown sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\n                    await this.tokenizer.ignore(Number(sndPropHeader.chunkSize));\n            }\n            const remaining = sndPropHeader.chunkSize - BigInt(this.tokenizer.position - p0);\n            if (remaining > 0) {\n                debug(`After Parsing sound-property-chunk ${sndPropHeader.chunkSize}, remaining ${remaining} bytes`);\n                await this.tokenizer.ignore(Number(remaining));\n            }\n            remainingSize -= BigInt(ChunkHeader64.len) + sndPropHeader.chunkSize;\n            debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\n        }\n        if (this.metadata.format.lossless && this.metadata.format.sampleRate && this.metadata.format.numberOfChannels && this.metadata.format.bitsPerSample) {\n            const bitrate = this.metadata.format.sampleRate * this.metadata.format.numberOfChannels * this.metadata.format.bitsPerSample;\n            this.metadata.setFormat('bitrate', bitrate);\n        }\n    }\n    async handleChannelChunks(remainingSize) {\n        debug(`Parsing channel-chunks, remainingSize=${remainingSize}`);\n        const channels = [];\n        while (remainingSize >= FourCcToken.len) {\n            const channelId = await this.tokenizer.readToken(FourCcToken);\n            debug(`Channel[ID=${channelId}]`);\n            channels.push(channelId);\n            remainingSize -= BigInt(FourCcToken.len);\n        }\n        debug(`Channels: ${channels.join(', ')}`);\n        return channels;\n    }\n}\n//# sourceMappingURL=DsdiffParser.js.map"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AACA,MAAM,QAAQ,CAAA,GAAA,uIAAA,CAAA,UAAS,AAAD,EAAE;AACjB,MAAM,gCAAgC,CAAA,GAAA,wJAAA,CAAA,iCAA8B,AAAD,EAAE;AAC5E;AAOO,MAAM,qBAAqB,mKAAA,CAAA,cAAW;IACzC,MAAM,QAAQ;QACV,MAAM,SAAS,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,mKAAA,CAAA,gBAAa;QAC3D,IAAI,OAAO,OAAO,KAAK,QACnB,MAAM,IAAI,wBAAwB;QACtC,MAAM,OAAO,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,8JAAA,CAAA,cAAW,CAAC,EAAE,IAAI;QAC/D,OAAQ;YACJ,KAAK;gBACD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM;gBACrD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY;gBACpC,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,SAAS,GAAG,OAAO,8JAAA,CAAA,cAAW,CAAC,GAAG;YACxE;gBACI,MAAM,IAAI,wBAAwB,CAAC,yBAAyB,EAAE,MAAM;QAC5E;IACJ;IACA,MAAM,eAAe,aAAa,EAAE;QAChC,MAAO,iBAAiB,mKAAA,CAAA,gBAAa,CAAC,GAAG,CAAE;YACvC,MAAM,cAAc,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,mKAAA,CAAA,gBAAa;YAChE,wFAAwF;YACxF,MAAM,CAAC,SAAS,EAAE,YAAY,OAAO,EAAE;YACvC,MAAM,IAAI,CAAC,QAAQ,CAAC;YACpB,iBAAkB,OAAO,mKAAA,CAAA,gBAAa,CAAC,GAAG,IAAI,YAAY,SAAS;QACvE;IACJ;IACA,MAAM,SAAS,MAAM,EAAE;QACnB,MAAM,CAAC,yBAAyB,EAAE,OAAO,OAAO,CAAC,OAAO,EAAE,OAAO,SAAS,CAAC,CAAC,CAAC;QAC7E,MAAM,KAAK,IAAI,CAAC,SAAS,CAAC,QAAQ;QAClC,OAAQ,OAAO,OAAO,CAAC,IAAI;YACvB,KAAK;gBAAQ;oBACT,MAAM,UAAU,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,gJAAA,CAAA,YAAe;oBAC9D,MAAM,CAAC,eAAe,EAAE,SAAS;oBACjC;gBACJ;YACA,KAAK;gBAAQ;oBACT,MAAM,WAAW,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,8JAAA,CAAA,cAAW;oBAC3D,IAAI,aAAa,QACb,MAAM,IAAI,wBAAwB;oBACtC,MAAM,IAAI,CAAC,yBAAyB,CAAC,OAAO,SAAS,GAAG,OAAO,8JAAA,CAAA,cAAW,CAAC,GAAG;oBAC9E;gBACJ;YACA,KAAK;gBAAO;oBACR,MAAM,WAAW,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,gJAAA,CAAA,iBAAoB,CAAC,OAAO,OAAO,SAAS;oBAChG,MAAM,MAAM,CAAA,GAAA,wJAAA,CAAA,aAAkB,AAAD,EAAE;oBAC/B,MAAM,IAAI,kKAAA,CAAA,cAAW,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,OAAO;oBAC9D;gBACJ;YACA,KAAK;gBACD,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE;oBACvC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,mBAAmB,OAAO,OAAO,SAAS,GAAG,OAAO,KAAK,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB;gBACjI;gBACA,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,eAAe,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE;oBACzE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU;gBAC9G;gBACA;YACJ;gBACI,MAAM,CAAC,gBAAgB,EAAE,OAAO,OAAO,CAAC,OAAO,EAAE,OAAO,SAAS,CAAC,CAAC,CAAC;gBACpE;QACR;QACA,MAAM,YAAY,OAAO,SAAS,GAAG,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG;QACtE,IAAI,YAAY,GAAG;YACf,MAAM,CAAC,+BAA+B,EAAE,UAAU,MAAM,CAAC;YACzD,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO;QACvC;IACJ;IACA,MAAM,0BAA0B,aAAa,EAAE;QAC3C,MAAM,CAAC,6CAA6C,EAAE,eAAe;QACrE,MAAO,gBAAgB,EAAG;YACtB,MAAM,gBAAgB,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,mKAAA,CAAA,gBAAa;YAClE,MAAM,CAAC,wBAAwB,EAAE,cAAc,OAAO,CAAC,OAAO,EAAE,cAAc,SAAS,CAAC,CAAC,CAAC;YAC1F,MAAM,KAAK,IAAI,CAAC,SAAS,CAAC,QAAQ;YAClC,OAAQ,cAAc,OAAO,CAAC,IAAI;gBAC9B,KAAK;oBAAM;wBACP,MAAM,aAAa,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,gJAAA,CAAA,YAAe;wBACjE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc;wBACtC;oBACJ;gBACA,KAAK;oBAAQ;wBACT,MAAM,cAAc,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,gJAAA,CAAA,YAAe;wBAClE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,oBAAoB;wBAC5C,MAAM,IAAI,CAAC,mBAAmB,CAAC,cAAc,SAAS,GAAG,OAAO,gJAAA,CAAA,YAAe,CAAC,GAAG;wBACnF;oBACJ;gBACA,KAAK;oBAAQ;wBACT,MAAM,oBAAoB,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,8JAAA,CAAA,cAAW,CAAC,EAAE,IAAI;wBAC5E,MAAM,QAAQ,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,gJAAA,CAAA,QAAW;wBACxD,MAAM,kBAAkB,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,gJAAA,CAAA,aAAgB,CAAC,OAAO;wBACnF,IAAI,sBAAsB,OAAO;4BAC7B,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY;4BACpC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,iBAAiB;wBAC7C;wBACA,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,GAAG,kBAAkB,EAAE,EAAE,gBAAgB,CAAC,CAAC;wBAC5E;oBACJ;gBACA,KAAK;oBAAQ;wBACT,MAAM,QAAQ,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,gJAAA,CAAA,YAAe;wBAC5D,MAAM,UAAU,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,gJAAA,CAAA,QAAW;wBAC1D,MAAM,UAAU,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,gJAAA,CAAA,QAAW;wBAC1D,MAAM,UAAU,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,gJAAA,CAAA,YAAe;wBAC9D,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,QAAQ,CAAC,EAAE,QAAQ,CAAC,EAAE,SAAS;wBACtD;oBACJ;gBACA,KAAK;oBAAQ;wBACT,MAAM,WAAW,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,gJAAA,CAAA,YAAe;wBAC/D,MAAM,CAAC,cAAc,EAAE,UAAU;wBACjC;oBACJ;gBACA;oBACI,MAAM,CAAC,gCAAgC,EAAE,cAAc,OAAO,CAAC,OAAO,EAAE,cAAc,SAAS,CAAC,CAAC,CAAC;oBAClG,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,cAAc,SAAS;YAClE;YACA,MAAM,YAAY,cAAc,SAAS,GAAG,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG;YAC7E,IAAI,YAAY,GAAG;gBACf,MAAM,CAAC,mCAAmC,EAAE,cAAc,SAAS,CAAC,YAAY,EAAE,UAAU,MAAM,CAAC;gBACnG,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO;YACvC;YACA,iBAAiB,OAAO,mKAAA,CAAA,gBAAa,CAAC,GAAG,IAAI,cAAc,SAAS;YACpE,MAAM,CAAC,6CAA6C,EAAE,eAAe;QACzE;QACA,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,EAAE;YACjJ,MAAM,UAAU,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa;YAC5H,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW;QACvC;IACJ;IACA,MAAM,oBAAoB,aAAa,EAAE;QACrC,MAAM,CAAC,sCAAsC,EAAE,eAAe;QAC9D,MAAM,WAAW,EAAE;QACnB,MAAO,iBAAiB,8JAAA,CAAA,cAAW,CAAC,GAAG,CAAE;YACrC,MAAM,YAAY,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,8JAAA,CAAA,cAAW;YAC5D,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAChC,SAAS,IAAI,CAAC;YACd,iBAAiB,OAAO,8JAAA,CAAA,cAAW,CAAC,GAAG;QAC3C;QACA,MAAM,CAAC,UAAU,EAAE,SAAS,IAAI,CAAC,OAAO;QACxC,OAAO;IACX;AACJ,EACA,wCAAwC","ignoreList":[0],"debugId":null}}]
}