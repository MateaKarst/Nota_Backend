{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/node_modules/music-metadata/lib/mp4/AtomToken.js"],"sourcesContent":["import * as Token from 'token-types';\nimport initDebug from 'debug';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:MP4:atom');\nexport class Mp4ContentError extends makeUnexpectedFileContentError('MP4') {\n}\nexport const Header = {\n    len: 8,\n    get: (buf, off) => {\n        const length = Token.UINT32_BE.get(buf, off);\n        if (length < 0)\n            throw new Mp4ContentError('Invalid atom header length');\n        return {\n            length: BigInt(length),\n            name: new Token.StringType(4, 'latin1').get(buf, off + 4)\n        };\n    },\n    put: (buf, off, hdr) => {\n        Token.UINT32_BE.put(buf, off, Number(hdr.length));\n        return FourCcToken.put(buf, off + 4, hdr.name);\n    }\n};\n/**\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap1/qtff1.html#//apple_ref/doc/uid/TP40000939-CH203-38190\n */\nexport const ExtendedSize = Token.UINT64_BE;\nexport const ftyp = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            type: new Token.StringType(4, 'ascii').get(buf, off)\n        };\n    }\n};\nexport const tkhd = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            type: new Token.StringType(4, 'ascii').get(buf, off)\n        };\n    }\n};\n/**\n * Token: Movie Header Atom\n */\nexport const mhdr = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            nextItemID: Token.UINT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Base class for 'fixed' length atoms.\n * In some cases these atoms are longer then the sum of the described fields.\n * Issue: https://github.com/Borewit/music-metadata/issues/120\n */\nexport class FixedLengthAtom {\n    /**\n     *\n     * @param {number} len Length as specified in the size field\n     * @param {number} expLen Total length of sum of specified fields in the standard\n     * @param atomId Atom ID\n     */\n    constructor(len, expLen, atomId) {\n        if (len < expLen) {\n            throw new Mp4ContentError(`Atom ${atomId} expected to be ${expLen}, but specifies ${len} bytes long.`);\n        }\n        if (len > expLen) {\n            debug(`Warning: atom ${atomId} expected to be ${expLen}, but was actually ${len} bytes long.`);\n        }\n        this.len = len;\n    }\n}\n/**\n * Timestamp stored in seconds since Mac Epoch (1 January 1904)\n */\nconst SecondsSinceMacEpoch = {\n    len: 4,\n    get: (buf, off) => {\n        const secondsSinceUnixEpoch = Token.UINT32_BE.get(buf, off) - 2082844800;\n        return new Date(secondsSinceUnixEpoch * 1000);\n    }\n};\n/**\n * Token: Media Header Atom\n * Ref:\n * - https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-SW34\n * - https://wiki.multimedia.cx/index.php/QuickTime_container#mdhd\n */\nexport class MdhdAtom extends FixedLengthAtom {\n    constructor(len) {\n        super(len, 24, 'mdhd');\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off + 0),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            timeScale: Token.UINT32_BE.get(buf, off + 12),\n            duration: Token.UINT32_BE.get(buf, off + 16),\n            language: Token.UINT16_BE.get(buf, off + 20),\n            quality: Token.UINT16_BE.get(buf, off + 22)\n        };\n    }\n}\n/**\n * Token: Movie Header Atom\n */\nexport class MvhdAtom extends FixedLengthAtom {\n    constructor(len) {\n        super(len, 100, 'mvhd');\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            timeScale: Token.UINT32_BE.get(buf, off + 12),\n            duration: Token.UINT32_BE.get(buf, off + 16),\n            preferredRate: Token.UINT32_BE.get(buf, off + 20),\n            preferredVolume: Token.UINT16_BE.get(buf, off + 24),\n            // ignore reserver: 10 bytes\n            // ignore matrix structure: 36 bytes\n            previewTime: Token.UINT32_BE.get(buf, off + 72),\n            previewDuration: Token.UINT32_BE.get(buf, off + 76),\n            posterTime: Token.UINT32_BE.get(buf, off + 80),\n            selectionTime: Token.UINT32_BE.get(buf, off + 84),\n            selectionDuration: Token.UINT32_BE.get(buf, off + 88),\n            currentTime: Token.UINT32_BE.get(buf, off + 92),\n            nextTrackID: Token.UINT32_BE.get(buf, off + 96)\n        };\n    }\n}\n/**\n * Data Atom Structure\n */\nexport class DataAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            type: {\n                set: Token.UINT8.get(buf, off + 0),\n                type: Token.UINT24_BE.get(buf, off + 1)\n            },\n            locale: Token.UINT24_BE.get(buf, off + 4),\n            value: new Token.Uint8ArrayType(this.len - 8).get(buf, off + 8)\n        };\n    }\n}\n/**\n * Data Atom Structure\n * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW31\n */\nexport class NameAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            name: new Token.StringType(this.len - 4, 'utf-8').get(buf, off + 4)\n        };\n    }\n}\n/**\n * Track Header Atoms structure\n * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25550\n */\nexport class TrackHeaderAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            trackId: Token.UINT32_BE.get(buf, off + 12),\n            // reserved 4 bytes\n            duration: Token.UINT32_BE.get(buf, off + 20),\n            layer: Token.UINT16_BE.get(buf, off + 24),\n            alternateGroup: Token.UINT16_BE.get(buf, off + 26),\n            volume: Token.UINT16_BE.get(buf, off + 28) // ToDo: fixed point\n            // ToDo: add remaining fields\n        };\n    }\n}\n/**\n * Atom: Sample Description Atom ('stsd')\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\n */\nconst stsdHeader = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            version: Token.UINT8.get(buf, off),\n            flags: Token.UINT24_BE.get(buf, off + 1),\n            numberOfEntries: Token.UINT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Atom: Sample Description Atom ('stsd')\n * Ref: https://developer.apple.com/documentation/quicktime-file-format/sample_description_atom\n */\nclass SampleDescriptionTable {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const descrLen = this.len - 12;\n        return {\n            dataFormat: FourCcToken.get(buf, off),\n            dataReferenceIndex: Token.UINT16_BE.get(buf, off + 10),\n            description: descrLen > 0 ? new Token.Uint8ArrayType(descrLen).get(buf, off + 12) : undefined\n        };\n    }\n}\n/**\n * Atom: Sample-description Atom ('stsd')\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\n */\nexport class StsdAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const header = stsdHeader.get(buf, off);\n        off += stsdHeader.len;\n        const table = [];\n        for (let n = 0; n < header.numberOfEntries; ++n) {\n            const size = Token.UINT32_BE.get(buf, off); // Sample description size\n            off += Token.UINT32_BE.len;\n            table.push(new SampleDescriptionTable(size - Token.UINT32_BE.len).get(buf, off));\n            off += size;\n        }\n        return {\n            header,\n            table\n        };\n    }\n}\n/**\n * Common Sound Sample Description (version & revision)\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-57317\n */\nexport const SoundSampleDescriptionVersion = {\n    len: 8,\n    get(buf, off) {\n        return {\n            version: Token.INT16_BE.get(buf, off),\n            revision: Token.INT16_BE.get(buf, off + 2),\n            vendor: Token.INT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Sound Sample Description (Version 0)\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-130736\n */\nexport const SoundSampleDescriptionV0 = {\n    len: 12,\n    get(buf, off) {\n        return {\n            numAudioChannels: Token.INT16_BE.get(buf, off + 0),\n            sampleSize: Token.INT16_BE.get(buf, off + 2),\n            compressionId: Token.INT16_BE.get(buf, off + 4),\n            packetSize: Token.INT16_BE.get(buf, off + 6),\n            sampleRate: Token.UINT16_BE.get(buf, off + 8) + Token.UINT16_BE.get(buf, off + 10) / 10000\n        };\n    }\n};\nclass SimpleTableAtom {\n    constructor(len, token) {\n        this.len = len;\n        this.token = token;\n    }\n    get(buf, off) {\n        const nrOfEntries = Token.INT32_BE.get(buf, off + 4);\n        return {\n            version: Token.INT8.get(buf, off + 0),\n            flags: Token.INT24_BE.get(buf, off + 1),\n            numberOfEntries: nrOfEntries,\n            entries: readTokenTable(buf, this.token, off + 8, this.len - 8, nrOfEntries)\n        };\n    }\n}\nexport const TimeToSampleToken = {\n    len: 8,\n    get(buf, off) {\n        return {\n            count: Token.INT32_BE.get(buf, off + 0),\n            duration: Token.INT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Time-to-sample('stts') atom.\n * Store duration information for a media’s samples.\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25696\n */\nexport class SttsAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, TimeToSampleToken);\n    }\n}\nexport const SampleToChunkToken = {\n    len: 12,\n    get(buf, off) {\n        return {\n            firstChunk: Token.INT32_BE.get(buf, off),\n            samplesPerChunk: Token.INT32_BE.get(buf, off + 4),\n            sampleDescriptionId: Token.INT32_BE.get(buf, off + 8)\n        };\n    }\n};\n/**\n * Sample-to-Chunk ('stsc') atom interface\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25706\n */\nexport class StscAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, SampleToChunkToken);\n    }\n}\n/**\n * Sample-size ('stsz') atom\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25710\n */\nexport class StszAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const nrOfEntries = Token.INT32_BE.get(buf, off + 8);\n        return {\n            version: Token.INT8.get(buf, off),\n            flags: Token.INT24_BE.get(buf, off + 1),\n            sampleSize: Token.INT32_BE.get(buf, off + 4),\n            numberOfEntries: nrOfEntries,\n            entries: readTokenTable(buf, Token.INT32_BE, off + 12, this.len - 12, nrOfEntries)\n        };\n    }\n}\n/**\n * Chunk offset atom, 'stco'\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25715\n */\nexport class StcoAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, Token.INT32_BE);\n        this.len = len;\n    }\n}\n/**\n * Token used to decode text-track from 'mdat' atom (raw data stream)\n */\nexport class ChapterText {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const titleLen = Token.INT16_BE.get(buf, off + 0);\n        const str = new Token.StringType(titleLen, 'utf-8');\n        return str.get(buf, off + 2);\n    }\n}\nfunction readTokenTable(buf, token, off, remainingLen, numberOfEntries) {\n    debug(`remainingLen=${remainingLen}, numberOfEntries=${numberOfEntries} * token-len=${token.len}`);\n    if (remainingLen === 0)\n        return [];\n    if (remainingLen !== numberOfEntries * token.len)\n        throw new Mp4ContentError('mismatch number-of-entries with remaining atom-length');\n    const entries = [];\n    // parse offset-table\n    for (let n = 0; n < numberOfEntries; ++n) {\n        entries.push(token.get(buf, off));\n        off += token.len;\n    }\n    return entries;\n}\n//# sourceMappingURL=AtomToken.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 362, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/node_modules/music-metadata/lib/mp4/Atom.js"],"sourcesContent":["import initDebug from 'debug';\nimport * as AtomToken from './AtomToken.js';\nimport { Header } from './AtomToken.js';\nconst debug = initDebug('music-metadata:parser:MP4:Atom');\nexport class Atom {\n    static async readAtom(tokenizer, dataHandler, parent, remaining) {\n        // Parse atom header\n        const offset = tokenizer.position;\n        debug(`Reading next token on offset=${offset}...`); //  buf.toString('ascii')\n        const header = await tokenizer.readToken(AtomToken.Header);\n        const extended = header.length === 1n;\n        if (extended) {\n            header.length = await tokenizer.readToken(AtomToken.ExtendedSize);\n        }\n        const atomBean = new Atom(header, extended, parent);\n        const payloadLength = atomBean.getPayloadLength(remaining);\n        debug(`parse atom name=${atomBean.atomPath}, extended=${atomBean.extended}, offset=${offset}, len=${atomBean.header.length}`); //  buf.toString('ascii')\n        await atomBean.readData(tokenizer, dataHandler, payloadLength);\n        return atomBean;\n    }\n    constructor(header, extended, parent) {\n        this.header = header;\n        this.extended = extended;\n        this.parent = parent;\n        this.children = [];\n        this.atomPath = (this.parent ? `${this.parent.atomPath}.` : '') + this.header.name;\n    }\n    getHeaderLength() {\n        return this.extended ? 16 : 8;\n    }\n    getPayloadLength(remaining) {\n        return (this.header.length === 0n ? remaining : Number(this.header.length)) - this.getHeaderLength();\n    }\n    async readAtoms(tokenizer, dataHandler, size) {\n        while (size > 0) {\n            const atomBean = await Atom.readAtom(tokenizer, dataHandler, this, size);\n            this.children.push(atomBean);\n            size -= atomBean.header.length === 0n ? size : Number(atomBean.header.length);\n        }\n    }\n    async readData(tokenizer, dataHandler, remaining) {\n        switch (this.header.name) {\n            // \"Container\" atoms, contains nested atoms\n            case 'moov': // The Movie Atom: contains other atoms\n            case 'udta': // User defined atom\n            case 'trak':\n            case 'mdia': // Media atom\n            case 'minf': // Media Information Atom\n            case 'stbl': // The Sample Table Atom\n            case '<id>':\n            case 'ilst':\n            case 'tref':\n                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining));\n            case 'meta': { // Metadata Atom, ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8\n                // meta has 4 bytes of padding, ignore\n                const peekHeader = await tokenizer.peekToken(Header);\n                const paddingLength = peekHeader.name === 'hdlr' ? 0 : 4;\n                await tokenizer.ignore(paddingLength);\n                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining) - paddingLength);\n            }\n            default:\n                return dataHandler(this, remaining);\n        }\n    }\n}\n//# sourceMappingURL=Atom.js.map"],"names":[],"mappings":";;;AAAA;AACA;;;;AAEA,MAAM,QAAQ,CAAA,GAAA,uIAAA,CAAA,UAAS,AAAD,EAAE;AACjB,MAAM;IACT,aAAa,SAAS,SAAS,EAAE,WAAW,EAAE,MAAM,EAAE,SAAS,EAAE;QAC7D,oBAAoB;QACpB,MAAM,SAAS,UAAU,QAAQ;QACjC,MAAM,CAAC,6BAA6B,EAAE,OAAO,GAAG,CAAC,GAAG,yBAAyB;QAC7E,MAAM,SAAS,MAAM,UAAU,SAAS,CAAC,8JAAA,CAAA,SAAgB;QACzD,MAAM,WAAW,OAAO,MAAM,KAAK,EAAE;QACrC,IAAI,UAAU;YACV,OAAO,MAAM,GAAG,MAAM,UAAU,SAAS,CAAC,8JAAA,CAAA,eAAsB;QACpE;QACA,MAAM,WAAW,IAAI,KAAK,QAAQ,UAAU;QAC5C,MAAM,gBAAgB,SAAS,gBAAgB,CAAC;QAChD,MAAM,CAAC,gBAAgB,EAAE,SAAS,QAAQ,CAAC,WAAW,EAAE,SAAS,QAAQ,CAAC,SAAS,EAAE,OAAO,MAAM,EAAE,SAAS,MAAM,CAAC,MAAM,EAAE,GAAG,yBAAyB;QACxJ,MAAM,SAAS,QAAQ,CAAC,WAAW,aAAa;QAChD,OAAO;IACX;IACA,YAAY,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAE;QAClC,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,QAAQ,GAAG,EAAE;QAClB,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI;IACtF;IACA,kBAAkB;QACd,OAAO,IAAI,CAAC,QAAQ,GAAG,KAAK;IAChC;IACA,iBAAiB,SAAS,EAAE;QACxB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,EAAE,GAAG,YAAY,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,eAAe;IACtG;IACA,MAAM,UAAU,SAAS,EAAE,WAAW,EAAE,IAAI,EAAE;QAC1C,MAAO,OAAO,EAAG;YACb,MAAM,WAAW,MAAM,KAAK,QAAQ,CAAC,WAAW,aAAa,IAAI,EAAE;YACnE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YACnB,QAAQ,SAAS,MAAM,CAAC,MAAM,KAAK,EAAE,GAAG,OAAO,OAAO,SAAS,MAAM,CAAC,MAAM;QAChF;IACJ;IACA,MAAM,SAAS,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE;QAC9C,OAAQ,IAAI,CAAC,MAAM,CAAC,IAAI;YACpB,2CAA2C;YAC3C,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;gBACD,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,aAAa,IAAI,CAAC,gBAAgB,CAAC;YACxE,KAAK;gBAAQ;oBACT,sCAAsC;oBACtC,MAAM,aAAa,MAAM,UAAU,SAAS,CAAC,8JAAA,CAAA,SAAM;oBACnD,MAAM,gBAAgB,WAAW,IAAI,KAAK,SAAS,IAAI;oBACvD,MAAM,UAAU,MAAM,CAAC;oBACvB,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,aAAa,IAAI,CAAC,gBAAgB,CAAC,aAAa;gBACrF;YACA;gBACI,OAAO,YAAY,IAAI,EAAE;QACjC;IACJ;AACJ,EACA,gCAAgC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 439, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/node_modules/music-metadata/lib/mp4/MP4Parser.js"],"sourcesContent":["import initDebug from 'debug';\nimport * as Token from 'token-types';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { Genres } from '../id3v1/ID3v1Parser.js';\nimport { Atom } from './Atom.js';\nimport * as AtomToken from './AtomToken.js';\nimport { Mp4ContentError } from './AtomToken.js';\nimport { TrackType } from '../type.js';\nimport { uint8ArrayToHex, uint8ArrayToString } from 'uint8array-extras';\nconst debug = initDebug('music-metadata:parser:MP4');\nconst tagFormat = 'iTunes';\nconst encoderDict = {\n    raw: {\n        lossy: false,\n        format: 'raw'\n    },\n    MAC3: {\n        lossy: true,\n        format: 'MACE 3:1'\n    },\n    MAC6: {\n        lossy: true,\n        format: 'MACE 6:1'\n    },\n    ima4: {\n        lossy: true,\n        format: 'IMA 4:1'\n    },\n    ulaw: {\n        lossy: true,\n        format: 'uLaw 2:1'\n    },\n    alaw: {\n        lossy: true,\n        format: 'uLaw 2:1'\n    },\n    Qclp: {\n        lossy: true,\n        format: 'QUALCOMM PureVoice'\n    },\n    '.mp3': {\n        lossy: true,\n        format: 'MPEG-1 layer 3'\n    },\n    alac: {\n        lossy: false,\n        format: 'ALAC'\n    },\n    'ac-3': {\n        lossy: true,\n        format: 'AC-3'\n    },\n    mp4a: {\n        lossy: true,\n        format: 'MPEG-4/AAC'\n    },\n    mp4s: {\n        lossy: true,\n        format: 'MP4S'\n    },\n    // Closed Captioning Media, https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-SW87\n    c608: {\n        lossy: true,\n        format: 'CEA-608'\n    },\n    c708: {\n        lossy: true,\n        format: 'CEA-708'\n    }\n};\nfunction distinct(value, index, self) {\n    return self.indexOf(value) === index;\n}\n/*\n * Parser for the MP4 (MPEG-4 Part 14) container format\n * Standard: ISO/IEC 14496-14\n * supporting:\n * - QuickTime container\n * - MP4 File Format\n * - 3GPP file format\n * - 3GPP2 file format\n *\n * MPEG-4 Audio / Part 3 (.m4a)& MPEG 4 Video (m4v, mp4) extension.\n * Support for Apple iTunes tags as found in a M4A/M4V files.\n * Ref:\n *   https://en.wikipedia.org/wiki/ISO_base_media_file_format\n *   https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/Metadata/Metadata.html\n *   http://atomicparsley.sourceforge.net/mpeg-4files.html\n *   https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata\n *   https://wiki.multimedia.cx/index.php/QuickTime_container\n */\nexport class MP4Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.tracks = [];\n        this.atomParsers = {\n            /**\n             * Parse movie header (mvhd) atom\n             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-56313\n             */\n            mvhd: async (len) => {\n                const mvhd = await this.tokenizer.readToken(new AtomToken.MvhdAtom(len));\n                this.metadata.setFormat('creationTime', mvhd.creationTime);\n                this.metadata.setFormat('modificationTime', mvhd.modificationTime);\n            },\n            /**\n             * Parse media header (mdhd) atom\n             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25615\n             */\n            mdhd: async (len) => {\n                const mdhd_data = await this.tokenizer.readToken(new AtomToken.MdhdAtom(len));\n                // this.parse_mxhd(mdhd_data, this.currentTrack);\n                const td = this.getTrackDescription();\n                td.creationTime = mdhd_data.creationTime;\n                td.modificationTime = mdhd_data.modificationTime;\n                td.timeScale = mdhd_data.timeScale;\n                td.duration = mdhd_data.duration;\n            },\n            chap: async (len) => {\n                const td = this.getTrackDescription();\n                const trackIds = [];\n                while (len >= Token.UINT32_BE.len) {\n                    trackIds.push(await this.tokenizer.readNumber(Token.UINT32_BE));\n                    len -= Token.UINT32_BE.len;\n                }\n                td.chapterList = trackIds;\n            },\n            tkhd: async (len) => {\n                const track = (await this.tokenizer.readToken(new AtomToken.TrackHeaderAtom(len)));\n                this.tracks.push(track);\n            },\n            /**\n             * Parse mdat atom.\n             * Will scan for chapters\n             */\n            mdat: async (len) => {\n                this.audioLengthInBytes = len;\n                this.calculateBitRate();\n                if (this.options.includeChapters) {\n                    const trackWithChapters = this.tracks.filter(track => track.chapterList);\n                    if (trackWithChapters.length === 1) {\n                        const chapterTrackIds = trackWithChapters[0].chapterList;\n                        const chapterTracks = this.tracks.filter(track => chapterTrackIds.indexOf(track.trackId) !== -1);\n                        if (chapterTracks.length === 1) {\n                            return this.parseChapterTrack(chapterTracks[0], trackWithChapters[0], len);\n                        }\n                    }\n                }\n                await this.tokenizer.ignore(len);\n            },\n            ftyp: async (len) => {\n                const types = [];\n                while (len > 0) {\n                    const ftype = await this.tokenizer.readToken(AtomToken.ftyp);\n                    len -= AtomToken.ftyp.len;\n                    const value = ftype.type.replace(/\\W/g, '');\n                    if (value.length > 0) {\n                        types.push(value); // unshift for backward compatibility\n                    }\n                }\n                debug(`ftyp: ${types.join('/')}`);\n                const x = types.filter(distinct).join('/');\n                this.metadata.setFormat('container', x);\n            },\n            /**\n             * Parse sample description atom\n             */\n            stsd: async (len) => {\n                const stsd = await this.tokenizer.readToken(new AtomToken.StsdAtom(len));\n                const trackDescription = this.getTrackDescription();\n                trackDescription.soundSampleDescription = stsd.table.map(dfEntry => this.parseSoundSampleDescription(dfEntry));\n            },\n            /**\n             * sample-to-Chunk Atoms\n             */\n            stsc: async (len) => {\n                const stsc = await this.tokenizer.readToken(new AtomToken.StscAtom(len));\n                this.getTrackDescription().sampleToChunkTable = stsc.entries;\n            },\n            /**\n             * time-to-sample table\n             */\n            stts: async (len) => {\n                const stts = await this.tokenizer.readToken(new AtomToken.SttsAtom(len));\n                this.getTrackDescription().timeToSampleTable = stts.entries;\n            },\n            /**\n             * Parse sample-sizes atom ('stsz')\n             */\n            stsz: async (len) => {\n                const stsz = await this.tokenizer.readToken(new AtomToken.StszAtom(len));\n                const td = this.getTrackDescription();\n                td.sampleSize = stsz.sampleSize;\n                td.sampleSizeTable = stsz.entries;\n            },\n            /**\n             * Parse chunk-offset atom ('stco')\n             */\n            stco: async (len) => {\n                const stco = await this.tokenizer.readToken(new AtomToken.StcoAtom(len));\n                this.getTrackDescription().chunkOffsetTable = stco.entries; // remember chunk offsets\n            },\n            date: async (len) => {\n                const date = await this.tokenizer.readToken(new Token.StringType(len, 'utf-8'));\n                await this.addTag('date', date);\n            }\n        };\n    }\n    static read_BE_Integer(array, signed) {\n        const integerType = (signed ? 'INT' : 'UINT') + array.length * 8 + (array.length > 1 ? '_BE' : '');\n        const token = Token[integerType];\n        if (!token) {\n            throw new Mp4ContentError(`Token for integer type not found: \"${integerType}\"`);\n        }\n        return Number(token.get(array, 0));\n    }\n    async parse() {\n        this.tracks = [];\n        let remainingFileSize = this.tokenizer.fileInfo.size || 0;\n        while (!this.tokenizer.fileInfo.size || remainingFileSize > 0) {\n            try {\n                const token = await this.tokenizer.peekToken(AtomToken.Header);\n                if (token.name === '\\0\\0\\0\\0') {\n                    const errMsg = `Error at offset=${this.tokenizer.position}: box.id=0`;\n                    debug(errMsg);\n                    this.addWarning(errMsg);\n                    break;\n                }\n            }\n            catch (error) {\n                if (error instanceof Error) {\n                    const errMsg = `Error at offset=${this.tokenizer.position}: ${error.message}`;\n                    debug(errMsg);\n                    this.addWarning(errMsg);\n                }\n                else\n                    throw error;\n                break;\n            }\n            const rootAtom = await Atom.readAtom(this.tokenizer, (atom, remaining) => this.handleAtom(atom, remaining), null, remainingFileSize);\n            remainingFileSize -= rootAtom.header.length === BigInt(0) ? remainingFileSize : Number(rootAtom.header.length);\n        }\n        // Post process metadata\n        const formatList = [];\n        this.tracks.forEach(track => {\n            const trackFormats = [];\n            track.soundSampleDescription.forEach(ssd => {\n                const streamInfo = {};\n                const encoderInfo = encoderDict[ssd.dataFormat];\n                if (encoderInfo) {\n                    trackFormats.push(encoderInfo.format);\n                    streamInfo.codecName = encoderInfo.format;\n                }\n                else {\n                    streamInfo.codecName = `<${ssd.dataFormat}>`;\n                }\n                if (ssd.description) {\n                    const { description } = ssd;\n                    if (description.sampleRate > 0) {\n                        streamInfo.type = TrackType.audio;\n                        streamInfo.audio = {\n                            samplingFrequency: description.sampleRate,\n                            bitDepth: description.sampleSize,\n                            channels: description.numAudioChannels\n                        };\n                    }\n                }\n                this.metadata.addStreamInfo(streamInfo);\n            });\n            if (trackFormats.length >= 1) {\n                formatList.push(trackFormats.join('/'));\n            }\n        });\n        if (formatList.length > 0) {\n            this.metadata.setFormat('codec', formatList.filter(distinct).join('+'));\n        }\n        const audioTracks = this.tracks.filter(track => {\n            return track.soundSampleDescription.length >= 1 && track.soundSampleDescription[0].description && track.soundSampleDescription[0].description.numAudioChannels > 0;\n        });\n        if (audioTracks.length >= 1) {\n            const audioTrack = audioTracks[0];\n            if (audioTrack.timeScale > 0) {\n                const duration = audioTrack.duration / audioTrack.timeScale; // calculate duration in seconds\n                this.metadata.setFormat('duration', duration);\n            }\n            const ssd = audioTrack.soundSampleDescription[0];\n            if (ssd.description) {\n                this.metadata.setFormat('sampleRate', ssd.description.sampleRate);\n                this.metadata.setFormat('bitsPerSample', ssd.description.sampleSize);\n                this.metadata.setFormat('numberOfChannels', ssd.description.numAudioChannels);\n                if (audioTrack.timeScale === 0 && audioTrack.timeToSampleTable.length > 0) {\n                    const totalSampleSize = audioTrack.timeToSampleTable\n                        .map(ttstEntry => ttstEntry.count * ttstEntry.duration)\n                        .reduce((total, sampleSize) => total + sampleSize);\n                    const duration = totalSampleSize / ssd.description.sampleRate;\n                    this.metadata.setFormat('duration', duration);\n                }\n            }\n            const encoderInfo = encoderDict[ssd.dataFormat];\n            if (encoderInfo) {\n                this.metadata.setFormat('lossless', !encoderInfo.lossy);\n            }\n            this.calculateBitRate();\n        }\n    }\n    async handleAtom(atom, remaining) {\n        if (atom.parent) {\n            switch (atom.parent.header.name) {\n                case 'ilst':\n                case '<id>':\n                    return this.parseMetadataItemData(atom);\n            }\n        }\n        // const payloadLength = atom.getPayloadLength(remaining);\n        if (this.atomParsers[atom.header.name]) {\n            return this.atomParsers[atom.header.name](remaining);\n        }\n        debug(`No parser for atom path=${atom.atomPath}, payload-len=${remaining}, ignoring atom`);\n        await this.tokenizer.ignore(remaining);\n    }\n    getTrackDescription() {\n        return this.tracks[this.tracks.length - 1];\n    }\n    calculateBitRate() {\n        if (this.audioLengthInBytes && this.metadata.format.duration) {\n            this.metadata.setFormat('bitrate', 8 * this.audioLengthInBytes / this.metadata.format.duration);\n        }\n    }\n    async addTag(id, value) {\n        await this.metadata.addTag(tagFormat, id, value);\n    }\n    addWarning(message) {\n        debug(`Warning: ${message}`);\n        this.metadata.addWarning(message);\n    }\n    /**\n     * Parse data of Meta-item-list-atom (item of 'ilst' atom)\n     * @param metaAtom\n     * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8\n     */\n    parseMetadataItemData(metaAtom) {\n        let tagKey = metaAtom.header.name;\n        return metaAtom.readAtoms(this.tokenizer, async (child, remaining) => {\n            const payLoadLength = child.getPayloadLength(remaining);\n            switch (child.header.name) {\n                case 'data': // value atom\n                    return this.parseValueAtom(tagKey, child);\n                case 'name': // name atom (optional)\n                case 'mean':\n                case 'rate': {\n                    const name = await this.tokenizer.readToken(new AtomToken.NameAtom(payLoadLength));\n                    tagKey += `:${name.name}`;\n                    break;\n                }\n                default: {\n                    const uint8Array = await this.tokenizer.readToken(new Token.Uint8ArrayType(payLoadLength));\n                    this.addWarning(`Unsupported meta-item: ${tagKey}[${child.header.name}] => value=${uint8ArrayToHex(uint8Array)} ascii=${uint8ArrayToString(uint8Array, 'ascii')}`);\n                }\n            }\n        }, metaAtom.getPayloadLength(0));\n    }\n    async parseValueAtom(tagKey, metaAtom) {\n        const dataAtom = await this.tokenizer.readToken(new AtomToken.DataAtom(Number(metaAtom.header.length) - AtomToken.Header.len));\n        if (dataAtom.type.set !== 0) {\n            throw new Mp4ContentError(`Unsupported type-set != 0: ${dataAtom.type.set}`);\n        }\n        // Use well-known-type table\n        // Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW35\n        switch (dataAtom.type.type) {\n            case 0: // reserved: Reserved for use where no type needs to be indicated\n                switch (tagKey) {\n                    case 'trkn':\n                    case 'disk': {\n                        const num = Token.UINT8.get(dataAtom.value, 3);\n                        const of = Token.UINT8.get(dataAtom.value, 5);\n                        // console.log(\"  %s[data] = %s/%s\", tagKey, num, of);\n                        await this.addTag(tagKey, `${num}/${of}`);\n                        break;\n                    }\n                    case 'gnre': {\n                        const genreInt = Token.UINT8.get(dataAtom.value, 1);\n                        const genreStr = Genres[genreInt - 1];\n                        // console.log(\"  %s[data] = %s\", tagKey, genreStr);\n                        await this.addTag(tagKey, genreStr);\n                        break;\n                    }\n                    case 'rate': {\n                        const rate = new TextDecoder('ascii').decode(dataAtom.value);\n                        await this.addTag(tagKey, rate);\n                        break;\n                    }\n                    default:\n                        debug(`unknown proprietary value type for: ${metaAtom.atomPath}`);\n                }\n                break;\n            case 1: // UTF-8: Without any count or NULL terminator\n            case 18: // Unknown: Found in m4b in combination with a '©gen' tag\n                await this.addTag(tagKey, new TextDecoder('utf-8').decode(dataAtom.value));\n                break;\n            case 13: // JPEG\n                if (this.options.skipCovers)\n                    break;\n                await this.addTag(tagKey, {\n                    format: 'image/jpeg',\n                    data: Uint8Array.from(dataAtom.value)\n                });\n                break;\n            case 14: // PNG\n                if (this.options.skipCovers)\n                    break;\n                await this.addTag(tagKey, {\n                    format: 'image/png',\n                    data: Uint8Array.from(dataAtom.value)\n                });\n                break;\n            case 21: // BE Signed Integer\n                await this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, true));\n                break;\n            case 22: // BE Unsigned Integer\n                await this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, false));\n                break;\n            case 65: // An 8-bit signed integer\n                await this.addTag(tagKey, Token.UINT8.get(dataAtom.value, 0));\n                break;\n            case 66: // A big-endian 16-bit signed integer\n                await this.addTag(tagKey, Token.UINT16_BE.get(dataAtom.value, 0));\n                break;\n            case 67: // A big-endian 32-bit signed integer\n                await this.addTag(tagKey, Token.UINT32_BE.get(dataAtom.value, 0));\n                break;\n            default:\n                this.addWarning(`atom key=${tagKey}, has unknown well-known-type (data-type): ${dataAtom.type.type}`);\n        }\n    }\n    /**\n     * @param sampleDescription\n     * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-128916\n     */\n    parseSoundSampleDescription(sampleDescription) {\n        const ssd = {\n            dataFormat: sampleDescription.dataFormat,\n            dataReferenceIndex: sampleDescription.dataReferenceIndex\n        };\n        let offset = 0;\n        if (sampleDescription.description) {\n            const version = AtomToken.SoundSampleDescriptionVersion.get(sampleDescription.description, offset);\n            offset += AtomToken.SoundSampleDescriptionVersion.len;\n            if (version.version === 0 || version.version === 1) {\n                // Sound Sample Description (Version 0)\n                ssd.description = AtomToken.SoundSampleDescriptionV0.get(sampleDescription.description, offset);\n            }\n            else {\n                debug(`Warning: sound-sample-description ${version} not implemented`);\n            }\n        }\n        return ssd;\n    }\n    async parseChapterTrack(chapterTrack, track, len) {\n        if (!chapterTrack.sampleSize) {\n            if (chapterTrack.chunkOffsetTable.length !== chapterTrack.sampleSizeTable.length)\n                throw new Error('Expected equal chunk-offset-table & sample-size-table length.');\n        }\n        const chapters = [];\n        for (let i = 0; i < chapterTrack.chunkOffsetTable.length && len > 0; ++i) {\n            const start = chapterTrack.timeToSampleTable\n                .slice(0, i)\n                .reduce((acc, cur) => acc + cur.duration, 0);\n            const chunkOffset = chapterTrack.chunkOffsetTable[i];\n            const nextChunkLen = chunkOffset - this.tokenizer.position;\n            const sampleSize = chapterTrack.sampleSize > 0 ? chapterTrack.sampleSize : chapterTrack.sampleSizeTable[i];\n            len -= nextChunkLen + sampleSize;\n            if (len < 0)\n                throw new Mp4ContentError('Chapter chunk exceeding token length');\n            await this.tokenizer.ignore(nextChunkLen);\n            const title = await this.tokenizer.readToken(new AtomToken.ChapterText(sampleSize));\n            debug(`Chapter ${i + 1}: ${title}`);\n            const chapter = {\n                title,\n                timeScale: chapterTrack.timeScale,\n                start,\n                sampleOffset: this.findSampleOffset(track, this.tokenizer.position)\n            };\n            debug(`Chapter title=${chapter.title}, offset=${chapter.sampleOffset}/${this.tracks[0].duration}`);\n            chapters.push(chapter);\n        }\n        this.metadata.setFormat('chapters', chapters);\n        await this.tokenizer.ignore(len);\n    }\n    findSampleOffset(track, chapterOffset) {\n        let totalDuration = 0;\n        track.timeToSampleTable.forEach(e => {\n            totalDuration += e.count * e.duration;\n        });\n        debug(`Total duration=${totalDuration}`);\n        let chunkIndex = 0;\n        while (chunkIndex < track.chunkOffsetTable.length && track.chunkOffsetTable[chunkIndex] < chapterOffset) {\n            ++chunkIndex;\n        }\n        return this.getChunkDuration(chunkIndex + 1, track);\n    }\n    getChunkDuration(chunkId, track) {\n        let ttsi = 0;\n        let ttsc = track.timeToSampleTable[ttsi].count;\n        let ttsd = track.timeToSampleTable[ttsi].duration;\n        let curChunkId = 1;\n        let samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);\n        let totalDuration = 0;\n        while (curChunkId < chunkId) {\n            const nrOfSamples = Math.min(ttsc, samplesPerChunk);\n            totalDuration += nrOfSamples * ttsd;\n            ttsc -= nrOfSamples;\n            samplesPerChunk -= nrOfSamples;\n            if (samplesPerChunk === 0) {\n                ++curChunkId;\n                samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);\n            }\n            else {\n                ++ttsi;\n                ttsc = track.timeToSampleTable[ttsi].count;\n                ttsd = track.timeToSampleTable[ttsi].duration;\n            }\n        }\n        return totalDuration;\n    }\n    getSamplesPerChunk(chunkId, stcTable) {\n        for (let i = 0; i < stcTable.length - 1; ++i) {\n            if (chunkId >= stcTable[i].firstChunk && chunkId < stcTable[i + 1].firstChunk) {\n                return stcTable[i].samplesPerChunk;\n            }\n        }\n        return stcTable[stcTable.length - 1].samplesPerChunk;\n    }\n}\n//# sourceMappingURL=MP4Parser.js.map"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;AACA,MAAM,QAAQ,CAAA,GAAA,uIAAA,CAAA,UAAS,AAAD,EAAE;AACxB,MAAM,YAAY;AAClB,MAAM,cAAc;IAChB,KAAK;QACD,OAAO;QACP,QAAQ;IACZ;IACA,MAAM;QACF,OAAO;QACP,QAAQ;IACZ;IACA,MAAM;QACF,OAAO;QACP,QAAQ;IACZ;IACA,MAAM;QACF,OAAO;QACP,QAAQ;IACZ;IACA,MAAM;QACF,OAAO;QACP,QAAQ;IACZ;IACA,MAAM;QACF,OAAO;QACP,QAAQ;IACZ;IACA,MAAM;QACF,OAAO;QACP,QAAQ;IACZ;IACA,QAAQ;QACJ,OAAO;QACP,QAAQ;IACZ;IACA,MAAM;QACF,OAAO;QACP,QAAQ;IACZ;IACA,QAAQ;QACJ,OAAO;QACP,QAAQ;IACZ;IACA,MAAM;QACF,OAAO;QACP,QAAQ;IACZ;IACA,MAAM;QACF,OAAO;QACP,QAAQ;IACZ;IACA,mKAAmK;IACnK,MAAM;QACF,OAAO;QACP,QAAQ;IACZ;IACA,MAAM;QACF,OAAO;QACP,QAAQ;IACZ;AACJ;AACA,SAAS,SAAS,KAAK,EAAE,KAAK,EAAE,IAAI;IAChC,OAAO,KAAK,OAAO,CAAC,WAAW;AACnC;AAmBO,MAAM,kBAAkB,mKAAA,CAAA,cAAW;IACtC,aAAc;QACV,KAAK,IAAI;QACT,IAAI,CAAC,MAAM,GAAG,EAAE;QAChB,IAAI,CAAC,WAAW,GAAG;YACf;;;aAGC,GACD,MAAM,OAAO;gBACT,MAAM,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,8JAAA,CAAA,WAAkB,CAAC;gBACnE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,gBAAgB,KAAK,YAAY;gBACzD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,oBAAoB,KAAK,gBAAgB;YACrE;YACA;;;aAGC,GACD,MAAM,OAAO;gBACT,MAAM,YAAY,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,8JAAA,CAAA,WAAkB,CAAC;gBACxE,iDAAiD;gBACjD,MAAM,KAAK,IAAI,CAAC,mBAAmB;gBACnC,GAAG,YAAY,GAAG,UAAU,YAAY;gBACxC,GAAG,gBAAgB,GAAG,UAAU,gBAAgB;gBAChD,GAAG,SAAS,GAAG,UAAU,SAAS;gBAClC,GAAG,QAAQ,GAAG,UAAU,QAAQ;YACpC;YACA,MAAM,OAAO;gBACT,MAAM,KAAK,IAAI,CAAC,mBAAmB;gBACnC,MAAM,WAAW,EAAE;gBACnB,MAAO,OAAO,iJAAM,SAAS,CAAC,GAAG,CAAE;oBAC/B,SAAS,IAAI,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,iJAAM,SAAS;oBAC7D,OAAO,iJAAM,SAAS,CAAC,GAAG;gBAC9B;gBACA,GAAG,WAAW,GAAG;YACrB;YACA,MAAM,OAAO;gBACT,MAAM,QAAS,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,8JAAA,CAAA,kBAAyB,CAAC;gBAC5E,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACrB;YACA;;;aAGC,GACD,MAAM,OAAO;gBACT,IAAI,CAAC,kBAAkB,GAAG;gBAC1B,IAAI,CAAC,gBAAgB;gBACrB,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;oBAC9B,MAAM,oBAAoB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA,QAAS,MAAM,WAAW;oBACvE,IAAI,kBAAkB,MAAM,KAAK,GAAG;wBAChC,MAAM,kBAAkB,iBAAiB,CAAC,EAAE,CAAC,WAAW;wBACxD,MAAM,gBAAgB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA,QAAS,gBAAgB,OAAO,CAAC,MAAM,OAAO,MAAM,CAAC;wBAC9F,IAAI,cAAc,MAAM,KAAK,GAAG;4BAC5B,OAAO,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,EAAE,EAAE,iBAAiB,CAAC,EAAE,EAAE;wBAC1E;oBACJ;gBACJ;gBACA,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YAChC;YACA,MAAM,OAAO;gBACT,MAAM,QAAQ,EAAE;gBAChB,MAAO,MAAM,EAAG;oBACZ,MAAM,QAAQ,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,8JAAA,CAAA,OAAc;oBAC3D,OAAO,8JAAA,CAAA,OAAc,CAAC,GAAG;oBACzB,MAAM,QAAQ,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO;oBACxC,IAAI,MAAM,MAAM,GAAG,GAAG;wBAClB,MAAM,IAAI,CAAC,QAAQ,qCAAqC;oBAC5D;gBACJ;gBACA,MAAM,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,MAAM;gBAChC,MAAM,IAAI,MAAM,MAAM,CAAC,UAAU,IAAI,CAAC;gBACtC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa;YACzC;YACA;;aAEC,GACD,MAAM,OAAO;gBACT,MAAM,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,8JAAA,CAAA,WAAkB,CAAC;gBACnE,MAAM,mBAAmB,IAAI,CAAC,mBAAmB;gBACjD,iBAAiB,sBAAsB,GAAG,KAAK,KAAK,CAAC,GAAG,CAAC,CAAA,UAAW,IAAI,CAAC,2BAA2B,CAAC;YACzG;YACA;;aAEC,GACD,MAAM,OAAO;gBACT,MAAM,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,8JAAA,CAAA,WAAkB,CAAC;gBACnE,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,GAAG,KAAK,OAAO;YAChE;YACA;;aAEC,GACD,MAAM,OAAO;gBACT,MAAM,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,8JAAA,CAAA,WAAkB,CAAC;gBACnE,IAAI,CAAC,mBAAmB,GAAG,iBAAiB,GAAG,KAAK,OAAO;YAC/D;YACA;;aAEC,GACD,MAAM,OAAO;gBACT,MAAM,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,8JAAA,CAAA,WAAkB,CAAC;gBACnE,MAAM,KAAK,IAAI,CAAC,mBAAmB;gBACnC,GAAG,UAAU,GAAG,KAAK,UAAU;gBAC/B,GAAG,eAAe,GAAG,KAAK,OAAO;YACrC;YACA;;aAEC,GACD,MAAM,OAAO;gBACT,MAAM,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,8JAAA,CAAA,WAAkB,CAAC;gBACnE,IAAI,CAAC,mBAAmB,GAAG,gBAAgB,GAAG,KAAK,OAAO,EAAE,yBAAyB;YACzF;YACA,MAAM,OAAO;gBACT,MAAM,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,iJAAM,UAAU,CAAC,KAAK;gBACtE,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ;YAC9B;QACJ;IACJ;IACA,OAAO,gBAAgB,KAAK,EAAE,MAAM,EAAE;QAClC,MAAM,cAAc,CAAC,SAAS,QAAQ,MAAM,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,MAAM,GAAG,IAAI,QAAQ,EAAE;QACjG,MAAM,QAAQ,gJAAK,CAAC,YAAY;QAChC,IAAI,CAAC,OAAO;YACR,MAAM,IAAI,8JAAA,CAAA,kBAAe,CAAC,CAAC,mCAAmC,EAAE,YAAY,CAAC,CAAC;QAClF;QACA,OAAO,OAAO,MAAM,GAAG,CAAC,OAAO;IACnC;IACA,MAAM,QAAQ;QACV,IAAI,CAAC,MAAM,GAAG,EAAE;QAChB,IAAI,oBAAoB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,IAAI;QACxD,MAAO,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,IAAI,oBAAoB,EAAG;YAC3D,IAAI;gBACA,MAAM,QAAQ,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,8JAAA,CAAA,SAAgB;gBAC7D,IAAI,MAAM,IAAI,KAAK,YAAY;oBAC3B,MAAM,SAAS,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC;oBACrE,MAAM;oBACN,IAAI,CAAC,UAAU,CAAC;oBAChB;gBACJ;YACJ,EACA,OAAO,OAAO;gBACV,IAAI,iBAAiB,OAAO;oBACxB,MAAM,SAAS,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,EAAE,MAAM,OAAO,EAAE;oBAC7E,MAAM;oBACN,IAAI,CAAC,UAAU,CAAC;gBACpB,OAEI,MAAM;gBACV;YACJ;YACA,MAAM,WAAW,MAAM,yJAAA,CAAA,OAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,YAAc,IAAI,CAAC,UAAU,CAAC,MAAM,YAAY,MAAM;YAClH,qBAAqB,SAAS,MAAM,CAAC,MAAM,KAAK,OAAO,KAAK,oBAAoB,OAAO,SAAS,MAAM,CAAC,MAAM;QACjH;QACA,wBAAwB;QACxB,MAAM,aAAa,EAAE;QACrB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;YAChB,MAAM,eAAe,EAAE;YACvB,MAAM,sBAAsB,CAAC,OAAO,CAAC,CAAA;gBACjC,MAAM,aAAa,CAAC;gBACpB,MAAM,cAAc,WAAW,CAAC,IAAI,UAAU,CAAC;gBAC/C,IAAI,aAAa;oBACb,aAAa,IAAI,CAAC,YAAY,MAAM;oBACpC,WAAW,SAAS,GAAG,YAAY,MAAM;gBAC7C,OACK;oBACD,WAAW,SAAS,GAAG,CAAC,CAAC,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC;gBAChD;gBACA,IAAI,IAAI,WAAW,EAAE;oBACjB,MAAM,EAAE,WAAW,EAAE,GAAG;oBACxB,IAAI,YAAY,UAAU,GAAG,GAAG;wBAC5B,WAAW,IAAI,GAAG,+JAAA,CAAA,YAAS,CAAC,KAAK;wBACjC,WAAW,KAAK,GAAG;4BACf,mBAAmB,YAAY,UAAU;4BACzC,UAAU,YAAY,UAAU;4BAChC,UAAU,YAAY,gBAAgB;wBAC1C;oBACJ;gBACJ;gBACA,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;YAChC;YACA,IAAI,aAAa,MAAM,IAAI,GAAG;gBAC1B,WAAW,IAAI,CAAC,aAAa,IAAI,CAAC;YACtC;QACJ;QACA,IAAI,WAAW,MAAM,GAAG,GAAG;YACvB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,WAAW,MAAM,CAAC,UAAU,IAAI,CAAC;QACtE;QACA,MAAM,cAAc,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;YACnC,OAAO,MAAM,sBAAsB,CAAC,MAAM,IAAI,KAAK,MAAM,sBAAsB,CAAC,EAAE,CAAC,WAAW,IAAI,MAAM,sBAAsB,CAAC,EAAE,CAAC,WAAW,CAAC,gBAAgB,GAAG;QACrK;QACA,IAAI,YAAY,MAAM,IAAI,GAAG;YACzB,MAAM,aAAa,WAAW,CAAC,EAAE;YACjC,IAAI,WAAW,SAAS,GAAG,GAAG;gBAC1B,MAAM,WAAW,WAAW,QAAQ,GAAG,WAAW,SAAS,EAAE,gCAAgC;gBAC7F,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY;YACxC;YACA,MAAM,MAAM,WAAW,sBAAsB,CAAC,EAAE;YAChD,IAAI,IAAI,WAAW,EAAE;gBACjB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,IAAI,WAAW,CAAC,UAAU;gBAChE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,iBAAiB,IAAI,WAAW,CAAC,UAAU;gBACnE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,oBAAoB,IAAI,WAAW,CAAC,gBAAgB;gBAC5E,IAAI,WAAW,SAAS,KAAK,KAAK,WAAW,iBAAiB,CAAC,MAAM,GAAG,GAAG;oBACvE,MAAM,kBAAkB,WAAW,iBAAiB,CAC/C,GAAG,CAAC,CAAA,YAAa,UAAU,KAAK,GAAG,UAAU,QAAQ,EACrD,MAAM,CAAC,CAAC,OAAO,aAAe,QAAQ;oBAC3C,MAAM,WAAW,kBAAkB,IAAI,WAAW,CAAC,UAAU;oBAC7D,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY;gBACxC;YACJ;YACA,MAAM,cAAc,WAAW,CAAC,IAAI,UAAU,CAAC;YAC/C,IAAI,aAAa;gBACb,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY,CAAC,YAAY,KAAK;YAC1D;YACA,IAAI,CAAC,gBAAgB;QACzB;IACJ;IACA,MAAM,WAAW,IAAI,EAAE,SAAS,EAAE;QAC9B,IAAI,KAAK,MAAM,EAAE;YACb,OAAQ,KAAK,MAAM,CAAC,MAAM,CAAC,IAAI;gBAC3B,KAAK;gBACL,KAAK;oBACD,OAAO,IAAI,CAAC,qBAAqB,CAAC;YAC1C;QACJ;QACA,0DAA0D;QAC1D,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,MAAM,CAAC,IAAI,CAAC,EAAE;YACpC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9C;QACA,MAAM,CAAC,wBAAwB,EAAE,KAAK,QAAQ,CAAC,cAAc,EAAE,UAAU,eAAe,CAAC;QACzF,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;IAChC;IACA,sBAAsB;QAClB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE;IAC9C;IACA,mBAAmB;QACf,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE;YAC1D,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,IAAI,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ;QAClG;IACJ;IACA,MAAM,OAAO,EAAE,EAAE,KAAK,EAAE;QACpB,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,IAAI;IAC9C;IACA,WAAW,OAAO,EAAE;QAChB,MAAM,CAAC,SAAS,EAAE,SAAS;QAC3B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;IAC7B;IACA;;;;KAIC,GACD,sBAAsB,QAAQ,EAAE;QAC5B,IAAI,SAAS,SAAS,MAAM,CAAC,IAAI;QACjC,OAAO,SAAS,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,OAAO;YACpD,MAAM,gBAAgB,MAAM,gBAAgB,CAAC;YAC7C,OAAQ,MAAM,MAAM,CAAC,IAAI;gBACrB,KAAK;oBACD,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ;gBACvC,KAAK;gBACL,KAAK;gBACL,KAAK;oBAAQ;wBACT,MAAM,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,8JAAA,CAAA,WAAkB,CAAC;wBACnE,UAAU,CAAC,CAAC,EAAE,KAAK,IAAI,EAAE;wBACzB;oBACJ;gBACA;oBAAS;wBACL,MAAM,aAAa,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,iJAAM,cAAc,CAAC;wBAC3E,IAAI,CAAC,UAAU,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC,EAAE,MAAM,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAA,GAAA,+IAAA,CAAA,kBAAe,AAAD,EAAE,YAAY,OAAO,EAAE,CAAA,GAAA,+IAAA,CAAA,qBAAkB,AAAD,EAAE,YAAY,UAAU;oBACrK;YACJ;QACJ,GAAG,SAAS,gBAAgB,CAAC;IACjC;IACA,MAAM,eAAe,MAAM,EAAE,QAAQ,EAAE;QACnC,MAAM,WAAW,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,8JAAA,CAAA,WAAkB,CAAC,OAAO,SAAS,MAAM,CAAC,MAAM,IAAI,8JAAA,CAAA,SAAgB,CAAC,GAAG;QAC5H,IAAI,SAAS,IAAI,CAAC,GAAG,KAAK,GAAG;YACzB,MAAM,IAAI,8JAAA,CAAA,kBAAe,CAAC,CAAC,2BAA2B,EAAE,SAAS,IAAI,CAAC,GAAG,EAAE;QAC/E;QACA,4BAA4B;QAC5B,+IAA+I;QAC/I,OAAQ,SAAS,IAAI,CAAC,IAAI;YACtB,KAAK;gBACD,OAAQ;oBACJ,KAAK;oBACL,KAAK;wBAAQ;4BACT,MAAM,MAAM,iJAAM,KAAK,CAAC,GAAG,CAAC,SAAS,KAAK,EAAE;4BAC5C,MAAM,KAAK,iJAAM,KAAK,CAAC,GAAG,CAAC,SAAS,KAAK,EAAE;4BAC3C,sDAAsD;4BACtD,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,IAAI;4BACxC;wBACJ;oBACA,KAAK;wBAAQ;4BACT,MAAM,WAAW,iJAAM,KAAK,CAAC,GAAG,CAAC,SAAS,KAAK,EAAE;4BACjD,MAAM,WAAW,kKAAA,CAAA,SAAM,CAAC,WAAW,EAAE;4BACrC,oDAAoD;4BACpD,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ;4BAC1B;wBACJ;oBACA,KAAK;wBAAQ;4BACT,MAAM,OAAO,IAAI,YAAY,SAAS,MAAM,CAAC,SAAS,KAAK;4BAC3D,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ;4BAC1B;wBACJ;oBACA;wBACI,MAAM,CAAC,oCAAoC,EAAE,SAAS,QAAQ,EAAE;gBACxE;gBACA;YACJ,KAAK;YACL,KAAK;gBACD,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,YAAY,SAAS,MAAM,CAAC,SAAS,KAAK;gBACxE;YACJ,KAAK;gBACD,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,EACvB;gBACJ,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ;oBACtB,QAAQ;oBACR,MAAM,WAAW,IAAI,CAAC,SAAS,KAAK;gBACxC;gBACA;YACJ,KAAK;gBACD,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,EACvB;gBACJ,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ;oBACtB,QAAQ;oBACR,MAAM,WAAW,IAAI,CAAC,SAAS,KAAK;gBACxC;gBACA;YACJ,KAAK;gBACD,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,UAAU,eAAe,CAAC,SAAS,KAAK,EAAE;gBACpE;YACJ,KAAK;gBACD,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,UAAU,eAAe,CAAC,SAAS,KAAK,EAAE;gBACpE;YACJ,KAAK;gBACD,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,iJAAM,KAAK,CAAC,GAAG,CAAC,SAAS,KAAK,EAAE;gBAC1D;YACJ,KAAK;gBACD,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,iJAAM,SAAS,CAAC,GAAG,CAAC,SAAS,KAAK,EAAE;gBAC9D;YACJ,KAAK;gBACD,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,iJAAM,SAAS,CAAC,GAAG,CAAC,SAAS,KAAK,EAAE;gBAC9D;YACJ;gBACI,IAAI,CAAC,UAAU,CAAC,CAAC,SAAS,EAAE,OAAO,2CAA2C,EAAE,SAAS,IAAI,CAAC,IAAI,EAAE;QAC5G;IACJ;IACA;;;KAGC,GACD,4BAA4B,iBAAiB,EAAE;QAC3C,MAAM,MAAM;YACR,YAAY,kBAAkB,UAAU;YACxC,oBAAoB,kBAAkB,kBAAkB;QAC5D;QACA,IAAI,SAAS;QACb,IAAI,kBAAkB,WAAW,EAAE;YAC/B,MAAM,UAAU,8JAAA,CAAA,gCAAuC,CAAC,GAAG,CAAC,kBAAkB,WAAW,EAAE;YAC3F,UAAU,8JAAA,CAAA,gCAAuC,CAAC,GAAG;YACrD,IAAI,QAAQ,OAAO,KAAK,KAAK,QAAQ,OAAO,KAAK,GAAG;gBAChD,uCAAuC;gBACvC,IAAI,WAAW,GAAG,8JAAA,CAAA,2BAAkC,CAAC,GAAG,CAAC,kBAAkB,WAAW,EAAE;YAC5F,OACK;gBACD,MAAM,CAAC,kCAAkC,EAAE,QAAQ,gBAAgB,CAAC;YACxE;QACJ;QACA,OAAO;IACX;IACA,MAAM,kBAAkB,YAAY,EAAE,KAAK,EAAE,GAAG,EAAE;QAC9C,IAAI,CAAC,aAAa,UAAU,EAAE;YAC1B,IAAI,aAAa,gBAAgB,CAAC,MAAM,KAAK,aAAa,eAAe,CAAC,MAAM,EAC5E,MAAM,IAAI,MAAM;QACxB;QACA,MAAM,WAAW,EAAE;QACnB,IAAK,IAAI,IAAI,GAAG,IAAI,aAAa,gBAAgB,CAAC,MAAM,IAAI,MAAM,GAAG,EAAE,EAAG;YACtE,MAAM,QAAQ,aAAa,iBAAiB,CACvC,KAAK,CAAC,GAAG,GACT,MAAM,CAAC,CAAC,KAAK,MAAQ,MAAM,IAAI,QAAQ,EAAE;YAC9C,MAAM,cAAc,aAAa,gBAAgB,CAAC,EAAE;YACpD,MAAM,eAAe,cAAc,IAAI,CAAC,SAAS,CAAC,QAAQ;YAC1D,MAAM,aAAa,aAAa,UAAU,GAAG,IAAI,aAAa,UAAU,GAAG,aAAa,eAAe,CAAC,EAAE;YAC1G,OAAO,eAAe;YACtB,IAAI,MAAM,GACN,MAAM,IAAI,8JAAA,CAAA,kBAAe,CAAC;YAC9B,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YAC5B,MAAM,QAAQ,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,8JAAA,CAAA,cAAqB,CAAC;YACvE,MAAM,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO;YAClC,MAAM,UAAU;gBACZ;gBACA,WAAW,aAAa,SAAS;gBACjC;gBACA,cAAc,IAAI,CAAC,gBAAgB,CAAC,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ;YACtE;YACA,MAAM,CAAC,cAAc,EAAE,QAAQ,KAAK,CAAC,SAAS,EAAE,QAAQ,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE;YACjG,SAAS,IAAI,CAAC;QAClB;QACA,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY;QACpC,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;IAChC;IACA,iBAAiB,KAAK,EAAE,aAAa,EAAE;QACnC,IAAI,gBAAgB;QACpB,MAAM,iBAAiB,CAAC,OAAO,CAAC,CAAA;YAC5B,iBAAiB,EAAE,KAAK,GAAG,EAAE,QAAQ;QACzC;QACA,MAAM,CAAC,eAAe,EAAE,eAAe;QACvC,IAAI,aAAa;QACjB,MAAO,aAAa,MAAM,gBAAgB,CAAC,MAAM,IAAI,MAAM,gBAAgB,CAAC,WAAW,GAAG,cAAe;YACrG,EAAE;QACN;QACA,OAAO,IAAI,CAAC,gBAAgB,CAAC,aAAa,GAAG;IACjD;IACA,iBAAiB,OAAO,EAAE,KAAK,EAAE;QAC7B,IAAI,OAAO;QACX,IAAI,OAAO,MAAM,iBAAiB,CAAC,KAAK,CAAC,KAAK;QAC9C,IAAI,OAAO,MAAM,iBAAiB,CAAC,KAAK,CAAC,QAAQ;QACjD,IAAI,aAAa;QACjB,IAAI,kBAAkB,IAAI,CAAC,kBAAkB,CAAC,YAAY,MAAM,kBAAkB;QAClF,IAAI,gBAAgB;QACpB,MAAO,aAAa,QAAS;YACzB,MAAM,cAAc,KAAK,GAAG,CAAC,MAAM;YACnC,iBAAiB,cAAc;YAC/B,QAAQ;YACR,mBAAmB;YACnB,IAAI,oBAAoB,GAAG;gBACvB,EAAE;gBACF,kBAAkB,IAAI,CAAC,kBAAkB,CAAC,YAAY,MAAM,kBAAkB;YAClF,OACK;gBACD,EAAE;gBACF,OAAO,MAAM,iBAAiB,CAAC,KAAK,CAAC,KAAK;gBAC1C,OAAO,MAAM,iBAAiB,CAAC,KAAK,CAAC,QAAQ;YACjD;QACJ;QACA,OAAO;IACX;IACA,mBAAmB,OAAO,EAAE,QAAQ,EAAE;QAClC,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,GAAG,GAAG,EAAE,EAAG;YAC1C,IAAI,WAAW,QAAQ,CAAC,EAAE,CAAC,UAAU,IAAI,UAAU,QAAQ,CAAC,IAAI,EAAE,CAAC,UAAU,EAAE;gBAC3E,OAAO,QAAQ,CAAC,EAAE,CAAC,eAAe;YACtC;QACJ;QACA,OAAO,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE,CAAC,eAAe;IACxD;AACJ,EACA,qCAAqC","ignoreList":[0],"debugId":null}}]
}