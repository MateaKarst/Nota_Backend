{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/node_modules/music-metadata/lib/wavpack/WavPackToken.js"],"sourcesContent":["import * as Token from 'token-types';\nimport { FourCcToken } from '../common/FourCC.js';\nconst SampleRates = [6000, 8000, 9600, 11025, 12000, 16000, 22050, 24000, 32000, 44100,\n    48000, 64000, 88200, 96000, 192000, -1];\n/**\n * WavPack Block Header\n *\n * 32-byte little-endian header at the front of every WavPack block\n *\n * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 2/6: 2.0 \"Block Header\")\n */\nexport const BlockHeaderToken = {\n    len: 32,\n    get: (buf, off) => {\n        const flags = Token.UINT32_LE.get(buf, off + 24);\n        const res = {\n            // should equal 'wvpk'\n            BlockID: FourCcToken.get(buf, off),\n            //  0x402 to 0x410 are valid for decode\n            blockSize: Token.UINT32_LE.get(buf, off + 4),\n            //  0x402 (1026) to 0x410 are valid for decode\n            version: Token.UINT16_LE.get(buf, off + 8),\n            //  40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)\n            totalSamples: /* replace with bigint? (Token.UINT8.get(buf, off + 11) << 32) + */ Token.UINT32_LE.get(buf, off + 12),\n            // 40-bit block_index\n            blockIndex: /* replace with bigint? (Token.UINT8.get(buf, off + 10) << 32) + */ Token.UINT32_LE.get(buf, off + 16),\n            // 40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)\n            blockSamples: Token.UINT32_LE.get(buf, off + 20),\n            // various flags for id and decoding\n            flags: {\n                bitsPerSample: (1 + getBitAllignedNumber(flags, 0, 2)) * 8,\n                isMono: isBitSet(flags, 2),\n                isHybrid: isBitSet(flags, 3),\n                isJointStereo: isBitSet(flags, 4),\n                crossChannel: isBitSet(flags, 5),\n                hybridNoiseShaping: isBitSet(flags, 6),\n                floatingPoint: isBitSet(flags, 7),\n                samplingRate: SampleRates[getBitAllignedNumber(flags, 23, 4)],\n                isDSD: isBitSet(flags, 31)\n            },\n            // crc for actual decoded data\n            crc: new Token.Uint8ArrayType(4).get(buf, off + 28)\n        };\n        if (res.flags.isDSD) {\n            res.totalSamples *= 8;\n        }\n        return res;\n    }\n};\n/**\n * 3.0 Metadata Sub-Blocks\n * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 4/6: 3.0 \"Metadata Sub-Block\")\n */\nexport const MetadataIdToken = {\n    len: 1,\n    get: (buf, off) => {\n        return {\n            functionId: getBitAllignedNumber(buf[off], 0, 6), // functionId overlaps with isOptional flag\n            isOptional: isBitSet(buf[off], 5),\n            isOddSize: isBitSet(buf[off], 6),\n            largeBlock: isBitSet(buf[off], 7)\n        };\n    }\n};\nfunction isBitSet(flags, bitOffset) {\n    return getBitAllignedNumber(flags, bitOffset, 1) === 1;\n}\nfunction getBitAllignedNumber(flags, bitOffset, len) {\n    return (flags >>> bitOffset) & (0xffffffff >>> (32 - len));\n}\n//# sourceMappingURL=WavPackToken.js.map"],"names":[],"mappings":";;;;AAAA;AACA;;;AACA,MAAM,cAAc;IAAC;IAAM;IAAM;IAAM;IAAO;IAAO;IAAO;IAAO;IAAO;IAAO;IAC7E;IAAO;IAAO;IAAO;IAAO;IAAQ,CAAC;CAAE;AAQpC,MAAM,mBAAmB;IAC5B,KAAK;IACL,KAAK,CAAC,KAAK;QACP,MAAM,QAAQ,gJAAA,CAAA,YAAe,CAAC,GAAG,CAAC,KAAK,MAAM;QAC7C,MAAM,MAAM;YACR,sBAAsB;YACtB,SAAS,8JAAA,CAAA,cAAW,CAAC,GAAG,CAAC,KAAK;YAC9B,uCAAuC;YACvC,WAAW,gJAAA,CAAA,YAAe,CAAC,GAAG,CAAC,KAAK,MAAM;YAC1C,8CAA8C;YAC9C,SAAS,gJAAA,CAAA,YAAe,CAAC,GAAG,CAAC,KAAK,MAAM;YACxC,4GAA4G;YAC5G,cAAc,iEAAiE,GAAG,gJAAA,CAAA,YAAe,CAAC,GAAG,CAAC,KAAK,MAAM;YACjH,qBAAqB;YACrB,YAAY,iEAAiE,GAAG,gJAAA,CAAA,YAAe,CAAC,GAAG,CAAC,KAAK,MAAM;YAC/G,2GAA2G;YAC3G,cAAc,gJAAA,CAAA,YAAe,CAAC,GAAG,CAAC,KAAK,MAAM;YAC7C,oCAAoC;YACpC,OAAO;gBACH,eAAe,CAAC,IAAI,qBAAqB,OAAO,GAAG,EAAE,IAAI;gBACzD,QAAQ,SAAS,OAAO;gBACxB,UAAU,SAAS,OAAO;gBAC1B,eAAe,SAAS,OAAO;gBAC/B,cAAc,SAAS,OAAO;gBAC9B,oBAAoB,SAAS,OAAO;gBACpC,eAAe,SAAS,OAAO;gBAC/B,cAAc,WAAW,CAAC,qBAAqB,OAAO,IAAI,GAAG;gBAC7D,OAAO,SAAS,OAAO;YAC3B;YACA,8BAA8B;YAC9B,KAAK,IAAI,gJAAA,CAAA,iBAAoB,CAAC,GAAG,GAAG,CAAC,KAAK,MAAM;QACpD;QACA,IAAI,IAAI,KAAK,CAAC,KAAK,EAAE;YACjB,IAAI,YAAY,IAAI;QACxB;QACA,OAAO;IACX;AACJ;AAKO,MAAM,kBAAkB;IAC3B,KAAK;IACL,KAAK,CAAC,KAAK;QACP,OAAO;YACH,YAAY,qBAAqB,GAAG,CAAC,IAAI,EAAE,GAAG;YAC9C,YAAY,SAAS,GAAG,CAAC,IAAI,EAAE;YAC/B,WAAW,SAAS,GAAG,CAAC,IAAI,EAAE;YAC9B,YAAY,SAAS,GAAG,CAAC,IAAI,EAAE;QACnC;IACJ;AACJ;AACA,SAAS,SAAS,KAAK,EAAE,SAAS;IAC9B,OAAO,qBAAqB,OAAO,WAAW,OAAO;AACzD;AACA,SAAS,qBAAqB,KAAK,EAAE,SAAS,EAAE,GAAG;IAC/C,OAAO,AAAC,UAAU,YAAc,eAAgB,KAAK;AACzD,EACA,wCAAwC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/node_modules/music-metadata/lib/wavpack/WavPackParser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport { APEv2Parser } from '../apev2/APEv2Parser.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { BlockHeaderToken, MetadataIdToken } from './WavPackToken.js';\nimport initDebug from 'debug';\nimport { uint8ArrayToHex } from 'uint8array-extras';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:WavPack');\nexport class WavPackContentError extends makeUnexpectedFileContentError('WavPack') {\n}\n/**\n * WavPack Parser\n */\nexport class WavPackParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.audioDataSize = 0;\n    }\n    async parse() {\n        this.audioDataSize = 0;\n        // First parse all WavPack blocks\n        await this.parseWavPackBlocks();\n        // try to parse APEv2 header\n        return APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n    }\n    async parseWavPackBlocks() {\n        do {\n            const blockId = await this.tokenizer.peekToken(FourCcToken);\n            if (blockId !== 'wvpk')\n                break;\n            const header = await this.tokenizer.readToken(BlockHeaderToken);\n            if (header.BlockID !== 'wvpk')\n                throw new WavPackContentError('Invalid WavPack Block-ID');\n            debug(`WavPack header blockIndex=${header.blockIndex}, len=${BlockHeaderToken.len}`);\n            if (header.blockIndex === 0 && !this.metadata.format.container) {\n                this.metadata.setFormat('container', 'WavPack');\n                this.metadata.setFormat('lossless', !header.flags.isHybrid);\n                // tagTypes: this.type,\n                this.metadata.setFormat('bitsPerSample', header.flags.bitsPerSample);\n                if (!header.flags.isDSD) {\n                    // In case isDSD, these values will ne set in ID_DSD_BLOCK\n                    this.metadata.setFormat('sampleRate', header.flags.samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / header.flags.samplingRate);\n                }\n                this.metadata.setFormat('numberOfChannels', header.flags.isMono ? 1 : 2);\n                this.metadata.setFormat('numberOfSamples', header.totalSamples);\n                this.metadata.setFormat('codec', header.flags.isDSD ? 'DSD' : 'PCM');\n            }\n            const ignoreBytes = header.blockSize - (BlockHeaderToken.len - 8);\n            await (header.blockIndex === 0 ? this.parseMetadataSubBlock(header, ignoreBytes) : this.tokenizer.ignore(ignoreBytes));\n            if (header.blockSamples > 0) {\n                this.audioDataSize += header.blockSize; // Count audio data for bit-rate calculation\n            }\n        } while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= BlockHeaderToken.len);\n        if (this.metadata.format.duration) {\n            this.metadata.setFormat('bitrate', this.audioDataSize * 8 / this.metadata.format.duration);\n        }\n    }\n    /**\n     * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks\n     * @param header Header\n     * @param remainingLength Remaining length\n     */\n    async parseMetadataSubBlock(header, remainingLength) {\n        let remaining = remainingLength;\n        while (remaining > MetadataIdToken.len) {\n            const id = await this.tokenizer.readToken(MetadataIdToken);\n            const dataSizeInWords = await this.tokenizer.readNumber(id.largeBlock ? Token.UINT24_LE : Token.UINT8);\n            const data = new Uint8Array(dataSizeInWords * 2 - (id.isOddSize ? 1 : 0));\n            await this.tokenizer.readBuffer(data);\n            debug(`Metadata Sub-Blocks functionId=0x${id.functionId.toString(16)}, id.largeBlock=${id.largeBlock},data-size=${data.length}`);\n            switch (id.functionId) {\n                case 0x0: // ID_DUMMY: could be used to pad WavPack blocks\n                    break;\n                case 0xe: { // ID_DSD_BLOCK\n                    debug('ID_DSD_BLOCK');\n                    // https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n                    const mp = 1 << Token.UINT8.get(data, 0);\n                    const samplingRate = header.flags.samplingRate * mp * 8; // ToDo: second factor should be read from DSD-metadata block https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n                    if (!header.flags.isDSD)\n                        throw new WavPackContentError('Only expect DSD block if DSD-flag is set');\n                    this.metadata.setFormat('sampleRate', samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / samplingRate);\n                    break;\n                }\n                case 0x24: // ID_ALT_TRAILER: maybe used to embed original ID3 tag header\n                    debug('ID_ALT_TRAILER: trailer for non-wav files');\n                    break;\n                case 0x26: // ID_MD5_CHECKSUM\n                    this.metadata.setFormat('audioMD5', data);\n                    break;\n                case 0x2f: // ID_BLOCK_CHECKSUM\n                    debug(`ID_BLOCK_CHECKSUM: checksum=${uint8ArrayToHex(data)}`);\n                    break;\n                default:\n                    debug(`Ignore unsupported meta-sub-block-id functionId=0x${id.functionId.toString(16)}`);\n                    break;\n            }\n            remaining -= MetadataIdToken.len + (id.largeBlock ? Token.UINT24_LE.len : Token.UINT8.len) + dataSizeInWords * 2;\n            debug(`remainingLength=${remaining}`);\n            if (id.isOddSize)\n                this.tokenizer.ignore(1);\n        }\n        if (remaining !== 0)\n            throw new WavPackContentError('metadata-sub-block should fit it remaining length');\n    }\n}\n//# sourceMappingURL=WavPackParser.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}