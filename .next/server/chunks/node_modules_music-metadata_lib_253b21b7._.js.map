{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/node_modules/music-metadata/lib/id3v2/FrameParser.js"],"sourcesContent":["import initDebug from 'debug';\nimport * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { AttachedPictureType, SyncTextHeader, TextEncodingToken, TextHeader } from './ID3v2Token.js';\nimport { Genres } from '../id3v1/ID3v1Parser.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:id3v2:frame-parser');\nconst defaultEnc = 'latin1'; // latin1 == iso-8859-1;\nexport function parseGenre(origVal) {\n    // match everything inside parentheses\n    const genres = [];\n    let code;\n    let word = '';\n    for (const c of origVal) {\n        if (typeof code === 'string') {\n            if (c === '(' && code === '') {\n                word += '(';\n                code = undefined;\n            }\n            else if (c === ')') {\n                if (word !== '') {\n                    genres.push(word);\n                    word = '';\n                }\n                const genre = parseGenreCode(code);\n                if (genre) {\n                    genres.push(genre);\n                }\n                code = undefined;\n            }\n            else\n                code += c;\n        }\n        else if (c === '(') {\n            code = '';\n        }\n        else {\n            word += c;\n        }\n    }\n    if (word) {\n        if (genres.length === 0 && word.match(/^\\d*$/)) {\n            word = parseGenreCode(word);\n        }\n        if (word) {\n            genres.push(word);\n        }\n    }\n    return genres;\n}\nfunction parseGenreCode(code) {\n    if (code === 'RX')\n        return 'Remix';\n    if (code === 'CR')\n        return 'Cover';\n    if (code.match(/^\\d*$/)) {\n        return Genres[Number.parseInt(code)];\n    }\n}\nexport class FrameParser {\n    /**\n     * Create id3v2 frame parser\n     * @param major - Major version, e.g. (4) for  id3v2.4\n     * @param warningCollector - Used to collect decode issue\n     */\n    constructor(major, warningCollector) {\n        this.major = major;\n        this.warningCollector = warningCollector;\n    }\n    readData(uint8Array, type, includeCovers) {\n        if (uint8Array.length === 0) {\n            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);\n            return;\n        }\n        const { encoding, bom } = TextEncodingToken.get(uint8Array, 0);\n        const length = uint8Array.length;\n        let offset = 0;\n        let output = []; // ToDo\n        const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\n        let fzero;\n        debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);\n        switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\n            case 'T*': // 4.2.1. Text information frames - details\n            case 'GRP1': // iTunes-specific ID3v2 grouping field\n            case 'IPLS': // v2.3: Involved people list\n            case 'MVIN':\n            case 'MVNM':\n            case 'PCS':\n            case 'PCST': {\n                let text;\n                try {\n                    text = util.decodeString(uint8Array.slice(1), encoding).replace(/\\x00+$/, '');\n                }\n                catch (error) {\n                    if (error instanceof Error) {\n                        this.warningCollector.addWarning(`id3v2.${this.major} type=${type} header has invalid string value: ${error.message}`);\n                        break;\n                    }\n                    throw error;\n                }\n                switch (type) {\n                    case 'TMCL': // Musician credits list\n                    case 'TIPL': // Involved people list\n                    case 'IPLS': // Involved people list\n                        output = FrameParser.functionList(this.splitValue(type, text));\n                        break;\n                    case 'TRK':\n                    case 'TRCK':\n                    case 'TPOS':\n                        output = text;\n                        break;\n                    case 'TCOM':\n                    case 'TEXT':\n                    case 'TOLY':\n                    case 'TOPE':\n                    case 'TPE1':\n                    case 'TSRC':\n                        // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n                        output = this.splitValue(type, text);\n                        break;\n                    case 'TCO':\n                    case 'TCON':\n                        output = this.splitValue(type, text).map(v => parseGenre(v)).reduce((acc, val) => acc.concat(val), []);\n                        break;\n                    case 'PCS':\n                    case 'PCST':\n                        // TODO: Why `default` not results `1` but `''`?\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                        output = (Array.isArray(output) && output[0] === '') ? 1 : 0;\n                        break;\n                    default:\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                }\n                break;\n            }\n            case 'TXXX': {\n                const idAndData = FrameParser.readIdentifierAndData(uint8Array, offset + 1, length, encoding);\n                const textTag = {\n                    description: idAndData.id,\n                    text: this.splitValue(type, util.decodeString(idAndData.data, encoding).replace(/\\x00+$/, ''))\n                };\n                output = textTag;\n                break;\n            }\n            case 'PIC':\n            case 'APIC':\n                if (includeCovers) {\n                    const pic = {};\n                    offset += 1;\n                    switch (this.major) {\n                        case 2:\n                            pic.format = util.decodeString(uint8Array.slice(offset, offset + 3), 'latin1'); // 'latin1'; // latin1 == iso-8859-1;\n                            offset += 3;\n                            break;\n                        case 3:\n                        case 4:\n                            fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                            pic.format = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                            offset = fzero + 1;\n                            break;\n                        default:\n                            throw makeUnexpectedMajorVersionError(this.major);\n                    }\n                    pic.format = FrameParser.fixPictureMimeType(pic.format);\n                    pic.type = AttachedPictureType[uint8Array[offset]];\n                    offset += 1;\n                    fzero = util.findZero(uint8Array, offset, length, encoding);\n                    pic.description = util.decodeString(uint8Array.slice(offset, fzero), encoding);\n                    offset = fzero + nullTerminatorLength;\n                    pic.data = uint8Array.slice(offset, length);\n                    output = pic;\n                }\n                break;\n            case 'CNT':\n            case 'PCNT':\n                output = Token.UINT32_BE.get(uint8Array, 0);\n                break;\n            case 'SYLT': {\n                const syltHeader = SyncTextHeader.get(uint8Array, 0);\n                offset += SyncTextHeader.len;\n                const result = {\n                    descriptor: '',\n                    language: syltHeader.language,\n                    contentType: syltHeader.contentType,\n                    timeStampFormat: syltHeader.timeStampFormat,\n                    syncText: []\n                };\n                let readSyllables = false;\n                while (offset < length) {\n                    const nullStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), syltHeader.encoding);\n                    offset += nullStr.len;\n                    if (readSyllables) {\n                        const timestamp = Token.UINT32_BE.get(uint8Array, offset);\n                        offset += Token.UINT32_BE.len;\n                        result.syncText.push({\n                            text: nullStr.text,\n                            timestamp\n                        });\n                    }\n                    else {\n                        result.descriptor = nullStr.text;\n                        readSyllables = true;\n                    }\n                }\n                output = result;\n                break;\n            }\n            case 'ULT':\n            case 'USLT':\n            case 'COM':\n            case 'COMM': {\n                const textHeader = TextHeader.get(uint8Array, offset);\n                offset += TextHeader.len;\n                const descriptorStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);\n                offset += descriptorStr.len;\n                const textStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);\n                const comment = {\n                    language: textHeader.language,\n                    descriptor: descriptorStr.text,\n                    text: textStr.text\n                };\n                output = comment;\n                break;\n            }\n            case 'UFID': {\n                const ufid = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: ufid.id, identifier: ufid.data };\n                break;\n            }\n            case 'PRIV': { // private frame\n                const priv = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: priv.id, data: priv.data };\n                break;\n            }\n            case 'POPM': { // Popularimeter\n                fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                const email = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const dataLen = length - offset;\n                output = {\n                    email,\n                    rating: Token.UINT8.get(uint8Array, offset),\n                    counter: dataLen >= 5 ? Token.UINT32_BE.get(uint8Array, offset + 1) : undefined\n                };\n                break;\n            }\n            case 'GEOB': { // General encapsulated object\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const mimeType = util.decodeString(uint8Array.slice(offset + 1, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length, encoding);\n                const filename = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length, encoding);\n                const description = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const geob = {\n                    type: mimeType,\n                    filename,\n                    description,\n                    data: uint8Array.slice(offset, length)\n                };\n                output = geob;\n                break;\n            }\n            // W-Frames:\n            case 'WCOM':\n            case 'WCOP':\n            case 'WOAF':\n            case 'WOAR':\n            case 'WOAS':\n            case 'WORS':\n            case 'WPAY':\n            case 'WPUB':\n                // Decode URL\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                output = util.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                break;\n            case 'WXXX': {\n                // Decode URL\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const description = util.decodeString(uint8Array.slice(offset + 1, fzero), encoding);\n                offset = fzero + (encoding === 'utf-16le' ? 2 : 1);\n                output = { description, url: util.decodeString(uint8Array.slice(offset, length), defaultEnc) };\n                break;\n            }\n            case 'WFD':\n            case 'WFED':\n                output = util.decodeString(uint8Array.slice(offset + 1, util.findZero(uint8Array, offset + 1, length, encoding)), encoding);\n                break;\n            case 'MCDI': {\n                // Music CD identifier\n                output = uint8Array.slice(0, length);\n                break;\n            }\n            default:\n                debug(`Warning: unsupported id3v2-tag-type: ${type}`);\n                break;\n        }\n        return output;\n    }\n    static readNullTerminatedString(uint8Array, encoding) {\n        let offset = encoding.bom ? 2 : 0;\n        const zeroIndex = util.findZero(uint8Array, offset, uint8Array.length, encoding.encoding);\n        const txt = uint8Array.slice(offset, zeroIndex);\n        if (encoding.encoding === 'utf-16le') {\n            offset = zeroIndex + 2;\n        }\n        else {\n            offset = zeroIndex + 1;\n        }\n        return {\n            text: util.decodeString(txt, encoding.encoding),\n            len: offset\n        };\n    }\n    static fixPictureMimeType(pictureType) {\n        pictureType = pictureType.toLocaleLowerCase();\n        switch (pictureType) {\n            case 'jpg':\n                return 'image/jpeg';\n            case 'png':\n                return 'image/png';\n        }\n        return pictureType;\n    }\n    /**\n     * Converts TMCL (Musician credits list) or TIPL (Involved people list)\n     * @param entries\n     */\n    static functionList(entries) {\n        const res = {};\n        for (let i = 0; i + 1 < entries.length; i += 2) {\n            const names = entries[i + 1].split(',');\n            res[entries[i]] = res[entries[i]] ? res[entries[i]].concat(names) : names;\n        }\n        return res;\n    }\n    /**\n     * id3v2.4 defines that multiple T* values are separated by 0x00\n     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n     * @param tag - Tag name\n     * @param text - Concatenated tag value\n     * @returns Split tag value\n     */\n    splitValue(tag, text) {\n        let values;\n        if (this.major < 4) {\n            values = text.split(/\\x00/g);\n            if (values.length > 1) {\n                this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);\n            }\n            else {\n                values = text.split(/\\//g);\n            }\n        }\n        else {\n            values = text.split(/\\x00/g);\n        }\n        return FrameParser.trimArray(values);\n    }\n    static trimArray(values) {\n        return values.map(value => value.replace(/\\x00+$/, '').trim());\n    }\n    static readIdentifierAndData(uint8Array, offset, length, encoding) {\n        const fzero = util.findZero(uint8Array, offset, length, encoding);\n        const id = util.decodeString(uint8Array.slice(offset, fzero), encoding);\n        offset = fzero + FrameParser.getNullTerminatorLength(encoding);\n        return { id, data: uint8Array.slice(offset, length) };\n    }\n    static getNullTerminatorLength(enc) {\n        return enc === 'utf-16le' ? 2 : 1;\n    }\n}\nexport class Id3v2ContentError extends makeUnexpectedFileContentError('id3v2') {\n}\nfunction makeUnexpectedMajorVersionError(majorVer) {\n    throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);\n}\n//# sourceMappingURL=FrameParser.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/node_modules/music-metadata/lib/id3v2/ID3v2Parser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { FrameParser, Id3v2ContentError } from './FrameParser.js';\nimport { ExtendedHeader, ID3v2Header, UINT32SYNCSAFE } from './ID3v2Token.js';\nconst asciiDecoder = new TextDecoder('ascii');\nexport class ID3v2Parser {\n    constructor() {\n        this.tokenizer = undefined;\n        this.id3Header = undefined;\n        this.metadata = undefined;\n        this.headerType = undefined;\n        this.options = undefined;\n    }\n    static removeUnsyncBytes(buffer) {\n        let readI = 0;\n        let writeI = 0;\n        while (readI < buffer.length - 1) {\n            if (readI !== writeI) {\n                buffer[writeI] = buffer[readI];\n            }\n            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;\n            writeI++;\n        }\n        if (readI < buffer.length) {\n            buffer[writeI++] = buffer[readI];\n        }\n        return buffer.slice(0, writeI);\n    }\n    static getFrameHeaderLength(majorVer) {\n        switch (majorVer) {\n            case 2:\n                return 6;\n            case 3:\n            case 4:\n                return 10;\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n    }\n    static readFrameFlags(b) {\n        return {\n            status: {\n                tag_alter_preservation: util.getBit(b, 0, 6),\n                file_alter_preservation: util.getBit(b, 0, 5),\n                read_only: util.getBit(b, 0, 4)\n            },\n            format: {\n                grouping_identity: util.getBit(b, 1, 7),\n                compression: util.getBit(b, 1, 3),\n                encryption: util.getBit(b, 1, 2),\n                unsynchronisation: util.getBit(b, 1, 1),\n                data_length_indicator: util.getBit(b, 1, 0)\n            }\n        };\n    }\n    static readFrameData(uint8Array, frameHeader, majorVer, includeCovers, warningCollector) {\n        const frameParser = new FrameParser(majorVer, warningCollector);\n        switch (majorVer) {\n            case 2:\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            case 3:\n            case 4:\n                if (frameHeader.flags?.format.unsynchronisation) {\n                    uint8Array = ID3v2Parser.removeUnsyncBytes(uint8Array);\n                }\n                if (frameHeader.flags?.format.data_length_indicator) {\n                    uint8Array = uint8Array.slice(4, uint8Array.length);\n                }\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n    }\n    /**\n     * Create a combined tag key, of tag & description\n     * @param tag e.g.: COM\n     * @param description e.g. iTunPGAP\n     * @returns string e.g. COM:iTunPGAP\n     */\n    static makeDescriptionTagName(tag, description) {\n        return tag + (description ? `:${description}` : '');\n    }\n    async parse(metadata, tokenizer, options) {\n        this.tokenizer = tokenizer;\n        this.metadata = metadata;\n        this.options = options;\n        const id3Header = await this.tokenizer.readToken(ID3v2Header);\n        if (id3Header.fileIdentifier !== 'ID3') {\n            throw new Id3v2ContentError('expected ID3-header file-identifier \\'ID3\\' was not found');\n        }\n        this.id3Header = id3Header;\n        this.headerType = (`ID3v2.${id3Header.version.major}`);\n        return id3Header.flags.isExtendedHeader ? this.parseExtendedHeader() : this.parseId3Data(id3Header.size);\n    }\n    async parseExtendedHeader() {\n        const extendedHeader = await this.tokenizer.readToken(ExtendedHeader);\n        const dataRemaining = extendedHeader.size - ExtendedHeader.len;\n        return dataRemaining > 0 ? this.parseExtendedHeaderData(dataRemaining, extendedHeader.size) : this.parseId3Data(this.id3Header.size - extendedHeader.size);\n    }\n    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\n        await this.tokenizer.ignore(dataRemaining);\n        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\n    }\n    async parseId3Data(dataLen) {\n        const uint8Array = await this.tokenizer.readToken(new Token.Uint8ArrayType(dataLen));\n        for (const tag of this.parseMetadata(uint8Array)) {\n            switch (tag.id) {\n                case 'TXXX':\n                    if (tag.value) {\n                        await this.handleTag(tag, tag.value.text, () => tag.value.description);\n                    }\n                    break;\n                default:\n                    await (Array.isArray(tag.value) ? Promise.all(tag.value.map(value => this.addTag(tag.id, value))) : this.addTag(tag.id, tag.value));\n            }\n        }\n    }\n    async handleTag(tag, values, descriptor, resolveValue = value => value) {\n        await Promise.all(values.map(value => this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, descriptor(value)), resolveValue(value))));\n    }\n    async addTag(id, value) {\n        await this.metadata.addTag(this.headerType, id, value);\n    }\n    parseMetadata(data) {\n        let offset = 0;\n        const tags = [];\n        while (true) {\n            if (offset === data.length)\n                break;\n            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\n            if (offset + frameHeaderLength > data.length) {\n                this.metadata.addWarning('Illegal ID3v2 tag length');\n                break;\n            }\n            const frameHeaderBytes = data.slice(offset, offset + frameHeaderLength);\n            offset += frameHeaderLength;\n            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\n            const frameDataBytes = data.slice(offset, offset + frameHeader.length);\n            offset += frameHeader.length;\n            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\n            if (values) {\n                tags.push({ id: frameHeader.id, value: values });\n            }\n        }\n        return tags;\n    }\n    readFrameHeader(uint8Array, majorVer) {\n        let header;\n        switch (majorVer) {\n            case 2:\n                header = {\n                    id: asciiDecoder.decode(uint8Array.slice(0, 3)),\n                    length: Token.UINT24_BE.get(uint8Array, 3)\n                };\n                if (!header.id.match(/[A-Z0-9]{3}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            case 3:\n            case 4:\n                header = {\n                    id: asciiDecoder.decode(uint8Array.slice(0, 4)),\n                    length: (majorVer === 4 ? UINT32SYNCSAFE : Token.UINT32_BE).get(uint8Array, 4),\n                    flags: ID3v2Parser.readFrameFlags(uint8Array.slice(8, 10))\n                };\n                if (!header.id.match(/[A-Z0-9]{4}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n        return header;\n    }\n}\nfunction makeUnexpectedMajorVersionError(majorVer) {\n    throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);\n}\n//# sourceMappingURL=ID3v2Parser.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 606, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js"],"sourcesContent":["import { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { ID3v2Header } from './ID3v2Token.js';\nimport { ID3v2Parser } from './ID3v2Parser.js';\nimport { ID3v1Parser } from '../id3v1/ID3v1Parser.js';\nimport { BasicParser } from '../common/BasicParser.js';\nconst debug = initDebug('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nexport class AbstractID3Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n//# sourceMappingURL=AbstractID3Parser.js.map"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AACA,MAAM,QAAQ,CAAA,GAAA,uIAAA,CAAA,UAAS,AAAD,EAAE;AAIjB,MAAM,0BAA0B,mKAAA,CAAA,cAAW;IAC9C,aAAc;QACV,KAAK,IAAI;QACT,IAAI,CAAC,SAAS,GAAG,IAAI,kKAAA,CAAA,cAAW;IACpC;IACA,aAAa,sBAAsB,SAAS,EAAE;QAC1C,OAAO,CAAC,MAAM,UAAU,SAAS,CAAC,iKAAA,CAAA,cAAW,CAAC,EAAE,cAAc,KAAK;IACvE;IACA,MAAM,QAAQ;QACV,IAAI;YACA,MAAM,IAAI,CAAC,UAAU;QACzB,EACA,OAAO,KAAK;YACR,IAAI,eAAe,mJAAA,CAAA,mBAAgB,EAAE;gBACjC,MAAM;YACV,OACK;gBACD,MAAM;YACV;QACJ;IACJ;IACA,WAAW;QACP;IACJ;IACA,MAAM,aAAa;QACf,MAAM,IAAI,CAAC,mBAAmB;QAC9B,MAAM,kDAAkD,IAAI,CAAC,SAAS,CAAC,QAAQ;QAC/E,MAAM,IAAI,CAAC,cAAc;QACzB,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI;YACxD,IAAI,CAAC,QAAQ;QACjB,OACK;YACD,MAAM,cAAc,IAAI,kKAAA,CAAA,cAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO;YAC/E,MAAM,YAAY,KAAK;YACvB,IAAI,CAAC,QAAQ;QACjB;IACJ;IACA,MAAM,sBAAsB;QACxB,MAAM,YAAY,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,iKAAA,CAAA,cAAW;QAC5D,IAAI,UAAU,cAAc,KAAK,OAAO;YACpC,MAAM,8BAA8B,IAAI,CAAC,SAAS,CAAC,QAAQ;YAC3D,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO;YACtE,OAAO,IAAI,CAAC,mBAAmB;QACnC;IACJ;AACJ,EACA,6CAA6C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 672, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js"],"sourcesContent":["import * as common from '../common/Util.js';\n/**\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#name-code\n */\nconst NameCode = {\n    /**\n     * not set\n     */\n    not_set: 0,\n    /**\n     * Radio Gain Adjustment\n     */\n    radio: 1,\n    /**\n     * Audiophile Gain Adjustment\n     */\n    audiophile: 2\n};\n/**\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#originator-code\n */\nconst ReplayGainOriginator = {\n    /**\n     * Replay Gain unspecified\n     */\n    unspecified: 0,\n    /**\n     * Replay Gain pre-set by artist/producer/mastering engineer\n     */\n    engineer: 1,\n    /**\n     * Replay Gain set by user\n     */\n    user: 2,\n    /**\n     * Replay Gain determined automatically, as described on this site\n     */\n    automatic: 3,\n    /**\n     * Set by simple RMS average\n     */\n    rms_average: 4\n};\n/**\n * Replay Gain Data Format\n *\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format\n */\nexport const ReplayGain = {\n    len: 2,\n    get: (buf, off) => {\n        const gain_type = common.getBitAllignedNumber(buf, off, 0, 3);\n        const sign = common.getBitAllignedNumber(buf, off, 6, 1);\n        const gain_adj = common.getBitAllignedNumber(buf, off, 7, 9) / 10.0;\n        if (gain_type > 0) {\n            return {\n                type: common.getBitAllignedNumber(buf, off, 0, 3),\n                origin: common.getBitAllignedNumber(buf, off, 3, 3),\n                adjustment: (sign ? -gain_adj : gain_adj)\n            };\n        }\n        return undefined;\n    }\n};\n//# sourceMappingURL=ReplayGainDataFormat.js.map"],"names":[],"mappings":";;;AAAA;;AACA;;CAEC,GACD,MAAM,WAAW;IACb;;KAEC,GACD,SAAS;IACT;;KAEC,GACD,OAAO;IACP;;KAEC,GACD,YAAY;AAChB;AACA;;CAEC,GACD,MAAM,uBAAuB;IACzB;;KAEC,GACD,aAAa;IACb;;KAEC,GACD,UAAU;IACV;;KAEC,GACD,MAAM;IACN;;KAEC,GACD,WAAW;IACX;;KAEC,GACD,aAAa;AACjB;AAMO,MAAM,aAAa;IACtB,KAAK;IACL,KAAK,CAAC,KAAK;QACP,MAAM,YAAY,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,KAAK,GAAG;QAC3D,MAAM,OAAO,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,KAAK,GAAG;QACtD,MAAM,WAAW,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,KAAK,GAAG,KAAK;QAC/D,IAAI,YAAY,GAAG;YACf,OAAO;gBACH,MAAM,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,KAAK,GAAG;gBAC/C,QAAQ,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,KAAK,GAAG;gBACjD,YAAa,OAAO,CAAC,WAAW;YACpC;QACJ;QACA,OAAO;IACX;AACJ,GACA,gDAAgD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 731, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js"],"sourcesContent":["/**\n * Extended Lame Header\n */\nimport * as Token from 'token-types';\nimport * as common from '../common/Util.js';\nimport { ReplayGain } from './ReplayGainDataFormat.js';\n/**\n * Info Tag\n * @link http://gabriel.mp3-tech.org/mp3infotag.html\n * @link https://github.com/quodlibet/mutagen/blob/abd58ee58772224334a18817c3fb31103572f70e/mutagen/mp3/_util.py#L112\n */\nexport const ExtendedLameHeader = {\n    len: 27,\n    get: (buf, off) => {\n        const track_peak = Token.UINT32_BE.get(buf, off + 2);\n        return {\n            revision: common.getBitAllignedNumber(buf, off, 0, 4),\n            vbr_method: common.getBitAllignedNumber(buf, off, 4, 4),\n            lowpass_filter: 100 * Token.UINT8.get(buf, off + 1),\n            track_peak: track_peak === 0 ? null : track_peak / 2 ** 23,\n            track_gain: ReplayGain.get(buf, 6),\n            album_gain: ReplayGain.get(buf, 8),\n            music_length: Token.UINT32_BE.get(buf, off + 20),\n            music_crc: Token.UINT8.get(buf, off + 24),\n            header_crc: Token.UINT16_BE.get(buf, off + 24)\n        };\n    }\n};\n//# sourceMappingURL=ExtendedLameHeader.js.map"],"names":[],"mappings":"AAAA;;CAEC;;;AACD;AACA;AACA;;;;AAMO,MAAM,qBAAqB;IAC9B,KAAK;IACL,KAAK,CAAC,KAAK;QACP,MAAM,aAAa,gJAAA,CAAA,YAAe,CAAC,GAAG,CAAC,KAAK,MAAM;QAClD,OAAO;YACH,UAAU,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,KAAK,GAAG;YACnD,YAAY,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,KAAK,GAAG;YACrD,gBAAgB,MAAM,gJAAA,CAAA,QAAW,CAAC,GAAG,CAAC,KAAK,MAAM;YACjD,YAAY,eAAe,IAAI,OAAO,aAAa,KAAK;YACxD,YAAY,0KAAA,CAAA,aAAU,CAAC,GAAG,CAAC,KAAK;YAChC,YAAY,0KAAA,CAAA,aAAU,CAAC,GAAG,CAAC,KAAK;YAChC,cAAc,gJAAA,CAAA,YAAe,CAAC,GAAG,CAAC,KAAK,MAAM;YAC7C,WAAW,gJAAA,CAAA,QAAW,CAAC,GAAG,CAAC,KAAK,MAAM;YACtC,YAAY,gJAAA,CAAA,YAAe,CAAC,GAAG,CAAC,KAAK,MAAM;QAC/C;IACJ;AACJ,GACA,8CAA8C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 765, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/node_modules/music-metadata/lib/mpeg/XingTag.js"],"sourcesContent":["import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { ExtendedLameHeader } from './ExtendedLameHeader.js';\n/**\n * Info Tag: Xing, LAME\n */\nexport const InfoTagHeaderTag = new Token.StringType(4, 'ascii');\n/**\n * LAME TAG value\n * Did not find any official documentation for this\n * Value e.g.: \"3.98.4\"\n */\nexport const LameEncoderVersion = new Token.StringType(6, 'ascii');\n/**\n * Info Tag\n * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n */\nexport const XingHeaderFlags = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            frames: util.isBitSet(buf, off, 31),\n            bytes: util.isBitSet(buf, off, 30),\n            toc: util.isBitSet(buf, off, 29),\n            vbrScale: util.isBitSet(buf, off, 28)\n        };\n    }\n};\n// /**\n//  * XING Header Tag\n//  * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n//  */\nexport async function readXingHeader(tokenizer) {\n    const flags = await tokenizer.readToken(XingHeaderFlags);\n    const xingInfoTag = { numFrames: null, streamSize: null, vbrScale: null };\n    if (flags.frames) {\n        xingInfoTag.numFrames = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    if (flags.bytes) {\n        xingInfoTag.streamSize = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    if (flags.toc) {\n        xingInfoTag.toc = new Uint8Array(100);\n        await tokenizer.readBuffer(xingInfoTag.toc);\n    }\n    if (flags.vbrScale) {\n        xingInfoTag.vbrScale = await tokenizer.readToken(Token.UINT32_BE);\n    }\n    const lameTag = await tokenizer.peekToken(new Token.StringType(4, 'ascii'));\n    if (lameTag === 'LAME') {\n        await tokenizer.ignore(4);\n        xingInfoTag.lame = {\n            version: await tokenizer.readToken(new Token.StringType(5, 'ascii'))\n        };\n        const match = xingInfoTag.lame.version.match(/\\d+.\\d+/g);\n        if (match !== null) {\n            const majorMinorVersion = match[0]; // e.g. 3.97\n            const version = majorMinorVersion.split('.').map(n => Number.parseInt(n, 10));\n            if (version[0] >= 3 && version[1] >= 90) {\n                xingInfoTag.lame.extended = await tokenizer.readToken(ExtendedLameHeader);\n            }\n        }\n    }\n    return xingInfoTag;\n}\n//# sourceMappingURL=XingTag.js.map"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;;;;AAIO,MAAM,mBAAmB,IAAI,gJAAA,CAAA,aAAgB,CAAC,GAAG;AAMjD,MAAM,qBAAqB,IAAI,gJAAA,CAAA,aAAgB,CAAC,GAAG;AAKnD,MAAM,kBAAkB;IAC3B,KAAK;IACL,KAAK,CAAC,KAAK;QACP,OAAO;YACH,QAAQ,CAAA,GAAA,4JAAA,CAAA,WAAa,AAAD,EAAE,KAAK,KAAK;YAChC,OAAO,CAAA,GAAA,4JAAA,CAAA,WAAa,AAAD,EAAE,KAAK,KAAK;YAC/B,KAAK,CAAA,GAAA,4JAAA,CAAA,WAAa,AAAD,EAAE,KAAK,KAAK;YAC7B,UAAU,CAAA,GAAA,4JAAA,CAAA,WAAa,AAAD,EAAE,KAAK,KAAK;QACtC;IACJ;AACJ;AAKO,eAAe,eAAe,SAAS;IAC1C,MAAM,QAAQ,MAAM,UAAU,SAAS,CAAC;IACxC,MAAM,cAAc;QAAE,WAAW;QAAM,YAAY;QAAM,UAAU;IAAK;IACxE,IAAI,MAAM,MAAM,EAAE;QACd,YAAY,SAAS,GAAG,MAAM,UAAU,SAAS,CAAC,gJAAA,CAAA,YAAe;IACrE;IACA,IAAI,MAAM,KAAK,EAAE;QACb,YAAY,UAAU,GAAG,MAAM,UAAU,SAAS,CAAC,gJAAA,CAAA,YAAe;IACtE;IACA,IAAI,MAAM,GAAG,EAAE;QACX,YAAY,GAAG,GAAG,IAAI,WAAW;QACjC,MAAM,UAAU,UAAU,CAAC,YAAY,GAAG;IAC9C;IACA,IAAI,MAAM,QAAQ,EAAE;QAChB,YAAY,QAAQ,GAAG,MAAM,UAAU,SAAS,CAAC,gJAAA,CAAA,YAAe;IACpE;IACA,MAAM,UAAU,MAAM,UAAU,SAAS,CAAC,IAAI,gJAAA,CAAA,aAAgB,CAAC,GAAG;IAClE,IAAI,YAAY,QAAQ;QACpB,MAAM,UAAU,MAAM,CAAC;QACvB,YAAY,IAAI,GAAG;YACf,SAAS,MAAM,UAAU,SAAS,CAAC,IAAI,gJAAA,CAAA,aAAgB,CAAC,GAAG;QAC/D;QACA,MAAM,QAAQ,YAAY,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;QAC7C,IAAI,UAAU,MAAM;YAChB,MAAM,oBAAoB,KAAK,CAAC,EAAE,EAAE,YAAY;YAChD,MAAM,UAAU,kBAAkB,KAAK,CAAC,KAAK,GAAG,CAAC,CAAA,IAAK,OAAO,QAAQ,CAAC,GAAG;YACzE,IAAI,OAAO,CAAC,EAAE,IAAI,KAAK,OAAO,CAAC,EAAE,IAAI,IAAI;gBACrC,YAAY,IAAI,CAAC,QAAQ,GAAG,MAAM,UAAU,SAAS,CAAC,wKAAA,CAAA,qBAAkB;YAC5E;QACJ;IACJ;IACA,OAAO;AACX,EACA,mCAAmC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 833, "column": 0}, "map": {"version":3,"sources":["file:///D:/C/TM2024-25/Nota/Frontend/Nota_Backend/node_modules/music-metadata/lib/mpeg/MpegParser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport * as common from '../common/Util.js';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { InfoTagHeaderTag, LameEncoderVersion, readXingHeader } from './XingTag.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:mpeg');\nexport class MpegContentError extends makeUnexpectedFileContentError('MPEG') {\n}\n/**\n * Cache buffer size used for searching synchronization preabmle\n */\nconst maxPeekLen = 1024;\n/**\n * MPEG-4 Audio definitions\n * Ref:  https://wiki.multimedia.cx/index.php/MPEG-4_Audio\n */\nconst MPEG4 = {\n    /**\n     * Audio Object Types\n     */\n    AudioObjectTypes: [\n        'AAC Main',\n        'AAC LC', // Low Complexity\n        'AAC SSR', // Scalable Sample Rate\n        'AAC LTP' // Long Term Prediction\n    ],\n    /**\n     * Sampling Frequencies\n     * https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Sampling_Frequencies\n     */\n    SamplingFrequencies: [\n        96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350, null, null, -1\n    ]\n    /**\n     * Channel Configurations\n     */\n};\nconst MPEG4_ChannelConfigurations = [\n    undefined,\n    ['front-center'],\n    ['front-left', 'front-right'],\n    ['front-center', 'front-left', 'front-right'],\n    ['front-center', 'front-left', 'front-right', 'back-center'],\n    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right'],\n    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right', 'LFE-channel'],\n    ['front-center', 'front-left', 'front-right', 'side-left', 'side-right', 'back-left', 'back-right', 'LFE-channel']\n];\n/**\n * MPEG Audio Layer I/II/III frame header\n * Ref: https://www.mp3-tech.org/programmer/frame_header.html\n * Bit layout: AAAAAAAA AAABBCCD EEEEFFGH IIJJKLMM\n * Ref: https://wiki.multimedia.cx/index.php/ADTS\n */\nclass MpegFrameHeader {\n    constructor(buf, off) {\n        // E(15,12): Bitrate index\n        this.bitrateIndex = null;\n        // F(11,10): Sampling rate frequency index\n        this.sampRateFreqIndex = null;\n        // G(9): Padding bit\n        this.padding = null;\n        // H(8): Private bit\n        this.privateBit = null;\n        // I(7,6): Channel Mode\n        this.channelModeIndex = null;\n        // J(5,4): Mode extension (Only used in Joint stereo)\n        this.modeExtension = null;\n        // L(2): Original\n        this.isOriginalMedia = null;\n        this.version = null;\n        this.bitrate = null;\n        this.samplingRate = null;\n        this.frameLength = 0;\n        // B(20,19): MPEG Audio versionIndex ID\n        this.versionIndex = common.getBitAllignedNumber(buf, off + 1, 3, 2);\n        // C(18,17): Layer description\n        this.layer = MpegFrameHeader.LayerDescription[common.getBitAllignedNumber(buf, off + 1, 5, 2)];\n        if (this.versionIndex > 1 && this.layer === 0) {\n            this.parseAdtsHeader(buf, off); // Audio Data Transport Stream (ADTS)\n        }\n        else {\n            this.parseMpegHeader(buf, off); // Conventional MPEG header\n        }\n        // D(16): Protection bit (if true 16-bit CRC follows header)\n        this.isProtectedByCRC = !common.isBitSet(buf, off + 1, 7);\n    }\n    calcDuration(numFrames) {\n        return this.samplingRate == null ? null : (numFrames * this.calcSamplesPerFrame() / this.samplingRate);\n    }\n    calcSamplesPerFrame() {\n        return MpegFrameHeader.samplesInFrameTable[this.version === 1 ? 0 : 1][this.layer];\n    }\n    calculateSideInfoLength() {\n        if (this.layer !== 3)\n            return 2;\n        if (this.channelModeIndex === 3) {\n            // mono\n            if (this.version === 1) {\n                return 17;\n            }\n            if (this.version === 2 || this.version === 2.5) {\n                return 9;\n            }\n        }\n        else {\n            if (this.version === 1) {\n                return 32;\n            }\n            if (this.version === 2 || this.version === 2.5) {\n                return 17;\n            }\n        }\n        return null;\n    }\n    calcSlotSize() {\n        return [null, 4, 1, 1][this.layer];\n    }\n    parseMpegHeader(buf, off) {\n        this.container = 'MPEG';\n        // E(15,12): Bitrate index\n        this.bitrateIndex = common.getBitAllignedNumber(buf, off + 2, 0, 4);\n        // F(11,10): Sampling rate frequency index\n        this.sampRateFreqIndex = common.getBitAllignedNumber(buf, off + 2, 4, 2);\n        // G(9): Padding bit\n        this.padding = common.isBitSet(buf, off + 2, 6);\n        // H(8): Private bit\n        this.privateBit = common.isBitSet(buf, off + 2, 7);\n        // I(7,6): Channel Mode\n        this.channelModeIndex = common.getBitAllignedNumber(buf, off + 3, 0, 2);\n        // J(5,4): Mode extension (Only used in Joint stereo)\n        this.modeExtension = common.getBitAllignedNumber(buf, off + 3, 2, 2);\n        // K(3): Copyright\n        this.isCopyrighted = common.isBitSet(buf, off + 3, 4);\n        // L(2): Original\n        this.isOriginalMedia = common.isBitSet(buf, off + 3, 5);\n        // M(3): The original bit indicates, if it is set, that the frame is located on its original media.\n        this.emphasis = common.getBitAllignedNumber(buf, off + 3, 7, 2);\n        this.version = MpegFrameHeader.VersionID[this.versionIndex];\n        this.channelMode = MpegFrameHeader.ChannelMode[this.channelModeIndex];\n        this.codec = `MPEG ${this.version} Layer ${this.layer}`;\n        // Calculate bitrate\n        const bitrateInKbps = this.calcBitrate();\n        if (!bitrateInKbps) {\n            throw new MpegContentError('Cannot determine bit-rate');\n        }\n        this.bitrate = bitrateInKbps * 1000;\n        // Calculate sampling rate\n        this.samplingRate = this.calcSamplingRate();\n        if (this.samplingRate == null) {\n            throw new MpegContentError('Cannot determine sampling-rate');\n        }\n    }\n    parseAdtsHeader(buf, off) {\n        debug(\"layer=0 => ADTS\");\n        this.version = this.versionIndex === 2 ? 4 : 2;\n        this.container = `ADTS/MPEG-${this.version}`;\n        const profileIndex = common.getBitAllignedNumber(buf, off + 2, 0, 2);\n        this.codec = 'AAC';\n        this.codecProfile = MPEG4.AudioObjectTypes[profileIndex];\n        debug(`MPEG-4 audio-codec=${this.codec}`);\n        const samplingFrequencyIndex = common.getBitAllignedNumber(buf, off + 2, 2, 4);\n        this.samplingRate = MPEG4.SamplingFrequencies[samplingFrequencyIndex];\n        debug(`sampling-rate=${this.samplingRate}`);\n        const channelIndex = common.getBitAllignedNumber(buf, off + 2, 7, 3);\n        this.mp4ChannelConfig = MPEG4_ChannelConfigurations[channelIndex];\n        debug(`channel-config=${this.mp4ChannelConfig ? this.mp4ChannelConfig.join('+') : '?'}`);\n        this.frameLength = common.getBitAllignedNumber(buf, off + 3, 6, 2) << 11;\n    }\n    calcBitrate() {\n        if (this.bitrateIndex === 0x00 || // free\n            this.bitrateIndex === 0x0F) { // reserved\n            return null;\n        }\n        if (this.version && this.bitrateIndex) {\n            const codecIndex = 10 * Math.floor(this.version) + this.layer;\n            return MpegFrameHeader.bitrate_index[this.bitrateIndex][codecIndex];\n        }\n        return null;\n    }\n    calcSamplingRate() {\n        if (this.sampRateFreqIndex === 0x03 || this.version === null || this.sampRateFreqIndex == null)\n            return null; // 'reserved'\n        return MpegFrameHeader.sampling_rate_freq_index[this.version][this.sampRateFreqIndex];\n    }\n}\nMpegFrameHeader.SyncByte1 = 0xFF;\nMpegFrameHeader.SyncByte2 = 0xE0;\nMpegFrameHeader.VersionID = [2.5, null, 2, 1];\nMpegFrameHeader.LayerDescription = [0, 3, 2, 1];\nMpegFrameHeader.ChannelMode = ['stereo', 'joint_stereo', 'dual_channel', 'mono'];\nMpegFrameHeader.bitrate_index = {\n    1: { 11: 32, 12: 32, 13: 32, 21: 32, 22: 8, 23: 8 },\n    2: { 11: 64, 12: 48, 13: 40, 21: 48, 22: 16, 23: 16 },\n    3: { 11: 96, 12: 56, 13: 48, 21: 56, 22: 24, 23: 24 },\n    4: { 11: 128, 12: 64, 13: 56, 21: 64, 22: 32, 23: 32 },\n    5: { 11: 160, 12: 80, 13: 64, 21: 80, 22: 40, 23: 40 },\n    6: { 11: 192, 12: 96, 13: 80, 21: 96, 22: 48, 23: 48 },\n    7: { 11: 224, 12: 112, 13: 96, 21: 112, 22: 56, 23: 56 },\n    8: { 11: 256, 12: 128, 13: 112, 21: 128, 22: 64, 23: 64 },\n    9: { 11: 288, 12: 160, 13: 128, 21: 144, 22: 80, 23: 80 },\n    10: { 11: 320, 12: 192, 13: 160, 21: 160, 22: 96, 23: 96 },\n    11: { 11: 352, 12: 224, 13: 192, 21: 176, 22: 112, 23: 112 },\n    12: { 11: 384, 12: 256, 13: 224, 21: 192, 22: 128, 23: 128 },\n    13: { 11: 416, 12: 320, 13: 256, 21: 224, 22: 144, 23: 144 },\n    14: { 11: 448, 12: 384, 13: 320, 21: 256, 22: 160, 23: 160 }\n};\nMpegFrameHeader.sampling_rate_freq_index = {\n    1: { 0: 44100, 1: 48000, 2: 32000 },\n    2: { 0: 22050, 1: 24000, 2: 16000 },\n    2.5: { 0: 11025, 1: 12000, 2: 8000 }\n};\nMpegFrameHeader.samplesInFrameTable = [\n    /* Layer   I    II   III */\n    [0, 384, 1152, 1152], // MPEG-1\n    [0, 384, 1152, 576] // MPEG-2(.5\n];\n/**\n * MPEG Audio Layer I/II/III\n */\nconst FrameHeader = {\n    len: 4,\n    get: (buf, off) => {\n        return new MpegFrameHeader(buf, off);\n    }\n};\nfunction getVbrCodecProfile(vbrScale) {\n    return `V${Math.floor((100 - vbrScale) / 10)}`;\n}\nexport class MpegParser extends AbstractID3Parser {\n    constructor() {\n        super(...arguments);\n        this.frameCount = 0;\n        this.syncFrameCount = -1;\n        this.countSkipFrameData = 0;\n        this.totalDataLength = 0;\n        this.bitrates = [];\n        this.offset = 0;\n        this.frame_size = 0;\n        this.crc = null;\n        this.calculateEofDuration = false;\n        this.samplesPerFrame = null;\n        this.buf_frame_header = new Uint8Array(4);\n        /**\n         * Number of bytes already parsed since beginning of stream / file\n         */\n        this.mpegOffset = null;\n        this.syncPeek = {\n            buf: new Uint8Array(maxPeekLen),\n            len: 0\n        };\n    }\n    /**\n     * Called after ID3 headers have been parsed\n     */\n    async postId3v2Parse() {\n        this.metadata.setFormat('lossless', false);\n        try {\n            let quit = false;\n            while (!quit) {\n                await this.sync();\n                quit = await this.parseCommonMpegHeader();\n            }\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n                if (this.calculateEofDuration) {\n                    if (this.samplesPerFrame !== null) {\n                        const numberOfSamples = this.frameCount * this.samplesPerFrame;\n                        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                        if (this.metadata.format.sampleRate) {\n                            const duration = numberOfSamples / this.metadata.format.sampleRate;\n                            debug(`Calculate duration at EOF: ${duration} sec.`, duration);\n                            this.metadata.setFormat('duration', duration);\n                        }\n                    }\n                }\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    /**\n     * Called after file has been fully parsed, this allows, if present, to exclude the ID3v1.1 header length\n     */\n    finalize() {\n        const format = this.metadata.format;\n        const hasID3v1 = !!this.metadata.native.ID3v1;\n        if (this.mpegOffset !== null) {\n            if (format.duration && this.tokenizer.fileInfo.size) {\n                const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);\n                if (format.codecProfile && format.codecProfile[0] === 'V') {\n                    this.metadata.setFormat('bitrate', mpegSize * 8 / format.duration);\n                }\n            }\n            if (this.tokenizer.fileInfo.size && format.codecProfile === 'CBR') {\n                const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);\n                if (this.frame_size !== null && this.samplesPerFrame !== null) {\n                    const numberOfSamples = Math.round(mpegSize / this.frame_size) * this.samplesPerFrame;\n                    this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                    if (format.sampleRate && !format.duration) {\n                        const duration = numberOfSamples / format.sampleRate;\n                        debug(\"Calculate CBR duration based on file size: %s\", duration);\n                        this.metadata.setFormat('duration', duration);\n                    }\n                }\n            }\n        }\n    }\n    async sync() {\n        let gotFirstSync = false;\n        while (true) {\n            let bo = 0;\n            this.syncPeek.len = await this.tokenizer.peekBuffer(this.syncPeek.buf, { length: maxPeekLen, mayBeLess: true });\n            if (this.syncPeek.len <= 163) {\n                throw new EndOfStreamError();\n            }\n            while (true) {\n                if (gotFirstSync && (this.syncPeek.buf[bo] & 0xE0) === 0xE0) {\n                    this.buf_frame_header[0] = MpegFrameHeader.SyncByte1;\n                    this.buf_frame_header[1] = this.syncPeek.buf[bo];\n                    await this.tokenizer.ignore(bo);\n                    debug(`Sync at offset=${this.tokenizer.position - 1}, frameCount=${this.frameCount}`);\n                    if (this.syncFrameCount === this.frameCount) {\n                        debug(`Re-synced MPEG stream, frameCount=${this.frameCount}`);\n                        this.frameCount = 0;\n                        this.frame_size = 0;\n                    }\n                    this.syncFrameCount = this.frameCount;\n                    return; // sync\n                }\n                gotFirstSync = false;\n                bo = this.syncPeek.buf.indexOf(MpegFrameHeader.SyncByte1, bo);\n                if (bo === -1) {\n                    if (this.syncPeek.len < this.syncPeek.buf.length) {\n                        throw new EndOfStreamError();\n                    }\n                    await this.tokenizer.ignore(this.syncPeek.len);\n                    break; // continue with next buffer\n                }\n                ++bo;\n                gotFirstSync = true;\n            }\n        }\n    }\n    /**\n     * Combined ADTS & MPEG (MP2 & MP3) header handling\n     * @return {Promise<boolean>} true if parser should quit\n     */\n    async parseCommonMpegHeader() {\n        if (this.frameCount === 0) {\n            this.mpegOffset = this.tokenizer.position - 1;\n        }\n        await this.tokenizer.peekBuffer(this.buf_frame_header.subarray(1), { length: 3 });\n        let header;\n        try {\n            header = FrameHeader.get(this.buf_frame_header, 0);\n        }\n        catch (err) {\n            await this.tokenizer.ignore(1);\n            if (err instanceof Error) {\n                this.metadata.addWarning(`Parse error: ${err.message}`);\n                return false; // sync\n            }\n            throw err;\n        }\n        await this.tokenizer.ignore(3);\n        this.metadata.setFormat('container', header.container);\n        this.metadata.setFormat('codec', header.codec);\n        this.metadata.setFormat('lossless', false);\n        this.metadata.setFormat('sampleRate', header.samplingRate);\n        this.frameCount++;\n        return header.version !== null && header.version >= 2 && header.layer === 0 ? this.parseAdts(header) : this.parseAudioFrameHeader(header);\n    }\n    /**\n     * @return {Promise<boolean>} true if parser should quit\n     */\n    async parseAudioFrameHeader(header) {\n        this.metadata.setFormat('numberOfChannels', header.channelMode === 'mono' ? 1 : 2);\n        this.metadata.setFormat('bitrate', header.bitrate);\n        if (this.frameCount < 20 * 10000) {\n            debug('offset=%s MP%s bitrate=%s sample-rate=%s', this.tokenizer.position - 4, header.layer, header.bitrate, header.samplingRate);\n        }\n        const slot_size = header.calcSlotSize();\n        if (slot_size === null) {\n            throw new MpegContentError('invalid slot_size');\n        }\n        const samples_per_frame = header.calcSamplesPerFrame();\n        debug(`samples_per_frame=${samples_per_frame}`);\n        const bps = samples_per_frame / 8.0;\n        if (header.bitrate !== null && header.samplingRate != null) {\n            const fsize = (bps * header.bitrate / header.samplingRate) + ((header.padding) ? slot_size : 0);\n            this.frame_size = Math.floor(fsize);\n        }\n        this.audioFrameHeader = header;\n        if (header.bitrate !== null) {\n            this.bitrates.push(header.bitrate);\n        }\n        // xtra header only exists in first frame\n        if (this.frameCount === 1) {\n            this.offset = FrameHeader.len;\n            await this.skipSideInformation();\n            return false;\n        }\n        if (this.frameCount === 3) {\n            // the stream is CBR if the first 3 frame bitrates are the same\n            if (this.areAllSame(this.bitrates)) {\n                // Actual calculation will be done in finalize\n                this.samplesPerFrame = samples_per_frame;\n                this.metadata.setFormat('codecProfile', 'CBR');\n                if (this.tokenizer.fileInfo.size)\n                    return true; // Will calculate duration based on the file size\n            }\n            else if (this.metadata.format.duration) {\n                return true; // We already got the duration, stop processing MPEG stream any further\n            }\n            if (!this.options.duration) {\n                return true; // Enforce duration not enabled, stop processing entire stream\n            }\n        }\n        // once we know the file is VBR attach listener to end of\n        // stream so we can do the duration calculation when we\n        // have counted all the frames\n        if (this.options.duration && this.frameCount === 4) {\n            this.samplesPerFrame = samples_per_frame;\n            this.calculateEofDuration = true;\n        }\n        this.offset = 4;\n        if (header.isProtectedByCRC) {\n            await this.parseCrc();\n            return false;\n        }\n        await this.skipSideInformation();\n        return false;\n    }\n    async parseAdts(header) {\n        const buf = new Uint8Array(3);\n        await this.tokenizer.readBuffer(buf);\n        header.frameLength += common.getBitAllignedNumber(buf, 0, 0, 11);\n        this.totalDataLength += header.frameLength;\n        this.samplesPerFrame = 1024;\n        if (header.samplingRate !== null) {\n            const framesPerSec = header.samplingRate / this.samplesPerFrame;\n            const bytesPerFrame = this.frameCount === 0 ? 0 : this.totalDataLength / this.frameCount;\n            const bitrate = 8 * bytesPerFrame * framesPerSec + 0.5;\n            this.metadata.setFormat('bitrate', bitrate);\n            debug(`frame-count=${this.frameCount}, size=${header.frameLength} bytes, bit-rate=${bitrate}`);\n        }\n        await this.tokenizer.ignore(header.frameLength > 7 ? header.frameLength - 7 : 1);\n        // Consume remaining header and frame data\n        if (this.frameCount === 3) {\n            this.metadata.setFormat('codecProfile', header.codecProfile);\n            if (header.mp4ChannelConfig) {\n                this.metadata.setFormat('numberOfChannels', header.mp4ChannelConfig.length);\n            }\n            if (this.options.duration) {\n                this.calculateEofDuration = true;\n            }\n            else {\n                return true; // Stop parsing after the third frame\n            }\n        }\n        return false;\n    }\n    async parseCrc() {\n        this.crc = await this.tokenizer.readNumber(Token.INT16_BE);\n        this.offset += 2;\n        return this.skipSideInformation();\n    }\n    async skipSideInformation() {\n        if (this.audioFrameHeader) {\n            const sideinfo_length = this.audioFrameHeader.calculateSideInfoLength();\n            if (sideinfo_length !== null) {\n                await this.tokenizer.readToken(new Token.Uint8ArrayType(sideinfo_length));\n                // side information\n                this.offset += sideinfo_length;\n                await this.readXtraInfoHeader();\n                return;\n            }\n        }\n    }\n    async readXtraInfoHeader() {\n        const headerTag = await this.tokenizer.readToken(InfoTagHeaderTag);\n        this.offset += InfoTagHeaderTag.len; // 12\n        switch (headerTag) {\n            case 'Info':\n                this.metadata.setFormat('codecProfile', 'CBR');\n                return this.readXingInfoHeader();\n            case 'Xing': {\n                const infoTag = await this.readXingInfoHeader();\n                if (infoTag.vbrScale !== null) {\n                    const codecProfile = getVbrCodecProfile(infoTag.vbrScale);\n                    this.metadata.setFormat('codecProfile', codecProfile);\n                }\n                return null;\n            }\n            case 'Xtra':\n                // ToDo: ???\n                break;\n            case 'LAME': {\n                const version = await this.tokenizer.readToken(LameEncoderVersion);\n                if (this.frame_size !== null && this.frame_size >= this.offset + LameEncoderVersion.len) {\n                    this.offset += LameEncoderVersion.len;\n                    this.metadata.setFormat('tool', `LAME ${version}`);\n                    await this.skipFrameData(this.frame_size - this.offset);\n                    return null;\n                }\n                this.metadata.addWarning('Corrupt LAME header');\n                break;\n            }\n            // ToDo: ???\n        }\n        // ToDo: promise duration???\n        const frameDataLeft = this.frame_size - this.offset;\n        if (frameDataLeft < 0) {\n            this.metadata.addWarning(`Frame ${this.frameCount}corrupt: negative frameDataLeft`);\n        }\n        else {\n            await this.skipFrameData(frameDataLeft);\n        }\n        return null;\n    }\n    /**\n     * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n     * @returns {Promise<string>}\n     */\n    async readXingInfoHeader() {\n        const offset = this.tokenizer.position;\n        const infoTag = await readXingHeader(this.tokenizer);\n        this.offset += this.tokenizer.position - offset;\n        if (infoTag.lame) {\n            this.metadata.setFormat('tool', `LAME ${common.stripNulls(infoTag.lame.version)}`);\n            if (infoTag.lame.extended) {\n                // this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain);\n                this.metadata.setFormat('trackPeakLevel', infoTag.lame.extended.track_peak);\n                if (infoTag.lame.extended.track_gain) {\n                    this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain.adjustment);\n                }\n                if (infoTag.lame.extended.album_gain) {\n                    this.metadata.setFormat('albumGain', infoTag.lame.extended.album_gain.adjustment);\n                }\n                this.metadata.setFormat('duration', infoTag.lame.extended.music_length / 1000);\n            }\n        }\n        if (infoTag.streamSize && this.audioFrameHeader && infoTag.numFrames !== null) {\n            const duration = this.audioFrameHeader.calcDuration(infoTag.numFrames);\n            this.metadata.setFormat('duration', duration);\n            debug('Get duration from Xing header: %s', this.metadata.format.duration);\n            return infoTag;\n        }\n        // frames field is not present\n        const frameDataLeft = this.frame_size - this.offset;\n        await this.skipFrameData(frameDataLeft);\n        return infoTag;\n    }\n    async skipFrameData(frameDataLeft) {\n        if (frameDataLeft < 0)\n            throw new MpegContentError('frame-data-left cannot be negative');\n        await this.tokenizer.ignore(frameDataLeft);\n        this.countSkipFrameData += frameDataLeft;\n    }\n    areAllSame(array) {\n        const first = array[0];\n        return array.every(element => {\n            return element === first;\n        });\n    }\n}\n//# sourceMappingURL=MpegParser.js.map"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AACA,MAAM,QAAQ,CAAA,GAAA,uIAAA,CAAA,UAAS,AAAD,EAAE;AACjB,MAAM,yBAAyB,CAAA,GAAA,wJAAA,CAAA,iCAA8B,AAAD,EAAE;AACrE;AACA;;CAEC,GACD,MAAM,aAAa;AACnB;;;CAGC,GACD,MAAM,QAAQ;IACV;;KAEC,GACD,kBAAkB;QACd;QACA;QACA;QACA,UAAU,uBAAuB;KACpC;IACD;;;KAGC,GACD,qBAAqB;QACjB;QAAO;QAAO;QAAO;QAAO;QAAO;QAAO;QAAO;QAAO;QAAO;QAAO;QAAO;QAAM;QAAM;QAAM;QAAM,CAAC;KACzG;AAIL;AACA,MAAM,8BAA8B;IAChC;IACA;QAAC;KAAe;IAChB;QAAC;QAAc;KAAc;IAC7B;QAAC;QAAgB;QAAc;KAAc;IAC7C;QAAC;QAAgB;QAAc;QAAe;KAAc;IAC5D;QAAC;QAAgB;QAAc;QAAe;QAAa;KAAa;IACxE;QAAC;QAAgB;QAAc;QAAe;QAAa;QAAc;KAAc;IACvF;QAAC;QAAgB;QAAc;QAAe;QAAa;QAAc;QAAa;QAAc;KAAc;CACrH;AACD;;;;;CAKC,GACD,MAAM;IACF,YAAY,GAAG,EAAE,GAAG,CAAE;QAClB,0BAA0B;QAC1B,IAAI,CAAC,YAAY,GAAG;QACpB,0CAA0C;QAC1C,IAAI,CAAC,iBAAiB,GAAG;QACzB,oBAAoB;QACpB,IAAI,CAAC,OAAO,GAAG;QACf,oBAAoB;QACpB,IAAI,CAAC,UAAU,GAAG;QAClB,uBAAuB;QACvB,IAAI,CAAC,gBAAgB,GAAG;QACxB,qDAAqD;QACrD,IAAI,CAAC,aAAa,GAAG;QACrB,iBAAiB;QACjB,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,YAAY,GAAG;QACpB,IAAI,CAAC,WAAW,GAAG;QACnB,uCAAuC;QACvC,IAAI,CAAC,YAAY,GAAG,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,MAAM,GAAG,GAAG;QACjE,8BAA8B;QAC9B,IAAI,CAAC,KAAK,GAAG,gBAAgB,gBAAgB,CAAC,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,MAAM,GAAG,GAAG,GAAG;QAC9F,IAAI,IAAI,CAAC,YAAY,GAAG,KAAK,IAAI,CAAC,KAAK,KAAK,GAAG;YAC3C,IAAI,CAAC,eAAe,CAAC,KAAK,MAAM,qCAAqC;QACzE,OACK;YACD,IAAI,CAAC,eAAe,CAAC,KAAK,MAAM,2BAA2B;QAC/D;QACA,4DAA4D;QAC5D,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAA,GAAA,4JAAA,CAAA,WAAe,AAAD,EAAE,KAAK,MAAM,GAAG;IAC3D;IACA,aAAa,SAAS,EAAE;QACpB,OAAO,IAAI,CAAC,YAAY,IAAI,OAAO,OAAQ,YAAY,IAAI,CAAC,mBAAmB,KAAK,IAAI,CAAC,YAAY;IACzG;IACA,sBAAsB;QAClB,OAAO,gBAAgB,mBAAmB,CAAC,IAAI,CAAC,OAAO,KAAK,IAAI,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;IACtF;IACA,0BAA0B;QACtB,IAAI,IAAI,CAAC,KAAK,KAAK,GACf,OAAO;QACX,IAAI,IAAI,CAAC,gBAAgB,KAAK,GAAG;YAC7B,OAAO;YACP,IAAI,IAAI,CAAC,OAAO,KAAK,GAAG;gBACpB,OAAO;YACX;YACA,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,IAAI,CAAC,OAAO,KAAK,KAAK;gBAC5C,OAAO;YACX;QACJ,OACK;YACD,IAAI,IAAI,CAAC,OAAO,KAAK,GAAG;gBACpB,OAAO;YACX;YACA,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,IAAI,CAAC,OAAO,KAAK,KAAK;gBAC5C,OAAO;YACX;QACJ;QACA,OAAO;IACX;IACA,eAAe;QACX,OAAO;YAAC;YAAM;YAAG;YAAG;SAAE,CAAC,IAAI,CAAC,KAAK,CAAC;IACtC;IACA,gBAAgB,GAAG,EAAE,GAAG,EAAE;QACtB,IAAI,CAAC,SAAS,GAAG;QACjB,0BAA0B;QAC1B,IAAI,CAAC,YAAY,GAAG,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,MAAM,GAAG,GAAG;QACjE,0CAA0C;QAC1C,IAAI,CAAC,iBAAiB,GAAG,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,MAAM,GAAG,GAAG;QACtE,oBAAoB;QACpB,IAAI,CAAC,OAAO,GAAG,CAAA,GAAA,4JAAA,CAAA,WAAe,AAAD,EAAE,KAAK,MAAM,GAAG;QAC7C,oBAAoB;QACpB,IAAI,CAAC,UAAU,GAAG,CAAA,GAAA,4JAAA,CAAA,WAAe,AAAD,EAAE,KAAK,MAAM,GAAG;QAChD,uBAAuB;QACvB,IAAI,CAAC,gBAAgB,GAAG,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,MAAM,GAAG,GAAG;QACrE,qDAAqD;QACrD,IAAI,CAAC,aAAa,GAAG,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,MAAM,GAAG,GAAG;QAClE,kBAAkB;QAClB,IAAI,CAAC,aAAa,GAAG,CAAA,GAAA,4JAAA,CAAA,WAAe,AAAD,EAAE,KAAK,MAAM,GAAG;QACnD,iBAAiB;QACjB,IAAI,CAAC,eAAe,GAAG,CAAA,GAAA,4JAAA,CAAA,WAAe,AAAD,EAAE,KAAK,MAAM,GAAG;QACrD,mGAAmG;QACnG,IAAI,CAAC,QAAQ,GAAG,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,MAAM,GAAG,GAAG;QAC7D,IAAI,CAAC,OAAO,GAAG,gBAAgB,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC;QAC3D,IAAI,CAAC,WAAW,GAAG,gBAAgB,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC;QACrE,IAAI,CAAC,KAAK,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,EAAE;QACvD,oBAAoB;QACpB,MAAM,gBAAgB,IAAI,CAAC,WAAW;QACtC,IAAI,CAAC,eAAe;YAChB,MAAM,IAAI,iBAAiB;QAC/B;QACA,IAAI,CAAC,OAAO,GAAG,gBAAgB;QAC/B,0BAA0B;QAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,gBAAgB;QACzC,IAAI,IAAI,CAAC,YAAY,IAAI,MAAM;YAC3B,MAAM,IAAI,iBAAiB;QAC/B;IACJ;IACA,gBAAgB,GAAG,EAAE,GAAG,EAAE;QACtB,MAAM;QACN,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,KAAK,IAAI,IAAI;QAC7C,IAAI,CAAC,SAAS,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,EAAE;QAC5C,MAAM,eAAe,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,MAAM,GAAG,GAAG;QAClE,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,YAAY,GAAG,MAAM,gBAAgB,CAAC,aAAa;QACxD,MAAM,CAAC,mBAAmB,EAAE,IAAI,CAAC,KAAK,EAAE;QACxC,MAAM,yBAAyB,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,MAAM,GAAG,GAAG;QAC5E,IAAI,CAAC,YAAY,GAAG,MAAM,mBAAmB,CAAC,uBAAuB;QACrE,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,EAAE;QAC1C,MAAM,eAAe,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,MAAM,GAAG,GAAG;QAClE,IAAI,CAAC,gBAAgB,GAAG,2BAA2B,CAAC,aAAa;QACjE,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,KAAK;QACvF,IAAI,CAAC,WAAW,GAAG,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,MAAM,GAAG,GAAG,MAAM;IAC1E;IACA,cAAc;QACV,IAAI,IAAI,CAAC,YAAY,KAAK,QAAQ,OAAO;QACrC,IAAI,CAAC,YAAY,KAAK,MAAM;YAC5B,OAAO;QACX;QACA,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,YAAY,EAAE;YACnC,MAAM,aAAa,KAAK,KAAK,KAAK,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK;YAC7D,OAAO,gBAAgB,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,WAAW;QACvE;QACA,OAAO;IACX;IACA,mBAAmB;QACf,IAAI,IAAI,CAAC,iBAAiB,KAAK,QAAQ,IAAI,CAAC,OAAO,KAAK,QAAQ,IAAI,CAAC,iBAAiB,IAAI,MACtF,OAAO,MAAM,aAAa;QAC9B,OAAO,gBAAgB,wBAAwB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC;IACzF;AACJ;AACA,gBAAgB,SAAS,GAAG;AAC5B,gBAAgB,SAAS,GAAG;AAC5B,gBAAgB,SAAS,GAAG;IAAC;IAAK;IAAM;IAAG;CAAE;AAC7C,gBAAgB,gBAAgB,GAAG;IAAC;IAAG;IAAG;IAAG;CAAE;AAC/C,gBAAgB,WAAW,GAAG;IAAC;IAAU;IAAgB;IAAgB;CAAO;AAChF,gBAAgB,aAAa,GAAG;IAC5B,GAAG;QAAE,IAAI;QAAI,IAAI;QAAI,IAAI;QAAI,IAAI;QAAI,IAAI;QAAG,IAAI;IAAE;IAClD,GAAG;QAAE,IAAI;QAAI,IAAI;QAAI,IAAI;QAAI,IAAI;QAAI,IAAI;QAAI,IAAI;IAAG;IACpD,GAAG;QAAE,IAAI;QAAI,IAAI;QAAI,IAAI;QAAI,IAAI;QAAI,IAAI;QAAI,IAAI;IAAG;IACpD,GAAG;QAAE,IAAI;QAAK,IAAI;QAAI,IAAI;QAAI,IAAI;QAAI,IAAI;QAAI,IAAI;IAAG;IACrD,GAAG;QAAE,IAAI;QAAK,IAAI;QAAI,IAAI;QAAI,IAAI;QAAI,IAAI;QAAI,IAAI;IAAG;IACrD,GAAG;QAAE,IAAI;QAAK,IAAI;QAAI,IAAI;QAAI,IAAI;QAAI,IAAI;QAAI,IAAI;IAAG;IACrD,GAAG;QAAE,IAAI;QAAK,IAAI;QAAK,IAAI;QAAI,IAAI;QAAK,IAAI;QAAI,IAAI;IAAG;IACvD,GAAG;QAAE,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;QAAI,IAAI;IAAG;IACxD,GAAG;QAAE,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;QAAI,IAAI;IAAG;IACxD,IAAI;QAAE,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;QAAI,IAAI;IAAG;IACzD,IAAI;QAAE,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;IAAI;IAC3D,IAAI;QAAE,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;IAAI;IAC3D,IAAI;QAAE,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;IAAI;IAC3D,IAAI;QAAE,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;IAAI;AAC/D;AACA,gBAAgB,wBAAwB,GAAG;IACvC,GAAG;QAAE,GAAG;QAAO,GAAG;QAAO,GAAG;IAAM;IAClC,GAAG;QAAE,GAAG;QAAO,GAAG;QAAO,GAAG;IAAM;IAClC,KAAK;QAAE,GAAG;QAAO,GAAG;QAAO,GAAG;IAAK;AACvC;AACA,gBAAgB,mBAAmB,GAAG;IAClC,yBAAyB,GACzB;QAAC;QAAG;QAAK;QAAM;KAAK;IACpB;QAAC;QAAG;QAAK;QAAM;KAAI,CAAC,YAAY;CACnC;AACD;;CAEC,GACD,MAAM,cAAc;IAChB,KAAK;IACL,KAAK,CAAC,KAAK;QACP,OAAO,IAAI,gBAAgB,KAAK;IACpC;AACJ;AACA,SAAS,mBAAmB,QAAQ;IAChC,OAAO,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC,MAAM,QAAQ,IAAI,KAAK;AAClD;AACO,MAAM,mBAAmB,wKAAA,CAAA,oBAAiB;IAC7C,aAAc;QACV,KAAK,IAAI;QACT,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,cAAc,GAAG,CAAC;QACvB,IAAI,CAAC,kBAAkB,GAAG;QAC1B,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,CAAC,QAAQ,GAAG,EAAE;QAClB,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,oBAAoB,GAAG;QAC5B,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,CAAC,gBAAgB,GAAG,IAAI,WAAW;QACvC;;SAEC,GACD,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,QAAQ,GAAG;YACZ,KAAK,IAAI,WAAW;YACpB,KAAK;QACT;IACJ;IACA;;KAEC,GACD,MAAM,iBAAiB;QACnB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY;QACpC,IAAI;YACA,IAAI,OAAO;YACX,MAAO,CAAC,KAAM;gBACV,MAAM,IAAI,CAAC,IAAI;gBACf,OAAO,MAAM,IAAI,CAAC,qBAAqB;YAC3C;QACJ,EACA,OAAO,KAAK;YACR,IAAI,eAAe,mJAAA,CAAA,mBAAgB,EAAE;gBACjC,MAAM;gBACN,IAAI,IAAI,CAAC,oBAAoB,EAAE;oBAC3B,IAAI,IAAI,CAAC,eAAe,KAAK,MAAM;wBAC/B,MAAM,kBAAkB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,eAAe;wBAC9D,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,mBAAmB;wBAC3C,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE;4BACjC,MAAM,WAAW,kBAAkB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU;4BAClE,MAAM,CAAC,2BAA2B,EAAE,SAAS,KAAK,CAAC,EAAE;4BACrD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY;wBACxC;oBACJ;gBACJ;YACJ,OACK;gBACD,MAAM;YACV;QACJ;IACJ;IACA;;KAEC,GACD,WAAW;QACP,MAAM,SAAS,IAAI,CAAC,QAAQ,CAAC,MAAM;QACnC,MAAM,WAAW,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK;QAC7C,IAAI,IAAI,CAAC,UAAU,KAAK,MAAM;YAC1B,IAAI,OAAO,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE;gBACjD,MAAM,WAAW,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,WAAW,MAAM,CAAC;gBACrF,IAAI,OAAO,YAAY,IAAI,OAAO,YAAY,CAAC,EAAE,KAAK,KAAK;oBACvD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,WAAW,IAAI,OAAO,QAAQ;gBACrE;YACJ;YACA,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,IAAI,OAAO,YAAY,KAAK,OAAO;gBAC/D,MAAM,WAAW,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,WAAW,MAAM,CAAC;gBACrF,IAAI,IAAI,CAAC,UAAU,KAAK,QAAQ,IAAI,CAAC,eAAe,KAAK,MAAM;oBAC3D,MAAM,kBAAkB,KAAK,KAAK,CAAC,WAAW,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,eAAe;oBACrF,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,mBAAmB;oBAC3C,IAAI,OAAO,UAAU,IAAI,CAAC,OAAO,QAAQ,EAAE;wBACvC,MAAM,WAAW,kBAAkB,OAAO,UAAU;wBACpD,MAAM,iDAAiD;wBACvD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY;oBACxC;gBACJ;YACJ;QACJ;IACJ;IACA,MAAM,OAAO;QACT,IAAI,eAAe;QACnB,MAAO,KAAM;YACT,IAAI,KAAK;YACT,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE;gBAAE,QAAQ;gBAAY,WAAW;YAAK;YAC7G,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,KAAK;gBAC1B,MAAM,IAAI,mJAAA,CAAA,mBAAgB;YAC9B;YACA,MAAO,KAAM;gBACT,IAAI,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,MAAM,MAAM;oBACzD,IAAI,CAAC,gBAAgB,CAAC,EAAE,GAAG,gBAAgB,SAAS;oBACpD,IAAI,CAAC,gBAAgB,CAAC,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG;oBAChD,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;oBAC5B,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,EAAE,aAAa,EAAE,IAAI,CAAC,UAAU,EAAE;oBACpF,IAAI,IAAI,CAAC,cAAc,KAAK,IAAI,CAAC,UAAU,EAAE;wBACzC,MAAM,CAAC,kCAAkC,EAAE,IAAI,CAAC,UAAU,EAAE;wBAC5D,IAAI,CAAC,UAAU,GAAG;wBAClB,IAAI,CAAC,UAAU,GAAG;oBACtB;oBACA,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU;oBACrC,QAAQ,OAAO;gBACnB;gBACA,eAAe;gBACf,KAAK,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,gBAAgB,SAAS,EAAE;gBAC1D,IAAI,OAAO,CAAC,GAAG;oBACX,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE;wBAC9C,MAAM,IAAI,mJAAA,CAAA,mBAAgB;oBAC9B;oBACA,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG;oBAC7C,OAAO,4BAA4B;gBACvC;gBACA,EAAE;gBACF,eAAe;YACnB;QACJ;IACJ;IACA;;;KAGC,GACD,MAAM,wBAAwB;QAC1B,IAAI,IAAI,CAAC,UAAU,KAAK,GAAG;YACvB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG;QAChD;QACA,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI;YAAE,QAAQ;QAAE;QAC/E,IAAI;QACJ,IAAI;YACA,SAAS,YAAY,GAAG,CAAC,IAAI,CAAC,gBAAgB,EAAE;QACpD,EACA,OAAO,KAAK;YACR,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YAC5B,IAAI,eAAe,OAAO;gBACtB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,aAAa,EAAE,IAAI,OAAO,EAAE;gBACtD,OAAO,OAAO,OAAO;YACzB;YACA,MAAM;QACV;QACA,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QAC5B,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,OAAO,SAAS;QACrD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,OAAO,KAAK;QAC7C,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY;QACpC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,OAAO,YAAY;QACzD,IAAI,CAAC,UAAU;QACf,OAAO,OAAO,OAAO,KAAK,QAAQ,OAAO,OAAO,IAAI,KAAK,OAAO,KAAK,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,UAAU,IAAI,CAAC,qBAAqB,CAAC;IACtI;IACA;;KAEC,GACD,MAAM,sBAAsB,MAAM,EAAE;QAChC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,oBAAoB,OAAO,WAAW,KAAK,SAAS,IAAI;QAChF,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,OAAO,OAAO;QACjD,IAAI,IAAI,CAAC,UAAU,GAAG,KAAK,OAAO;YAC9B,MAAM,4CAA4C,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,GAAG,OAAO,KAAK,EAAE,OAAO,OAAO,EAAE,OAAO,YAAY;QACpI;QACA,MAAM,YAAY,OAAO,YAAY;QACrC,IAAI,cAAc,MAAM;YACpB,MAAM,IAAI,iBAAiB;QAC/B;QACA,MAAM,oBAAoB,OAAO,mBAAmB;QACpD,MAAM,CAAC,kBAAkB,EAAE,mBAAmB;QAC9C,MAAM,MAAM,oBAAoB;QAChC,IAAI,OAAO,OAAO,KAAK,QAAQ,OAAO,YAAY,IAAI,MAAM;YACxD,MAAM,QAAQ,AAAC,MAAM,OAAO,OAAO,GAAG,OAAO,YAAY,GAAI,CAAC,AAAC,OAAO,OAAO,GAAI,YAAY,CAAC;YAC9F,IAAI,CAAC,UAAU,GAAG,KAAK,KAAK,CAAC;QACjC;QACA,IAAI,CAAC,gBAAgB,GAAG;QACxB,IAAI,OAAO,OAAO,KAAK,MAAM;YACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,OAAO;QACrC;QACA,yCAAyC;QACzC,IAAI,IAAI,CAAC,UAAU,KAAK,GAAG;YACvB,IAAI,CAAC,MAAM,GAAG,YAAY,GAAG;YAC7B,MAAM,IAAI,CAAC,mBAAmB;YAC9B,OAAO;QACX;QACA,IAAI,IAAI,CAAC,UAAU,KAAK,GAAG;YACvB,+DAA+D;YAC/D,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,GAAG;gBAChC,8CAA8C;gBAC9C,IAAI,CAAC,eAAe,GAAG;gBACvB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,gBAAgB;gBACxC,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,EAC5B,OAAO,MAAM,iDAAiD;YACtE,OACK,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACpC,OAAO,MAAM,uEAAuE;YACxF;YACA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;gBACxB,OAAO,MAAM,8DAA8D;YAC/E;QACJ;QACA,yDAAyD;QACzD,uDAAuD;QACvD,8BAA8B;QAC9B,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,UAAU,KAAK,GAAG;YAChD,IAAI,CAAC,eAAe,GAAG;YACvB,IAAI,CAAC,oBAAoB,GAAG;QAChC;QACA,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,OAAO,gBAAgB,EAAE;YACzB,MAAM,IAAI,CAAC,QAAQ;YACnB,OAAO;QACX;QACA,MAAM,IAAI,CAAC,mBAAmB;QAC9B,OAAO;IACX;IACA,MAAM,UAAU,MAAM,EAAE;QACpB,MAAM,MAAM,IAAI,WAAW;QAC3B,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;QAChC,OAAO,WAAW,IAAI,CAAA,GAAA,4JAAA,CAAA,uBAA2B,AAAD,EAAE,KAAK,GAAG,GAAG;QAC7D,IAAI,CAAC,eAAe,IAAI,OAAO,WAAW;QAC1C,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,OAAO,YAAY,KAAK,MAAM;YAC9B,MAAM,eAAe,OAAO,YAAY,GAAG,IAAI,CAAC,eAAe;YAC/D,MAAM,gBAAgB,IAAI,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU;YACxF,MAAM,UAAU,IAAI,gBAAgB,eAAe;YACnD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW;YACnC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,WAAW,CAAC,iBAAiB,EAAE,SAAS;QACjG;QACA,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,WAAW,GAAG,IAAI,OAAO,WAAW,GAAG,IAAI;QAC9E,0CAA0C;QAC1C,IAAI,IAAI,CAAC,UAAU,KAAK,GAAG;YACvB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,gBAAgB,OAAO,YAAY;YAC3D,IAAI,OAAO,gBAAgB,EAAE;gBACzB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,oBAAoB,OAAO,gBAAgB,CAAC,MAAM;YAC9E;YACA,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;gBACvB,IAAI,CAAC,oBAAoB,GAAG;YAChC,OACK;gBACD,OAAO,MAAM,qCAAqC;YACtD;QACJ;QACA,OAAO;IACX;IACA,MAAM,WAAW;QACb,IAAI,CAAC,GAAG,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,gJAAA,CAAA,WAAc;QACzD,IAAI,CAAC,MAAM,IAAI;QACf,OAAO,IAAI,CAAC,mBAAmB;IACnC;IACA,MAAM,sBAAsB;QACxB,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,MAAM,kBAAkB,IAAI,CAAC,gBAAgB,CAAC,uBAAuB;YACrE,IAAI,oBAAoB,MAAM;gBAC1B,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,gJAAA,CAAA,iBAAoB,CAAC;gBACxD,mBAAmB;gBACnB,IAAI,CAAC,MAAM,IAAI;gBACf,MAAM,IAAI,CAAC,kBAAkB;gBAC7B;YACJ;QACJ;IACJ;IACA,MAAM,qBAAqB;QACvB,MAAM,YAAY,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,6JAAA,CAAA,mBAAgB;QACjE,IAAI,CAAC,MAAM,IAAI,6JAAA,CAAA,mBAAgB,CAAC,GAAG,EAAE,KAAK;QAC1C,OAAQ;YACJ,KAAK;gBACD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,gBAAgB;gBACxC,OAAO,IAAI,CAAC,kBAAkB;YAClC,KAAK;gBAAQ;oBACT,MAAM,UAAU,MAAM,IAAI,CAAC,kBAAkB;oBAC7C,IAAI,QAAQ,QAAQ,KAAK,MAAM;wBAC3B,MAAM,eAAe,mBAAmB,QAAQ,QAAQ;wBACxD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,gBAAgB;oBAC5C;oBACA,OAAO;gBACX;YACA,KAAK;gBAED;YACJ,KAAK;gBAAQ;oBACT,MAAM,UAAU,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,6JAAA,CAAA,qBAAkB;oBACjE,IAAI,IAAI,CAAC,UAAU,KAAK,QAAQ,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,GAAG,6JAAA,CAAA,qBAAkB,CAAC,GAAG,EAAE;wBACrF,IAAI,CAAC,MAAM,IAAI,6JAAA,CAAA,qBAAkB,CAAC,GAAG;wBACrC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,SAAS;wBACjD,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM;wBACtD,OAAO;oBACX;oBACA,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;oBACzB;gBACJ;QAEJ;QACA,4BAA4B;QAC5B,MAAM,gBAAgB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM;QACnD,IAAI,gBAAgB,GAAG;YACnB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,+BAA+B,CAAC;QACtF,OACK;YACD,MAAM,IAAI,CAAC,aAAa,CAAC;QAC7B;QACA,OAAO;IACX;IACA;;;KAGC,GACD,MAAM,qBAAqB;QACvB,MAAM,SAAS,IAAI,CAAC,SAAS,CAAC,QAAQ;QACtC,MAAM,UAAU,MAAM,CAAA,GAAA,6JAAA,CAAA,iBAAc,AAAD,EAAE,IAAI,CAAC,SAAS;QACnD,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG;QACzC,IAAI,QAAQ,IAAI,EAAE;YACd,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAA,GAAA,4JAAA,CAAA,aAAiB,AAAD,EAAE,QAAQ,IAAI,CAAC,OAAO,GAAG;YACjF,IAAI,QAAQ,IAAI,CAAC,QAAQ,EAAE;gBACvB,0EAA0E;gBAC1E,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,kBAAkB,QAAQ,IAAI,CAAC,QAAQ,CAAC,UAAU;gBAC1E,IAAI,QAAQ,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE;oBAClC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,QAAQ,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU;gBACpF;gBACA,IAAI,QAAQ,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE;oBAClC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,QAAQ,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU;gBACpF;gBACA,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY,QAAQ,IAAI,CAAC,QAAQ,CAAC,YAAY,GAAG;YAC7E;QACJ;QACA,IAAI,QAAQ,UAAU,IAAI,IAAI,CAAC,gBAAgB,IAAI,QAAQ,SAAS,KAAK,MAAM;YAC3E,MAAM,WAAW,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,QAAQ,SAAS;YACrE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY;YACpC,MAAM,qCAAqC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ;YACxE,OAAO;QACX;QACA,8BAA8B;QAC9B,MAAM,gBAAgB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM;QACnD,MAAM,IAAI,CAAC,aAAa,CAAC;QACzB,OAAO;IACX;IACA,MAAM,cAAc,aAAa,EAAE;QAC/B,IAAI,gBAAgB,GAChB,MAAM,IAAI,iBAAiB;QAC/B,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QAC5B,IAAI,CAAC,kBAAkB,IAAI;IAC/B;IACA,WAAW,KAAK,EAAE;QACd,MAAM,QAAQ,KAAK,CAAC,EAAE;QACtB,OAAO,MAAM,KAAK,CAAC,CAAA;YACf,OAAO,YAAY;QACvB;IACJ;AACJ,EACA,sCAAsC","ignoreList":[0],"debugId":null}}]
}